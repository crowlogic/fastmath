/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package arblib;

public class arblib implements arblibConstants {
  public static SWIGTYPE_p_wchar_t wcscpy(SWIGTYPE_p_wchar_t __dest, SWIGTYPE_p_wchar_t __src) {
    long cPtr = arblibJNI.wcscpy(SWIGTYPE_p_wchar_t.getCPtr(__dest), SWIGTYPE_p_wchar_t.getCPtr(__src));
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static SWIGTYPE_p_wchar_t wcsncpy(SWIGTYPE_p_wchar_t __dest, SWIGTYPE_p_wchar_t __src, long __n) {
    long cPtr = arblibJNI.wcsncpy(SWIGTYPE_p_wchar_t.getCPtr(__dest), SWIGTYPE_p_wchar_t.getCPtr(__src), __n);
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static SWIGTYPE_p_wchar_t wcscat(SWIGTYPE_p_wchar_t __dest, SWIGTYPE_p_wchar_t __src) {
    long cPtr = arblibJNI.wcscat(SWIGTYPE_p_wchar_t.getCPtr(__dest), SWIGTYPE_p_wchar_t.getCPtr(__src));
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static SWIGTYPE_p_wchar_t wcsncat(SWIGTYPE_p_wchar_t __dest, SWIGTYPE_p_wchar_t __src, long __n) {
    long cPtr = arblibJNI.wcsncat(SWIGTYPE_p_wchar_t.getCPtr(__dest), SWIGTYPE_p_wchar_t.getCPtr(__src), __n);
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static int wcscmp(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2) {
    return arblibJNI.wcscmp(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2));
  }

  public static int wcsncmp(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2, long __n) {
    return arblibJNI.wcsncmp(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2), __n);
  }

  public static int wcscasecmp(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2) {
    return arblibJNI.wcscasecmp(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2));
  }

  public static int wcsncasecmp(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2, long __n) {
    return arblibJNI.wcsncasecmp(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2), __n);
  }

  public static int wcscasecmp_l(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2, __locale_struct __loc) {
    return arblibJNI.wcscasecmp_l(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2), __locale_struct.getCPtr(__loc), __loc);
  }

  public static int wcsncasecmp_l(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2, long __n, __locale_struct __loc) {
    return arblibJNI.wcsncasecmp_l(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2), __n, __locale_struct.getCPtr(__loc), __loc);
  }

  public static int wcscoll(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2) {
    return arblibJNI.wcscoll(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2));
  }

  public static long wcsxfrm(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2, long __n) {
    return arblibJNI.wcsxfrm(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2), __n);
  }

  public static int wcscoll_l(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2, __locale_struct __loc) {
    return arblibJNI.wcscoll_l(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2), __locale_struct.getCPtr(__loc), __loc);
  }

  public static long wcsxfrm_l(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2, long __n, __locale_struct __loc) {
    return arblibJNI.wcsxfrm_l(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2), __n, __locale_struct.getCPtr(__loc), __loc);
  }

  public static SWIGTYPE_p_wchar_t wcsdup(SWIGTYPE_p_wchar_t __s) {
    long cPtr = arblibJNI.wcsdup(SWIGTYPE_p_wchar_t.getCPtr(__s));
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }


  public static long wcscspn(SWIGTYPE_p_wchar_t __wcs, SWIGTYPE_p_wchar_t __reject) {
    return arblibJNI.wcscspn(SWIGTYPE_p_wchar_t.getCPtr(__wcs), SWIGTYPE_p_wchar_t.getCPtr(__reject));
  }

  public static long wcsspn(SWIGTYPE_p_wchar_t __wcs, SWIGTYPE_p_wchar_t __accept) {
    return arblibJNI.wcsspn(SWIGTYPE_p_wchar_t.getCPtr(__wcs), SWIGTYPE_p_wchar_t.getCPtr(__accept));
  }




  public static SWIGTYPE_p_wchar_t wcstok(SWIGTYPE_p_wchar_t __s, SWIGTYPE_p_wchar_t __delim, SWIGTYPE_p_p_wchar_t __ptr) {
    long cPtr = arblibJNI.wcstok(SWIGTYPE_p_wchar_t.getCPtr(__s), SWIGTYPE_p_wchar_t.getCPtr(__delim), SWIGTYPE_p_p_wchar_t.getCPtr(__ptr));
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static long wcslen(SWIGTYPE_p_wchar_t __s) {
    return arblibJNI.wcslen(SWIGTYPE_p_wchar_t.getCPtr(__s));
  }

  public static long wcsnlen(SWIGTYPE_p_wchar_t __s, long __maxlen) {
    return arblibJNI.wcsnlen(SWIGTYPE_p_wchar_t.getCPtr(__s), __maxlen);
  }

  public static int wmemcmp(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2, long __n) {
    return arblibJNI.wmemcmp(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2), __n);
  }

  public static SWIGTYPE_p_wchar_t wmemcpy(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2, long __n) {
    long cPtr = arblibJNI.wmemcpy(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2), __n);
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static SWIGTYPE_p_wchar_t wmemmove(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2, long __n) {
    long cPtr = arblibJNI.wmemmove(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2), __n);
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static SWIGTYPE_p_wchar_t wmemset(SWIGTYPE_p_wchar_t __s, SWIGTYPE_p_wchar_t __c, long __n) {
    long cPtr = arblibJNI.wmemset(SWIGTYPE_p_wchar_t.getCPtr(__s), SWIGTYPE_p_wchar_t.getCPtr(__c), __n);
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static long btowc(int __c) {
    return arblibJNI.btowc(__c);
  }

  public static int wctob(long __c) {
    return arblibJNI.wctob(__c);
  }

  public static int mbsinit(__mbstate_t __ps) {
    return arblibJNI.mbsinit(__mbstate_t.getCPtr(__ps), __ps);
  }

  public static long mbrtowc(SWIGTYPE_p_wchar_t __pwc, String __s, long __n, __mbstate_t __p) {
    return arblibJNI.mbrtowc(SWIGTYPE_p_wchar_t.getCPtr(__pwc), __s, __n, __mbstate_t.getCPtr(__p), __p);
  }

  public static long wcrtomb(String __s, SWIGTYPE_p_wchar_t __wc, __mbstate_t __ps) {
    return arblibJNI.wcrtomb(__s, SWIGTYPE_p_wchar_t.getCPtr(__wc), __mbstate_t.getCPtr(__ps), __ps);
  }

  public static long __mbrlen(String __s, long __n, __mbstate_t __ps) {
    return arblibJNI.__mbrlen(__s, __n, __mbstate_t.getCPtr(__ps), __ps);
  }

  public static long mbrlen(String __s, long __n, __mbstate_t __ps) {
    return arblibJNI.mbrlen(__s, __n, __mbstate_t.getCPtr(__ps), __ps);
  }

  public static long mbsrtowcs(SWIGTYPE_p_wchar_t __dst, SWIGTYPE_p_p_char __src, long __len, __mbstate_t __ps) {
    return arblibJNI.mbsrtowcs(SWIGTYPE_p_wchar_t.getCPtr(__dst), SWIGTYPE_p_p_char.getCPtr(__src), __len, __mbstate_t.getCPtr(__ps), __ps);
  }

  public static long wcsrtombs(String __dst, SWIGTYPE_p_p_wchar_t __src, long __len, __mbstate_t __ps) {
    return arblibJNI.wcsrtombs(__dst, SWIGTYPE_p_p_wchar_t.getCPtr(__src), __len, __mbstate_t.getCPtr(__ps), __ps);
  }

  public static long mbsnrtowcs(SWIGTYPE_p_wchar_t __dst, SWIGTYPE_p_p_char __src, long __nmc, long __len, __mbstate_t __ps) {
    return arblibJNI.mbsnrtowcs(SWIGTYPE_p_wchar_t.getCPtr(__dst), SWIGTYPE_p_p_char.getCPtr(__src), __nmc, __len, __mbstate_t.getCPtr(__ps), __ps);
  }

  public static long wcsnrtombs(String __dst, SWIGTYPE_p_p_wchar_t __src, long __nwc, long __len, __mbstate_t __ps) {
    return arblibJNI.wcsnrtombs(__dst, SWIGTYPE_p_p_wchar_t.getCPtr(__src), __nwc, __len, __mbstate_t.getCPtr(__ps), __ps);
  }

  public static double wcstod(SWIGTYPE_p_wchar_t __nptr, SWIGTYPE_p_p_wchar_t __endptr) {
    return arblibJNI.wcstod(SWIGTYPE_p_wchar_t.getCPtr(__nptr), SWIGTYPE_p_p_wchar_t.getCPtr(__endptr));
  }

  public static float wcstof(SWIGTYPE_p_wchar_t __nptr, SWIGTYPE_p_p_wchar_t __endptr) {
    return arblibJNI.wcstof(SWIGTYPE_p_wchar_t.getCPtr(__nptr), SWIGTYPE_p_p_wchar_t.getCPtr(__endptr));
  }

  public static SWIGTYPE_p_long_double wcstold(SWIGTYPE_p_wchar_t __nptr, SWIGTYPE_p_p_wchar_t __endptr) {
    return new SWIGTYPE_p_long_double(arblibJNI.wcstold(SWIGTYPE_p_wchar_t.getCPtr(__nptr), SWIGTYPE_p_p_wchar_t.getCPtr(__endptr)), true);
  }

  public static int wcstol(SWIGTYPE_p_wchar_t __nptr, SWIGTYPE_p_p_wchar_t __endptr, int __base) {
    return arblibJNI.wcstol(SWIGTYPE_p_wchar_t.getCPtr(__nptr), SWIGTYPE_p_p_wchar_t.getCPtr(__endptr), __base);
  }

  public static long wcstoul(SWIGTYPE_p_wchar_t __nptr, SWIGTYPE_p_p_wchar_t __endptr, int __base) {
    return arblibJNI.wcstoul(SWIGTYPE_p_wchar_t.getCPtr(__nptr), SWIGTYPE_p_p_wchar_t.getCPtr(__endptr), __base);
  }

  public static long wcstoll(SWIGTYPE_p_wchar_t __nptr, SWIGTYPE_p_p_wchar_t __endptr, int __base) {
    return arblibJNI.wcstoll(SWIGTYPE_p_wchar_t.getCPtr(__nptr), SWIGTYPE_p_p_wchar_t.getCPtr(__endptr), __base);
  }

  public static java.math.BigInteger wcstoull(SWIGTYPE_p_wchar_t __nptr, SWIGTYPE_p_p_wchar_t __endptr, int __base) {
    return arblibJNI.wcstoull(SWIGTYPE_p_wchar_t.getCPtr(__nptr), SWIGTYPE_p_p_wchar_t.getCPtr(__endptr), __base);
  }

  public static SWIGTYPE_p_wchar_t wcpcpy(SWIGTYPE_p_wchar_t __dest, SWIGTYPE_p_wchar_t __src) {
    long cPtr = arblibJNI.wcpcpy(SWIGTYPE_p_wchar_t.getCPtr(__dest), SWIGTYPE_p_wchar_t.getCPtr(__src));
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static SWIGTYPE_p_wchar_t wcpncpy(SWIGTYPE_p_wchar_t __dest, SWIGTYPE_p_wchar_t __src, long __n) {
    long cPtr = arblibJNI.wcpncpy(SWIGTYPE_p_wchar_t.getCPtr(__dest), SWIGTYPE_p_wchar_t.getCPtr(__src), __n);
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static _IO_FILE open_wmemstream(SWIGTYPE_p_p_wchar_t __bufloc, SWIGTYPE_p_size_t __sizeloc) {
    long cPtr = arblibJNI.open_wmemstream(SWIGTYPE_p_p_wchar_t.getCPtr(__bufloc), SWIGTYPE_p_size_t.getCPtr(__sizeloc));
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static int fwide(_IO_FILE __fp, int __mode) {
    return arblibJNI.fwide(_IO_FILE.getCPtr(__fp), __fp, __mode);
  }

  public static int fwprintf(_IO_FILE __stream, SWIGTYPE_p_wchar_t __format) {
    return arblibJNI.fwprintf(_IO_FILE.getCPtr(__stream), __stream, SWIGTYPE_p_wchar_t.getCPtr(__format));
  }

  public static int wprintf(SWIGTYPE_p_wchar_t __format) {
    return arblibJNI.wprintf(SWIGTYPE_p_wchar_t.getCPtr(__format));
  }

  public static int swprintf(SWIGTYPE_p_wchar_t __s, long __n, SWIGTYPE_p_wchar_t __format) {
    return arblibJNI.swprintf(SWIGTYPE_p_wchar_t.getCPtr(__s), __n, SWIGTYPE_p_wchar_t.getCPtr(__format));
  }

  public static int vfwprintf(_IO_FILE __s, SWIGTYPE_p_wchar_t __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vfwprintf(_IO_FILE.getCPtr(__s), __s, SWIGTYPE_p_wchar_t.getCPtr(__format), SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int vwprintf(SWIGTYPE_p_wchar_t __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vwprintf(SWIGTYPE_p_wchar_t.getCPtr(__format), SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int vswprintf(SWIGTYPE_p_wchar_t __s, long __n, SWIGTYPE_p_wchar_t __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vswprintf(SWIGTYPE_p_wchar_t.getCPtr(__s), __n, SWIGTYPE_p_wchar_t.getCPtr(__format), SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int fwscanf(_IO_FILE __stream, SWIGTYPE_p_wchar_t __format) {
    return arblibJNI.fwscanf(_IO_FILE.getCPtr(__stream), __stream, SWIGTYPE_p_wchar_t.getCPtr(__format));
  }

  public static int wscanf(SWIGTYPE_p_wchar_t __format) {
    return arblibJNI.wscanf(SWIGTYPE_p_wchar_t.getCPtr(__format));
  }

  public static int swscanf(SWIGTYPE_p_wchar_t __s, SWIGTYPE_p_wchar_t __format) {
    return arblibJNI.swscanf(SWIGTYPE_p_wchar_t.getCPtr(__s), SWIGTYPE_p_wchar_t.getCPtr(__format));
  }

  public static int __isoc99_fwscanf(_IO_FILE __stream, SWIGTYPE_p_wchar_t __format) {
    return arblibJNI.__isoc99_fwscanf(_IO_FILE.getCPtr(__stream), __stream, SWIGTYPE_p_wchar_t.getCPtr(__format));
  }

  public static int __isoc99_wscanf(SWIGTYPE_p_wchar_t __format) {
    return arblibJNI.__isoc99_wscanf(SWIGTYPE_p_wchar_t.getCPtr(__format));
  }

  public static int __isoc99_swscanf(SWIGTYPE_p_wchar_t __s, SWIGTYPE_p_wchar_t __format) {
    return arblibJNI.__isoc99_swscanf(SWIGTYPE_p_wchar_t.getCPtr(__s), SWIGTYPE_p_wchar_t.getCPtr(__format));
  }

  public static int vfwscanf(_IO_FILE __s, SWIGTYPE_p_wchar_t __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vfwscanf(_IO_FILE.getCPtr(__s), __s, SWIGTYPE_p_wchar_t.getCPtr(__format), SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int vwscanf(SWIGTYPE_p_wchar_t __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vwscanf(SWIGTYPE_p_wchar_t.getCPtr(__format), SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int vswscanf(SWIGTYPE_p_wchar_t __s, SWIGTYPE_p_wchar_t __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vswscanf(SWIGTYPE_p_wchar_t.getCPtr(__s), SWIGTYPE_p_wchar_t.getCPtr(__format), SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int __isoc99_vfwscanf(_IO_FILE __s, SWIGTYPE_p_wchar_t __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.__isoc99_vfwscanf(_IO_FILE.getCPtr(__s), __s, SWIGTYPE_p_wchar_t.getCPtr(__format), SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int __isoc99_vwscanf(SWIGTYPE_p_wchar_t __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.__isoc99_vwscanf(SWIGTYPE_p_wchar_t.getCPtr(__format), SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int __isoc99_vswscanf(SWIGTYPE_p_wchar_t __s, SWIGTYPE_p_wchar_t __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.__isoc99_vswscanf(SWIGTYPE_p_wchar_t.getCPtr(__s), SWIGTYPE_p_wchar_t.getCPtr(__format), SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static long fgetwc(_IO_FILE __stream) {
    return arblibJNI.fgetwc(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static long getwc(_IO_FILE __stream) {
    return arblibJNI.getwc(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static long getwchar() {
    return arblibJNI.getwchar();
  }

  public static long fputwc(SWIGTYPE_p_wchar_t __wc, _IO_FILE __stream) {
    return arblibJNI.fputwc(SWIGTYPE_p_wchar_t.getCPtr(__wc), _IO_FILE.getCPtr(__stream), __stream);
  }

  public static long putwc(SWIGTYPE_p_wchar_t __wc, _IO_FILE __stream) {
    return arblibJNI.putwc(SWIGTYPE_p_wchar_t.getCPtr(__wc), _IO_FILE.getCPtr(__stream), __stream);
  }

  public static long putwchar(SWIGTYPE_p_wchar_t __wc) {
    return arblibJNI.putwchar(SWIGTYPE_p_wchar_t.getCPtr(__wc));
  }

  public static SWIGTYPE_p_wchar_t fgetws(SWIGTYPE_p_wchar_t __ws, int __n, _IO_FILE __stream) {
    long cPtr = arblibJNI.fgetws(SWIGTYPE_p_wchar_t.getCPtr(__ws), __n, _IO_FILE.getCPtr(__stream), __stream);
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static int fputws(SWIGTYPE_p_wchar_t __ws, _IO_FILE __stream) {
    return arblibJNI.fputws(SWIGTYPE_p_wchar_t.getCPtr(__ws), _IO_FILE.getCPtr(__stream), __stream);
  }

  public static long ungetwc(long __wc, _IO_FILE __stream) {
    return arblibJNI.ungetwc(__wc, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static long wcsftime(SWIGTYPE_p_wchar_t __s, long __maxsize, SWIGTYPE_p_wchar_t __format, SWIGTYPE_p_tm __tp) {
    return arblibJNI.wcsftime(SWIGTYPE_p_wchar_t.getCPtr(__s), __maxsize, SWIGTYPE_p_wchar_t.getCPtr(__format), SWIGTYPE_p_tm.getCPtr(__tp));
  }

  public static SWIGTYPE_p_wchar_t wcschr(SWIGTYPE_p_wchar_t __p, SWIGTYPE_p_wchar_t __c) {
    long cPtr = arblibJNI.wcschr__SWIG_1(SWIGTYPE_p_wchar_t.getCPtr(__p), SWIGTYPE_p_wchar_t.getCPtr(__c));
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static SWIGTYPE_p_wchar_t wcspbrk(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2) {
    long cPtr = arblibJNI.wcspbrk__SWIG_1(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2));
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  

  public static SWIGTYPE_p_wchar_t wcsstr(SWIGTYPE_p_wchar_t __s1, SWIGTYPE_p_wchar_t __s2) {
    long cPtr = arblibJNI.wcsstr__SWIG_1(SWIGTYPE_p_wchar_t.getCPtr(__s1), SWIGTYPE_p_wchar_t.getCPtr(__s2));
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static SWIGTYPE_p_wchar_t wmemchr(SWIGTYPE_p_wchar_t __p, SWIGTYPE_p_wchar_t __c, long __n) {
    long cPtr = arblibJNI.wmemchr__SWIG_1(SWIGTYPE_p_wchar_t.getCPtr(__p), SWIGTYPE_p_wchar_t.getCPtr(__c), __n);
    return (cPtr == 0) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
  }

  public static void setStdin(_IO_FILE value) {
    arblibJNI.stdin_set(_IO_FILE.getCPtr(value), value);
  }

  public static _IO_FILE getStdin() {
    long cPtr = arblibJNI.stdin_get();
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static void setStdout(_IO_FILE value) {
    arblibJNI.stdout_set(_IO_FILE.getCPtr(value), value);
  }

  public static _IO_FILE getStdout() {
    long cPtr = arblibJNI.stdout_get();
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static void setStderr(_IO_FILE value) {
    arblibJNI.stderr_set(_IO_FILE.getCPtr(value), value);
  }

  public static _IO_FILE getStderr() {
    long cPtr = arblibJNI.stderr_get();
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static int remove(String __filename) {
    return arblibJNI.remove(__filename);
  }

  public static int rename(String __old, String __new) {
    return arblibJNI.rename(__old, __new);
  }

  public static int renameat(int __oldfd, String __old, int __newfd, String __new) {
    return arblibJNI.renameat(__oldfd, __old, __newfd, __new);
  }

  public static _IO_FILE tmpfile() {
    long cPtr = arblibJNI.tmpfile();
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static String tmpnam(String __s) {
    return arblibJNI.tmpnam(__s);
  }

  public static String tmpnam_r(String __s) {
    return arblibJNI.tmpnam_r(__s);
  }

  public static String tempnam(String __dir, String __pfx) {
    return arblibJNI.tempnam(__dir, __pfx);
  }

  public static int fclose(_IO_FILE __stream) {
    return arblibJNI.fclose(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int fflush(_IO_FILE __stream) {
    return arblibJNI.fflush(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int fflush_unlocked(_IO_FILE __stream) {
    return arblibJNI.fflush_unlocked(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static _IO_FILE fopen(String __filename, String __modes) {
    long cPtr = arblibJNI.fopen(__filename, __modes);
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static _IO_FILE freopen(String __filename, String __modes, _IO_FILE __stream) {
    long cPtr = arblibJNI.freopen(__filename, __modes, _IO_FILE.getCPtr(__stream), __stream);
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static _IO_FILE fdopen(int __fd, String __modes) {
    long cPtr = arblibJNI.fdopen(__fd, __modes);
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static _IO_FILE fmemopen(SWIGTYPE_p_void __s, long __len, String __modes) {
    long cPtr = arblibJNI.fmemopen(SWIGTYPE_p_void.getCPtr(__s), __len, __modes);
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static _IO_FILE open_memstream(SWIGTYPE_p_p_char __bufloc, SWIGTYPE_p_size_t __sizeloc) {
    long cPtr = arblibJNI.open_memstream(SWIGTYPE_p_p_char.getCPtr(__bufloc), SWIGTYPE_p_size_t.getCPtr(__sizeloc));
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static void setbuf(_IO_FILE __stream, String __buf) {
    arblibJNI.setbuf(_IO_FILE.getCPtr(__stream), __stream, __buf);
  }

  public static int setvbuf(_IO_FILE __stream, String __buf, int __modes, long __n) {
    return arblibJNI.setvbuf(_IO_FILE.getCPtr(__stream), __stream, __buf, __modes, __n);
  }

  public static void setbuffer(_IO_FILE __stream, String __buf, long __size) {
    arblibJNI.setbuffer(_IO_FILE.getCPtr(__stream), __stream, __buf, __size);
  }

  public static void setlinebuf(_IO_FILE __stream) {
    arblibJNI.setlinebuf(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int fprintf(_IO_FILE __stream, String __format) {
    return arblibJNI.fprintf(_IO_FILE.getCPtr(__stream), __stream, __format);
  }

  public static int printf(String __format) {
    return arblibJNI.printf(__format);
  }

  public static int sprintf(String __s, String __format) {
    return arblibJNI.sprintf(__s, __format);
  }

  public static int vfprintf(_IO_FILE __s, String __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vfprintf(_IO_FILE.getCPtr(__s), __s, __format, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int vprintf(String __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vprintf(__format, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int vsprintf(String __s, String __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vsprintf(__s, __format, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int snprintf(String __s, long __maxlen, String __format) {
    return arblibJNI.snprintf(__s, __maxlen, __format);
  }

  public static int vsnprintf(String __s, long __maxlen, String __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vsnprintf(__s, __maxlen, __format, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int vdprintf(int __fd, String __fmt, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vdprintf(__fd, __fmt, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int dprintf(int __fd, String __fmt) {
    return arblibJNI.dprintf(__fd, __fmt);
  }

  public static int fscanf(_IO_FILE __stream, String __format) {
    return arblibJNI.fscanf(_IO_FILE.getCPtr(__stream), __stream, __format);
  }

  public static int scanf(String __format) {
    return arblibJNI.scanf(__format);
  }

  public static int sscanf(String __s, String __format) {
    return arblibJNI.sscanf(__s, __format);
  }

  public static int __isoc99_fscanf(_IO_FILE __stream, String __format) {
    return arblibJNI.__isoc99_fscanf(_IO_FILE.getCPtr(__stream), __stream, __format);
  }

  public static int __isoc99_scanf(String __format) {
    return arblibJNI.__isoc99_scanf(__format);
  }

  public static int __isoc99_sscanf(String __s, String __format) {
    return arblibJNI.__isoc99_sscanf(__s, __format);
  }

  public static int vfscanf(_IO_FILE __s, String __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vfscanf(_IO_FILE.getCPtr(__s), __s, __format, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int vscanf(String __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vscanf(__format, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int vsscanf(String __s, String __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.vsscanf(__s, __format, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int __isoc99_vfscanf(_IO_FILE __s, String __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.__isoc99_vfscanf(_IO_FILE.getCPtr(__s), __s, __format, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int __isoc99_vscanf(String __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.__isoc99_vscanf(__format, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int __isoc99_vsscanf(String __s, String __format, SWIGTYPE_p___builtin_va_list __arg) {
    return arblibJNI.__isoc99_vsscanf(__s, __format, SWIGTYPE_p___builtin_va_list.getCPtr(__arg));
  }

  public static int fgetc(_IO_FILE __stream) {
    return arblibJNI.fgetc(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int getc(_IO_FILE __stream) {
    return arblibJNI.getc(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int getchar() {
    return arblibJNI.getchar();
  }

  public static int getc_unlocked(_IO_FILE __stream) {
    return arblibJNI.getc_unlocked(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int getchar_unlocked() {
    return arblibJNI.getchar_unlocked();
  }

  public static int fgetc_unlocked(_IO_FILE __stream) {
    return arblibJNI.fgetc_unlocked(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int fputc(int __c, _IO_FILE __stream) {
    return arblibJNI.fputc(__c, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static int putc(int __c, _IO_FILE __stream) {
    return arblibJNI.putc(__c, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static int putchar(int __c) {
    return arblibJNI.putchar(__c);
  }

  public static int fputc_unlocked(int __c, _IO_FILE __stream) {
    return arblibJNI.fputc_unlocked(__c, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static int putc_unlocked(int __c, _IO_FILE __stream) {
    return arblibJNI.putc_unlocked(__c, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static int putchar_unlocked(int __c) {
    return arblibJNI.putchar_unlocked(__c);
  }

  public static int getw(_IO_FILE __stream) {
    return arblibJNI.getw(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int putw(int __w, _IO_FILE __stream) {
    return arblibJNI.putw(__w, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static String fgets(String __s, int __n, _IO_FILE __stream) {
    return arblibJNI.fgets(__s, __n, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static String gets(String __s) {
    return arblibJNI.gets(__s);
  }

  public static int __getdelim(SWIGTYPE_p_p_char __lineptr, SWIGTYPE_p_size_t __n, int __delimiter, _IO_FILE __stream) {
    return arblibJNI.__getdelim(SWIGTYPE_p_p_char.getCPtr(__lineptr), SWIGTYPE_p_size_t.getCPtr(__n), __delimiter, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static int getdelim(SWIGTYPE_p_p_char __lineptr, SWIGTYPE_p_size_t __n, int __delimiter, _IO_FILE __stream) {
    return arblibJNI.getdelim(SWIGTYPE_p_p_char.getCPtr(__lineptr), SWIGTYPE_p_size_t.getCPtr(__n), __delimiter, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static int getline(SWIGTYPE_p_p_char __lineptr, SWIGTYPE_p_size_t __n, _IO_FILE __stream) {
    return arblibJNI.getline(SWIGTYPE_p_p_char.getCPtr(__lineptr), SWIGTYPE_p_size_t.getCPtr(__n), _IO_FILE.getCPtr(__stream), __stream);
  }

  public static int fputs(String __s, _IO_FILE __stream) {
    return arblibJNI.fputs(__s, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static int puts(String __s) {
    return arblibJNI.puts(__s);
  }

  public static int ungetc(int __c, _IO_FILE __stream) {
    return arblibJNI.ungetc(__c, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static long fread(SWIGTYPE_p_void __ptr, long __size, long __n, _IO_FILE __stream) {
    return arblibJNI.fread(SWIGTYPE_p_void.getCPtr(__ptr), __size, __n, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static long fwrite(SWIGTYPE_p_void __ptr, long __size, long __n, _IO_FILE __s) {
    return arblibJNI.fwrite(SWIGTYPE_p_void.getCPtr(__ptr), __size, __n, _IO_FILE.getCPtr(__s), __s);
  }

  public static long fread_unlocked(SWIGTYPE_p_void __ptr, long __size, long __n, _IO_FILE __stream) {
    return arblibJNI.fread_unlocked(SWIGTYPE_p_void.getCPtr(__ptr), __size, __n, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static long fwrite_unlocked(SWIGTYPE_p_void __ptr, long __size, long __n, _IO_FILE __stream) {
    return arblibJNI.fwrite_unlocked(SWIGTYPE_p_void.getCPtr(__ptr), __size, __n, _IO_FILE.getCPtr(__stream), __stream);
  }

  public static int fseek(_IO_FILE __stream, int __off, int __whence) {
    return arblibJNI.fseek(_IO_FILE.getCPtr(__stream), __stream, __off, __whence);
  }

  public static int ftell(_IO_FILE __stream) {
    return arblibJNI.ftell(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static void rewind(_IO_FILE __stream) {
    arblibJNI.rewind(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int fseeko(_IO_FILE __stream, int __off, int __whence) {
    return arblibJNI.fseeko(_IO_FILE.getCPtr(__stream), __stream, __off, __whence);
  }

  public static int ftello(_IO_FILE __stream) {
    return arblibJNI.ftello(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int fgetpos(_IO_FILE __stream, __fpos_t __pos) {
    return arblibJNI.fgetpos(_IO_FILE.getCPtr(__stream), __stream, __fpos_t.getCPtr(__pos), __pos);
  }

  public static int fsetpos(_IO_FILE __stream, __fpos_t __pos) {
    return arblibJNI.fsetpos(_IO_FILE.getCPtr(__stream), __stream, __fpos_t.getCPtr(__pos), __pos);
  }

  public static void clearerr(_IO_FILE __stream) {
    arblibJNI.clearerr(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int feof(_IO_FILE __stream) {
    return arblibJNI.feof(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int ferror(_IO_FILE __stream) {
    return arblibJNI.ferror(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static void clearerr_unlocked(_IO_FILE __stream) {
    arblibJNI.clearerr_unlocked(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int feof_unlocked(_IO_FILE __stream) {
    return arblibJNI.feof_unlocked(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int ferror_unlocked(_IO_FILE __stream) {
    return arblibJNI.ferror_unlocked(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static void perror(String __s) {
    arblibJNI.perror(__s);
  }

  public static int fileno(_IO_FILE __stream) {
    return arblibJNI.fileno(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int fileno_unlocked(_IO_FILE __stream) {
    return arblibJNI.fileno_unlocked(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static _IO_FILE popen(String __command, String __modes) {
    long cPtr = arblibJNI.popen(__command, __modes);
    return (cPtr == 0) ? null : new _IO_FILE(cPtr, false);
  }

  public static int pclose(_IO_FILE __stream) {
    return arblibJNI.pclose(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static String ctermid(String __s) {
    return arblibJNI.ctermid(__s);
  }

  public static void flockfile(_IO_FILE __stream) {
    arblibJNI.flockfile(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int ftrylockfile(_IO_FILE __stream) {
    return arblibJNI.ftrylockfile(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static void funlockfile(_IO_FILE __stream) {
    arblibJNI.funlockfile(_IO_FILE.getCPtr(__stream), __stream);
  }

  public static int __uflow(_IO_FILE arg0) {
    return arblibJNI.__uflow(_IO_FILE.getCPtr(arg0), arg0);
  }

  public static int __overflow(_IO_FILE arg0, int arg1) {
    return arblibJNI.__overflow(_IO_FILE.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmp_set_memory_functions(SWIGTYPE_p_f_size_t__p_void arg0, SWIGTYPE_p_f_p_void_size_t_size_t__p_void arg1, SWIGTYPE_p_f_p_void_size_t__void arg2) {
    arblibJNI.__gmp_set_memory_functions(SWIGTYPE_p_f_size_t__p_void.getCPtr(arg0), SWIGTYPE_p_f_p_void_size_t_size_t__p_void.getCPtr(arg1), SWIGTYPE_p_f_p_void_size_t__void.getCPtr(arg2));
  }

  public static void __gmp_get_memory_functions(SWIGTYPE_p_p_f_size_t__p_void arg0, SWIGTYPE_p_p_f_p_void_size_t_size_t__p_void arg1, SWIGTYPE_p_p_f_p_void_size_t__void arg2) {
    arblibJNI.__gmp_get_memory_functions(SWIGTYPE_p_p_f_size_t__p_void.getCPtr(arg0), SWIGTYPE_p_p_f_p_void_size_t_size_t__p_void.getCPtr(arg1), SWIGTYPE_p_p_f_p_void_size_t__void.getCPtr(arg2));
  }

  public static int get__gmp_bits_per_limb() {
    return arblibJNI.__gmp_bits_per_limb_get();
  }

  public static void set__gmp_errno(int value) {
    arblibJNI.__gmp_errno_set(value);
  }

  public static int get__gmp_errno() {
    return arblibJNI.__gmp_errno_get();
  }

  public static String get__gmp_version() {
    return arblibJNI.__gmp_version_get();
  }

  public static void __gmp_randinit(__gmp_randstate_struct arg0, gmp_randalg_t arg1) {
    arblibJNI.__gmp_randinit(__gmp_randstate_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static void __gmp_randinit_default(__gmp_randstate_struct arg0) {
    arblibJNI.__gmp_randinit_default(__gmp_randstate_struct.getCPtr(arg0), arg0);
  }

  public static void __gmp_randinit_lc_2exp(__gmp_randstate_struct arg0, __mpz_struct arg1, long arg2, long arg3) {
    arblibJNI.__gmp_randinit_lc_2exp(__gmp_randstate_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2, arg3);
  }

  public static int __gmp_randinit_lc_2exp_size(__gmp_randstate_struct arg0, long arg1) {
    return arblibJNI.__gmp_randinit_lc_2exp_size(__gmp_randstate_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmp_randinit_mt(__gmp_randstate_struct arg0) {
    arblibJNI.__gmp_randinit_mt(__gmp_randstate_struct.getCPtr(arg0), arg0);
  }

  public static void __gmp_randinit_set(__gmp_randstate_struct arg0, __gmp_randstate_struct arg1) {
    arblibJNI.__gmp_randinit_set(__gmp_randstate_struct.getCPtr(arg0), arg0, __gmp_randstate_struct.getCPtr(arg1), arg1);
  }

  public static void __gmp_randseed(__gmp_randstate_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmp_randseed(__gmp_randstate_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmp_randseed_ui(__gmp_randstate_struct arg0, long arg1) {
    arblibJNI.__gmp_randseed_ui(__gmp_randstate_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmp_randclear(__gmp_randstate_struct arg0) {
    arblibJNI.__gmp_randclear(__gmp_randstate_struct.getCPtr(arg0), arg0);
  }

  public static long __gmp_urandomb_ui(__gmp_randstate_struct arg0, long arg1) {
    return arblibJNI.__gmp_urandomb_ui(__gmp_randstate_struct.getCPtr(arg0), arg0, arg1);
  }

  public static long __gmp_urandomm_ui(__gmp_randstate_struct arg0, long arg1) {
    return arblibJNI.__gmp_urandomm_ui(__gmp_randstate_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmp_asprintf(SWIGTYPE_p_p_char arg0, String arg1) {
    return arblibJNI.__gmp_asprintf(SWIGTYPE_p_p_char.getCPtr(arg0), arg1);
  }

  public static int __gmp_fprintf(_IO_FILE arg0, String arg1) {
    return arblibJNI.__gmp_fprintf(_IO_FILE.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmp_printf(String arg0) {
    return arblibJNI.__gmp_printf(arg0);
  }

  public static int __gmp_snprintf(String arg0, long arg1, String arg2) {
    return arblibJNI.__gmp_snprintf(arg0, arg1, arg2);
  }

  public static int __gmp_sprintf(String arg0, String arg1) {
    return arblibJNI.__gmp_sprintf(arg0, arg1);
  }

  public static int __gmp_fscanf(_IO_FILE arg0, String arg1) {
    return arblibJNI.__gmp_fscanf(_IO_FILE.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmp_scanf(String arg0) {
    return arblibJNI.__gmp_scanf(arg0);
  }

  public static int __gmp_sscanf(String arg0, String arg1) {
    return arblibJNI.__gmp_sscanf(arg0, arg1);
  }

  public static SWIGTYPE_p_void __gmpz_realloc(__mpz_struct arg0, int arg1) {
    long cPtr = arblibJNI.__gmpz_realloc(__mpz_struct.getCPtr(arg0), arg0, arg1);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void __gmpz_add(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_add(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_add_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_add_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_addmul(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_addmul(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_addmul_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_addmul_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_and(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_and(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_array_init(__mpz_struct arg0, int arg1, int arg2) {
    arblibJNI.__gmpz_array_init(__mpz_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpz_bin_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_bin_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_bin_uiui(__mpz_struct arg0, long arg1, long arg2) {
    arblibJNI.__gmpz_bin_uiui(__mpz_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpz_cdiv_q(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_cdiv_q(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_cdiv_q_2exp(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_cdiv_q_2exp(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpz_cdiv_q_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    return arblibJNI.__gmpz_cdiv_q_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_cdiv_qr(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2, __mpz_struct arg3) {
    arblibJNI.__gmpz_cdiv_qr(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, __mpz_struct.getCPtr(arg3), arg3);
  }

  public static long __gmpz_cdiv_qr_ui(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2, long arg3) {
    return arblibJNI.__gmpz_cdiv_qr_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, arg3);
  }

  public static void __gmpz_cdiv_r(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_cdiv_r(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_cdiv_r_2exp(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_cdiv_r_2exp(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpz_cdiv_r_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    return arblibJNI.__gmpz_cdiv_r_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpz_cdiv_ui(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_cdiv_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_clear(__mpz_struct arg0) {
    arblibJNI.__gmpz_clear(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpz_clears(__mpz_struct arg0) {
    arblibJNI.__gmpz_clears(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpz_clrbit(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_clrbit(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_cmp(__mpz_struct arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpz_cmp(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static int __gmpz_cmp_d(__mpz_struct arg0, double arg1) {
    return arblibJNI.__gmpz_cmp_d(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_cmp_si(__mpz_struct arg0, int arg1) {
    return arblibJNI.__gmpz_cmp_si(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_cmp_ui(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_cmp_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_cmpabs(__mpz_struct arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpz_cmpabs(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static int __gmpz_cmpabs_d(__mpz_struct arg0, double arg1) {
    return arblibJNI.__gmpz_cmpabs_d(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_cmpabs_ui(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_cmpabs_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_com(__mpz_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmpz_com(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpz_combit(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_combit(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_congruent_p(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    return arblibJNI.__gmpz_congruent_p(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static int __gmpz_congruent_2exp_p(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    return arblibJNI.__gmpz_congruent_2exp_p(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static int __gmpz_congruent_ui_p(__mpz_struct arg0, long arg1, long arg2) {
    return arblibJNI.__gmpz_congruent_ui_p(__mpz_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpz_divexact(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_divexact(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_divexact_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_divexact_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static int __gmpz_divisible_p(__mpz_struct arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpz_divisible_p(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static int __gmpz_divisible_ui_p(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_divisible_ui_p(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_divisible_2exp_p(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_divisible_2exp_p(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_dump(__mpz_struct arg0) {
    arblibJNI.__gmpz_dump(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static SWIGTYPE_p_void __gmpz_export(SWIGTYPE_p_void arg0, SWIGTYPE_p_size_t arg1, int arg2, long arg3, int arg4, long arg5, __mpz_struct arg6) {
    long cPtr = arblibJNI.__gmpz_export(SWIGTYPE_p_void.getCPtr(arg0), SWIGTYPE_p_size_t.getCPtr(arg1), arg2, arg3, arg4, arg5, __mpz_struct.getCPtr(arg6), arg6);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void __gmpz_fac_ui(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_fac_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_2fac_ui(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_2fac_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_mfac_uiui(__mpz_struct arg0, long arg1, long arg2) {
    arblibJNI.__gmpz_mfac_uiui(__mpz_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpz_primorial_ui(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_primorial_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_fdiv_q(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_fdiv_q(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_fdiv_q_2exp(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_fdiv_q_2exp(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpz_fdiv_q_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    return arblibJNI.__gmpz_fdiv_q_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_fdiv_qr(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2, __mpz_struct arg3) {
    arblibJNI.__gmpz_fdiv_qr(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, __mpz_struct.getCPtr(arg3), arg3);
  }

  public static long __gmpz_fdiv_qr_ui(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2, long arg3) {
    return arblibJNI.__gmpz_fdiv_qr_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, arg3);
  }

  public static void __gmpz_fdiv_r(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_fdiv_r(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_fdiv_r_2exp(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_fdiv_r_2exp(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpz_fdiv_r_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    return arblibJNI.__gmpz_fdiv_r_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpz_fdiv_ui(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_fdiv_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_fib_ui(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_fib_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_fib2_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_fib2_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static int __gmpz_fits_sint_p(__mpz_struct arg0) {
    return arblibJNI.__gmpz_fits_sint_p(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpz_fits_slong_p(__mpz_struct arg0) {
    return arblibJNI.__gmpz_fits_slong_p(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpz_fits_sshort_p(__mpz_struct arg0) {
    return arblibJNI.__gmpz_fits_sshort_p(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpz_gcd(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_gcd(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static long __gmpz_gcd_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    return arblibJNI.__gmpz_gcd_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_gcdext(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2, __mpz_struct arg3, __mpz_struct arg4) {
    arblibJNI.__gmpz_gcdext(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, __mpz_struct.getCPtr(arg3), arg3, __mpz_struct.getCPtr(arg4), arg4);
  }

  public static double __gmpz_get_d(__mpz_struct arg0) {
    return arblibJNI.__gmpz_get_d(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static double __gmpz_get_d_2exp(SWIGTYPE_p_long arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpz_get_d_2exp(SWIGTYPE_p_long.getCPtr(arg0), __mpz_struct.getCPtr(arg1), arg1);
  }

  public static int __gmpz_get_si(__mpz_struct arg0) {
    return arblibJNI.__gmpz_get_si(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static String __gmpz_get_str(String arg0, int arg1, __mpz_struct arg2) {
    return arblibJNI.__gmpz_get_str(arg0, arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static long __gmpz_hamdist(__mpz_struct arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpz_hamdist(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpz_import(__mpz_struct arg0, long arg1, int arg2, long arg3, int arg4, long arg5, SWIGTYPE_p_void arg6) {
    arblibJNI.__gmpz_import(__mpz_struct.getCPtr(arg0), arg0, arg1, arg2, arg3, arg4, arg5, SWIGTYPE_p_void.getCPtr(arg6));
  }

  public static void __gmpz_init(__mpz_struct arg0) {
    arblibJNI.__gmpz_init(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpz_init2(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_init2(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_inits(__mpz_struct arg0) {
    arblibJNI.__gmpz_inits(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpz_init_set(__mpz_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmpz_init_set(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpz_init_set_d(__mpz_struct arg0, double arg1) {
    arblibJNI.__gmpz_init_set_d(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_init_set_si(__mpz_struct arg0, int arg1) {
    arblibJNI.__gmpz_init_set_si(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_init_set_str(__mpz_struct arg0, String arg1, int arg2) {
    return arblibJNI.__gmpz_init_set_str(__mpz_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpz_init_set_ui(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_init_set_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static long __gmpz_inp_raw(__mpz_struct arg0, _IO_FILE arg1) {
    return arblibJNI.__gmpz_inp_raw(__mpz_struct.getCPtr(arg0), arg0, _IO_FILE.getCPtr(arg1), arg1);
  }

  public static long __gmpz_inp_str(__mpz_struct arg0, _IO_FILE arg1, int arg2) {
    return arblibJNI.__gmpz_inp_str(__mpz_struct.getCPtr(arg0), arg0, _IO_FILE.getCPtr(arg1), arg1, arg2);
  }

  public static int __gmpz_invert(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    return arblibJNI.__gmpz_invert(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_ior(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_ior(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static int __gmpz_jacobi(__mpz_struct arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpz_jacobi(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static int __gmpz_kronecker_si(__mpz_struct arg0, int arg1) {
    return arblibJNI.__gmpz_kronecker_si(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_kronecker_ui(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_kronecker_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_si_kronecker(int arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpz_si_kronecker(arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static int __gmpz_ui_kronecker(long arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpz_ui_kronecker(arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpz_lcm(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_lcm(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_lcm_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_lcm_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_lucnum_ui(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_lucnum_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_lucnum2_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_lucnum2_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static int __gmpz_millerrabin(__mpz_struct arg0, int arg1) {
    return arblibJNI.__gmpz_millerrabin(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_mod(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_mod(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_mul(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_mul(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_mul_2exp(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_mul_2exp(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_mul_si(__mpz_struct arg0, __mpz_struct arg1, int arg2) {
    arblibJNI.__gmpz_mul_si(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_mul_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_mul_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_nextprime(__mpz_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmpz_nextprime(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static long __gmpz_out_raw(_IO_FILE arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpz_out_raw(_IO_FILE.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static long __gmpz_out_str(_IO_FILE arg0, int arg1, __mpz_struct arg2) {
    return arblibJNI.__gmpz_out_str(_IO_FILE.getCPtr(arg0), arg0, arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static int __gmpz_perfect_power_p(__mpz_struct arg0) {
    return arblibJNI.__gmpz_perfect_power_p(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpz_pow_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_pow_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_powm(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2, __mpz_struct arg3) {
    arblibJNI.__gmpz_powm(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, __mpz_struct.getCPtr(arg3), arg3);
  }

  public static void __gmpz_powm_sec(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2, __mpz_struct arg3) {
    arblibJNI.__gmpz_powm_sec(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, __mpz_struct.getCPtr(arg3), arg3);
  }

  public static void __gmpz_powm_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2, __mpz_struct arg3) {
    arblibJNI.__gmpz_powm_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2, __mpz_struct.getCPtr(arg3), arg3);
  }

  public static int __gmpz_probab_prime_p(__mpz_struct arg0, int arg1) {
    return arblibJNI.__gmpz_probab_prime_p(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_random(__mpz_struct arg0, int arg1) {
    arblibJNI.__gmpz_random(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_random2(__mpz_struct arg0, int arg1) {
    arblibJNI.__gmpz_random2(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_realloc2(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_realloc2(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static long __gmpz_remove(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    return arblibJNI.__gmpz_remove(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static int __gmpz_root(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    return arblibJNI.__gmpz_root(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_rootrem(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2, long arg3) {
    arblibJNI.__gmpz_rootrem(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, arg3);
  }

  public static void __gmpz_rrandomb(__mpz_struct arg0, __gmp_randstate_struct arg1, long arg2) {
    arblibJNI.__gmpz_rrandomb(__mpz_struct.getCPtr(arg0), arg0, __gmp_randstate_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpz_scan0(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_scan0(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static long __gmpz_scan1(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_scan1(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_set(__mpz_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmpz_set(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpz_set_d(__mpz_struct arg0, double arg1) {
    arblibJNI.__gmpz_set_d(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_set_f(__mpz_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpz_set_f(__mpz_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpz_set_si(__mpz_struct arg0, int arg1) {
    arblibJNI.__gmpz_set_si(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpz_set_str(__mpz_struct arg0, String arg1, int arg2) {
    return arblibJNI.__gmpz_set_str(__mpz_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpz_set_ui(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_set_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_setbit(__mpz_struct arg0, long arg1) {
    arblibJNI.__gmpz_setbit(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static long __gmpz_sizeinbase(__mpz_struct arg0, int arg1) {
    return arblibJNI.__gmpz_sizeinbase(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_sqrt(__mpz_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmpz_sqrt(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpz_sqrtrem(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_sqrtrem(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_sub(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_sub(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_sub_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_sub_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_ui_sub(__mpz_struct arg0, long arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_ui_sub(__mpz_struct.getCPtr(arg0), arg0, arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_submul(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_submul(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_submul_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_submul_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_swap(__mpz_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmpz_swap(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static long __gmpz_tdiv_ui(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_tdiv_ui(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_tdiv_q(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_tdiv_q(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_tdiv_q_2exp(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_tdiv_q_2exp(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpz_tdiv_q_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    return arblibJNI.__gmpz_tdiv_q_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_tdiv_qr(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2, __mpz_struct arg3) {
    arblibJNI.__gmpz_tdiv_qr(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, __mpz_struct.getCPtr(arg3), arg3);
  }

  public static long __gmpz_tdiv_qr_ui(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2, long arg3) {
    return arblibJNI.__gmpz_tdiv_qr_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, arg3);
  }

  public static void __gmpz_tdiv_r(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_tdiv_r(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_tdiv_r_2exp(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    arblibJNI.__gmpz_tdiv_r_2exp(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpz_tdiv_r_ui(__mpz_struct arg0, __mpz_struct arg1, long arg2) {
    return arblibJNI.__gmpz_tdiv_r_ui(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2);
  }

  public static int __gmpz_tstbit(__mpz_struct arg0, long arg1) {
    return arblibJNI.__gmpz_tstbit(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpz_ui_pow_ui(__mpz_struct arg0, long arg1, long arg2) {
    arblibJNI.__gmpz_ui_pow_ui(__mpz_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpz_urandomb(__mpz_struct arg0, __gmp_randstate_struct arg1, long arg2) {
    arblibJNI.__gmpz_urandomb(__mpz_struct.getCPtr(arg0), arg0, __gmp_randstate_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpz_urandomm(__mpz_struct arg0, __gmp_randstate_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_urandomm(__mpz_struct.getCPtr(arg0), arg0, __gmp_randstate_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpz_xor(__mpz_struct arg0, __mpz_struct arg1, __mpz_struct arg2) {
    arblibJNI.__gmpz_xor(__mpz_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2);
  }

  public static SWIGTYPE_p_unsigned_long __gmpz_limbs_read(__mpz_struct arg0) {
    long cPtr = arblibJNI.__gmpz_limbs_read(__mpz_struct.getCPtr(arg0), arg0);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_long __gmpz_limbs_write(__mpz_struct arg0, int arg1) {
    long cPtr = arblibJNI.__gmpz_limbs_write(__mpz_struct.getCPtr(arg0), arg0, arg1);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_long __gmpz_limbs_modify(__mpz_struct arg0, int arg1) {
    long cPtr = arblibJNI.__gmpz_limbs_modify(__mpz_struct.getCPtr(arg0), arg0, arg1);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static void __gmpz_limbs_finish(__mpz_struct arg0, int arg1) {
    arblibJNI.__gmpz_limbs_finish(__mpz_struct.getCPtr(arg0), arg0, arg1);
  }

  public static __mpz_struct __gmpz_roinit_n(__mpz_struct arg0, SWIGTYPE_p_unsigned_long arg1, int arg2) {
    long cPtr = arblibJNI.__gmpz_roinit_n(__mpz_struct.getCPtr(arg0), arg0, SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2);
    return (cPtr == 0) ? null : new __mpz_struct(cPtr, false);
  }

  public static void __gmpq_add(__mpq_struct arg0, __mpq_struct arg1, __mpq_struct arg2) {
    arblibJNI.__gmpq_add(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1, __mpq_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpq_canonicalize(__mpq_struct arg0) {
    arblibJNI.__gmpq_canonicalize(__mpq_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpq_clear(__mpq_struct arg0) {
    arblibJNI.__gmpq_clear(__mpq_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpq_clears(__mpq_struct arg0) {
    arblibJNI.__gmpq_clears(__mpq_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpq_cmp(__mpq_struct arg0, __mpq_struct arg1) {
    return arblibJNI.__gmpq_cmp(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1);
  }

  public static int __gmpq_cmp_si(__mpq_struct arg0, int arg1, long arg2) {
    return arblibJNI.__gmpq_cmp_si(__mpq_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static int __gmpq_cmp_ui(__mpq_struct arg0, long arg1, long arg2) {
    return arblibJNI.__gmpq_cmp_ui(__mpq_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static int __gmpq_cmp_z(__mpq_struct arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpq_cmp_z(__mpq_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpq_div(__mpq_struct arg0, __mpq_struct arg1, __mpq_struct arg2) {
    arblibJNI.__gmpq_div(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1, __mpq_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpq_div_2exp(__mpq_struct arg0, __mpq_struct arg1, long arg2) {
    arblibJNI.__gmpq_div_2exp(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1, arg2);
  }

  public static int __gmpq_equal(__mpq_struct arg0, __mpq_struct arg1) {
    return arblibJNI.__gmpq_equal(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpq_get_num(__mpz_struct arg0, __mpq_struct arg1) {
    arblibJNI.__gmpq_get_num(__mpz_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpq_get_den(__mpz_struct arg0, __mpq_struct arg1) {
    arblibJNI.__gmpq_get_den(__mpz_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1);
  }

  public static double __gmpq_get_d(__mpq_struct arg0) {
    return arblibJNI.__gmpq_get_d(__mpq_struct.getCPtr(arg0), arg0);
  }

  public static String __gmpq_get_str(String arg0, int arg1, __mpq_struct arg2) {
    return arblibJNI.__gmpq_get_str(arg0, arg1, __mpq_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpq_init(__mpq_struct arg0) {
    arblibJNI.__gmpq_init(__mpq_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpq_inits(__mpq_struct arg0) {
    arblibJNI.__gmpq_inits(__mpq_struct.getCPtr(arg0), arg0);
  }

  public static long __gmpq_inp_str(__mpq_struct arg0, _IO_FILE arg1, int arg2) {
    return arblibJNI.__gmpq_inp_str(__mpq_struct.getCPtr(arg0), arg0, _IO_FILE.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpq_inv(__mpq_struct arg0, __mpq_struct arg1) {
    arblibJNI.__gmpq_inv(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpq_mul(__mpq_struct arg0, __mpq_struct arg1, __mpq_struct arg2) {
    arblibJNI.__gmpq_mul(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1, __mpq_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpq_mul_2exp(__mpq_struct arg0, __mpq_struct arg1, long arg2) {
    arblibJNI.__gmpq_mul_2exp(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpq_out_str(_IO_FILE arg0, int arg1, __mpq_struct arg2) {
    return arblibJNI.__gmpq_out_str(_IO_FILE.getCPtr(arg0), arg0, arg1, __mpq_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpq_set(__mpq_struct arg0, __mpq_struct arg1) {
    arblibJNI.__gmpq_set(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpq_set_d(__mpq_struct arg0, double arg1) {
    arblibJNI.__gmpq_set_d(__mpq_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpq_set_den(__mpq_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmpq_set_den(__mpq_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpq_set_f(__mpq_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpq_set_f(__mpq_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpq_set_num(__mpq_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmpq_set_num(__mpq_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpq_set_si(__mpq_struct arg0, int arg1, long arg2) {
    arblibJNI.__gmpq_set_si(__mpq_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static int __gmpq_set_str(__mpq_struct arg0, String arg1, int arg2) {
    return arblibJNI.__gmpq_set_str(__mpq_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpq_set_ui(__mpq_struct arg0, long arg1, long arg2) {
    arblibJNI.__gmpq_set_ui(__mpq_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpq_set_z(__mpq_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmpq_set_z(__mpq_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpq_sub(__mpq_struct arg0, __mpq_struct arg1, __mpq_struct arg2) {
    arblibJNI.__gmpq_sub(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1, __mpq_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpq_swap(__mpq_struct arg0, __mpq_struct arg1) {
    arblibJNI.__gmpq_swap(__mpq_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpf_abs(__mpf_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpf_abs(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpf_add(__mpf_struct arg0, __mpf_struct arg1, __mpf_struct arg2) {
    arblibJNI.__gmpf_add(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, __mpf_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpf_add_ui(__mpf_struct arg0, __mpf_struct arg1, long arg2) {
    arblibJNI.__gmpf_add_ui(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpf_ceil(__mpf_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpf_ceil(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpf_clear(__mpf_struct arg0) {
    arblibJNI.__gmpf_clear(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpf_clears(__mpf_struct arg0) {
    arblibJNI.__gmpf_clears(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpf_cmp(__mpf_struct arg0, __mpf_struct arg1) {
    return arblibJNI.__gmpf_cmp(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static int __gmpf_cmp_z(__mpf_struct arg0, __mpz_struct arg1) {
    return arblibJNI.__gmpf_cmp_z(__mpf_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static int __gmpf_cmp_d(__mpf_struct arg0, double arg1) {
    return arblibJNI.__gmpf_cmp_d(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpf_cmp_si(__mpf_struct arg0, int arg1) {
    return arblibJNI.__gmpf_cmp_si(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpf_cmp_ui(__mpf_struct arg0, long arg1) {
    return arblibJNI.__gmpf_cmp_ui(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpf_div(__mpf_struct arg0, __mpf_struct arg1, __mpf_struct arg2) {
    arblibJNI.__gmpf_div(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, __mpf_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpf_div_2exp(__mpf_struct arg0, __mpf_struct arg1, long arg2) {
    arblibJNI.__gmpf_div_2exp(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpf_div_ui(__mpf_struct arg0, __mpf_struct arg1, long arg2) {
    arblibJNI.__gmpf_div_ui(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpf_dump(__mpf_struct arg0) {
    arblibJNI.__gmpf_dump(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpf_eq(__mpf_struct arg0, __mpf_struct arg1, long arg2) {
    return arblibJNI.__gmpf_eq(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, arg2);
  }

  public static int __gmpf_fits_sint_p(__mpf_struct arg0) {
    return arblibJNI.__gmpf_fits_sint_p(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpf_fits_slong_p(__mpf_struct arg0) {
    return arblibJNI.__gmpf_fits_slong_p(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpf_fits_sshort_p(__mpf_struct arg0) {
    return arblibJNI.__gmpf_fits_sshort_p(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpf_fits_uint_p(__mpf_struct arg0) {
    return arblibJNI.__gmpf_fits_uint_p(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpf_fits_ulong_p(__mpf_struct arg0) {
    return arblibJNI.__gmpf_fits_ulong_p(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpf_fits_ushort_p(__mpf_struct arg0) {
    return arblibJNI.__gmpf_fits_ushort_p(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpf_floor(__mpf_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpf_floor(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static double __gmpf_get_d(__mpf_struct arg0) {
    return arblibJNI.__gmpf_get_d(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static double __gmpf_get_d_2exp(SWIGTYPE_p_long arg0, __mpf_struct arg1) {
    return arblibJNI.__gmpf_get_d_2exp(SWIGTYPE_p_long.getCPtr(arg0), __mpf_struct.getCPtr(arg1), arg1);
  }

  public static long __gmpf_get_default_prec() {
    return arblibJNI.__gmpf_get_default_prec();
  }

  public static long __gmpf_get_prec(__mpf_struct arg0) {
    return arblibJNI.__gmpf_get_prec(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static int __gmpf_get_si(__mpf_struct arg0) {
    return arblibJNI.__gmpf_get_si(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static String __gmpf_get_str(String arg0, SWIGTYPE_p_long arg1, int arg2, long arg3, __mpf_struct arg4) {
    return arblibJNI.__gmpf_get_str(arg0, SWIGTYPE_p_long.getCPtr(arg1), arg2, arg3, __mpf_struct.getCPtr(arg4), arg4);
  }

  public static long __gmpf_get_ui(__mpf_struct arg0) {
    return arblibJNI.__gmpf_get_ui(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpf_init(__mpf_struct arg0) {
    arblibJNI.__gmpf_init(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpf_init2(__mpf_struct arg0, long arg1) {
    arblibJNI.__gmpf_init2(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpf_inits(__mpf_struct arg0) {
    arblibJNI.__gmpf_inits(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpf_init_set(__mpf_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpf_init_set(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpf_init_set_d(__mpf_struct arg0, double arg1) {
    arblibJNI.__gmpf_init_set_d(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpf_init_set_si(__mpf_struct arg0, int arg1) {
    arblibJNI.__gmpf_init_set_si(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpf_init_set_str(__mpf_struct arg0, String arg1, int arg2) {
    return arblibJNI.__gmpf_init_set_str(__mpf_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpf_init_set_ui(__mpf_struct arg0, long arg1) {
    arblibJNI.__gmpf_init_set_ui(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static long __gmpf_inp_str(__mpf_struct arg0, _IO_FILE arg1, int arg2) {
    return arblibJNI.__gmpf_inp_str(__mpf_struct.getCPtr(arg0), arg0, _IO_FILE.getCPtr(arg1), arg1, arg2);
  }

  public static int __gmpf_integer_p(__mpf_struct arg0) {
    return arblibJNI.__gmpf_integer_p(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpf_mul(__mpf_struct arg0, __mpf_struct arg1, __mpf_struct arg2) {
    arblibJNI.__gmpf_mul(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, __mpf_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpf_mul_2exp(__mpf_struct arg0, __mpf_struct arg1, long arg2) {
    arblibJNI.__gmpf_mul_2exp(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpf_mul_ui(__mpf_struct arg0, __mpf_struct arg1, long arg2) {
    arblibJNI.__gmpf_mul_ui(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpf_neg(__mpf_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpf_neg(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static long __gmpf_out_str(_IO_FILE arg0, int arg1, long arg2, __mpf_struct arg3) {
    return arblibJNI.__gmpf_out_str(_IO_FILE.getCPtr(arg0), arg0, arg1, arg2, __mpf_struct.getCPtr(arg3), arg3);
  }

  public static void __gmpf_pow_ui(__mpf_struct arg0, __mpf_struct arg1, long arg2) {
    arblibJNI.__gmpf_pow_ui(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpf_random2(__mpf_struct arg0, int arg1, int arg2) {
    arblibJNI.__gmpf_random2(__mpf_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpf_reldiff(__mpf_struct arg0, __mpf_struct arg1, __mpf_struct arg2) {
    arblibJNI.__gmpf_reldiff(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, __mpf_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpf_set(__mpf_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpf_set(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpf_set_d(__mpf_struct arg0, double arg1) {
    arblibJNI.__gmpf_set_d(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpf_set_default_prec(long arg0) {
    arblibJNI.__gmpf_set_default_prec(arg0);
  }

  public static void __gmpf_set_prec(__mpf_struct arg0, long arg1) {
    arblibJNI.__gmpf_set_prec(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpf_set_prec_raw(__mpf_struct arg0, long arg1) {
    arblibJNI.__gmpf_set_prec_raw(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpf_set_q(__mpf_struct arg0, __mpq_struct arg1) {
    arblibJNI.__gmpf_set_q(__mpf_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpf_set_si(__mpf_struct arg0, int arg1) {
    arblibJNI.__gmpf_set_si(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpf_set_str(__mpf_struct arg0, String arg1, int arg2) {
    return arblibJNI.__gmpf_set_str(__mpf_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static void __gmpf_set_ui(__mpf_struct arg0, long arg1) {
    arblibJNI.__gmpf_set_ui(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpf_set_z(__mpf_struct arg0, __mpz_struct arg1) {
    arblibJNI.__gmpf_set_z(__mpf_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static long __gmpf_size(__mpf_struct arg0) {
    return arblibJNI.__gmpf_size(__mpf_struct.getCPtr(arg0), arg0);
  }

  public static void __gmpf_sqrt(__mpf_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpf_sqrt(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpf_sqrt_ui(__mpf_struct arg0, long arg1) {
    arblibJNI.__gmpf_sqrt_ui(__mpf_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void __gmpf_sub(__mpf_struct arg0, __mpf_struct arg1, __mpf_struct arg2) {
    arblibJNI.__gmpf_sub(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, __mpf_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpf_sub_ui(__mpf_struct arg0, __mpf_struct arg1, long arg2) {
    arblibJNI.__gmpf_sub_ui(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void __gmpf_swap(__mpf_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpf_swap(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpf_trunc(__mpf_struct arg0, __mpf_struct arg1) {
    arblibJNI.__gmpf_trunc(__mpf_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static void __gmpf_ui_div(__mpf_struct arg0, long arg1, __mpf_struct arg2) {
    arblibJNI.__gmpf_ui_div(__mpf_struct.getCPtr(arg0), arg0, arg1, __mpf_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpf_ui_sub(__mpf_struct arg0, long arg1, __mpf_struct arg2) {
    arblibJNI.__gmpf_ui_sub(__mpf_struct.getCPtr(arg0), arg0, arg1, __mpf_struct.getCPtr(arg2), arg2);
  }

  public static void __gmpf_urandomb(__mpf_struct arg0, __gmp_randstate_struct arg1, long arg2) {
    arblibJNI.__gmpf_urandomb(__mpf_struct.getCPtr(arg0), arg0, __gmp_randstate_struct.getCPtr(arg1), arg1, arg2);
  }

  public static long __gmpn_add_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    return arblibJNI.__gmpn_add_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static long __gmpn_addmul_1(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, long arg3) {
    return arblibJNI.__gmpn_addmul_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3);
  }

  public static void __gmpn_divexact_1(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, long arg3) {
    arblibJNI.__gmpn_divexact_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3);
  }

  public static long __gmpn_divexact_by3c(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, long arg3) {
    return arblibJNI.__gmpn_divexact_by3c(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3);
  }

  public static long __gmpn_divrem(SWIGTYPE_p_unsigned_long arg0, int arg1, SWIGTYPE_p_unsigned_long arg2, int arg3, SWIGTYPE_p_unsigned_long arg4, int arg5) {
    return arblibJNI.__gmpn_divrem(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1, SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3, SWIGTYPE_p_unsigned_long.getCPtr(arg4), arg5);
  }

  public static long __gmpn_divrem_1(SWIGTYPE_p_unsigned_long arg0, int arg1, SWIGTYPE_p_unsigned_long arg2, int arg3, long arg4) {
    return arblibJNI.__gmpn_divrem_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1, SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3, arg4);
  }

  public static long __gmpn_divrem_2(SWIGTYPE_p_unsigned_long arg0, int arg1, SWIGTYPE_p_unsigned_long arg2, int arg3, SWIGTYPE_p_unsigned_long arg4) {
    return arblibJNI.__gmpn_divrem_2(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1, SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3, SWIGTYPE_p_unsigned_long.getCPtr(arg4));
  }

  public static long __gmpn_div_qr_1(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3, long arg4) {
    return arblibJNI.__gmpn_div_qr_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3, arg4);
  }

  public static long __gmpn_div_qr_2(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3, SWIGTYPE_p_unsigned_long arg4) {
    return arblibJNI.__gmpn_div_qr_2(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3, SWIGTYPE_p_unsigned_long.getCPtr(arg4));
  }

  public static int __gmpn_gcd(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, SWIGTYPE_p_unsigned_long arg3, int arg4) {
    return arblibJNI.__gmpn_gcd(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4);
  }

  public static long __gmpn_gcd_11(long arg0, long arg1) {
    return arblibJNI.__gmpn_gcd_11(arg0, arg1);
  }

  public static long __gmpn_gcd_1(SWIGTYPE_p_unsigned_long arg0, int arg1, long arg2) {
    return arblibJNI.__gmpn_gcd_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1, arg2);
  }

  public static long __gmpn_gcdext_1(SWIGTYPE_p_long arg0, SWIGTYPE_p_long arg1, long arg2, long arg3) {
    return arblibJNI.__gmpn_gcdext_1(SWIGTYPE_p_long.getCPtr(arg0), SWIGTYPE_p_long.getCPtr(arg1), arg2, arg3);
  }

  public static int __gmpn_gcdext(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_long arg2, SWIGTYPE_p_unsigned_long arg3, int arg4, SWIGTYPE_p_unsigned_long arg5, int arg6) {
    return arblibJNI.__gmpn_gcdext(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_long.getCPtr(arg2), SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4, SWIGTYPE_p_unsigned_long.getCPtr(arg5), arg6);
  }

  public static long __gmpn_get_str(SWIGTYPE_p_unsigned_char arg0, int arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    return arblibJNI.__gmpn_get_str(SWIGTYPE_p_unsigned_char.getCPtr(arg0), arg1, SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static long __gmpn_hamdist(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2) {
    return arblibJNI.__gmpn_hamdist(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2);
  }

  public static long __gmpn_lshift(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, long arg3) {
    return arblibJNI.__gmpn_lshift(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3);
  }

  public static long __gmpn_mod_1(SWIGTYPE_p_unsigned_long arg0, int arg1, long arg2) {
    return arblibJNI.__gmpn_mod_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1, arg2);
  }

  public static long __gmpn_mul(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, SWIGTYPE_p_unsigned_long arg3, int arg4) {
    return arblibJNI.__gmpn_mul(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4);
  }

  public static long __gmpn_mul_1(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, long arg3) {
    return arblibJNI.__gmpn_mul_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3);
  }

  public static void __gmpn_mul_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    arblibJNI.__gmpn_mul_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static void __gmpn_sqr(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2) {
    arblibJNI.__gmpn_sqr(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2);
  }

  public static void __gmpn_com(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2) {
    arblibJNI.__gmpn_com(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2);
  }

  public static int __gmpn_perfect_square_p(SWIGTYPE_p_unsigned_long arg0, int arg1) {
    return arblibJNI.__gmpn_perfect_square_p(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1);
  }

  public static int __gmpn_perfect_power_p(SWIGTYPE_p_unsigned_long arg0, int arg1) {
    return arblibJNI.__gmpn_perfect_power_p(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1);
  }

  public static long __gmpn_popcount(SWIGTYPE_p_unsigned_long arg0, int arg1) {
    return arblibJNI.__gmpn_popcount(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1);
  }

  public static int __gmpn_pow_1(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, long arg3, SWIGTYPE_p_unsigned_long arg4) {
    return arblibJNI.__gmpn_pow_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_unsigned_long.getCPtr(arg4));
  }

  public static long __gmpn_preinv_mod_1(SWIGTYPE_p_unsigned_long arg0, int arg1, long arg2, long arg3) {
    return arblibJNI.__gmpn_preinv_mod_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1, arg2, arg3);
  }

  public static void __gmpn_random(SWIGTYPE_p_unsigned_long arg0, int arg1) {
    arblibJNI.__gmpn_random(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1);
  }

  public static void __gmpn_random2(SWIGTYPE_p_unsigned_long arg0, int arg1) {
    arblibJNI.__gmpn_random2(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1);
  }

  public static long __gmpn_rshift(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, long arg3) {
    return arblibJNI.__gmpn_rshift(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3);
  }

  public static long __gmpn_scan0(SWIGTYPE_p_unsigned_long arg0, long arg1) {
    return arblibJNI.__gmpn_scan0(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1);
  }

  public static long __gmpn_scan1(SWIGTYPE_p_unsigned_long arg0, long arg1) {
    return arblibJNI.__gmpn_scan1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1);
  }

  public static int __gmpn_set_str(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_char arg1, long arg2, int arg3) {
    return arblibJNI.__gmpn_set_str(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_char.getCPtr(arg1), arg2, arg3);
  }

  public static long __gmpn_sizeinbase(SWIGTYPE_p_unsigned_long arg0, int arg1, int arg2) {
    return arblibJNI.__gmpn_sizeinbase(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1, arg2);
  }

  public static int __gmpn_sqrtrem(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    return arblibJNI.__gmpn_sqrtrem(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static long __gmpn_sub_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    return arblibJNI.__gmpn_sub_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static long __gmpn_submul_1(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, long arg3) {
    return arblibJNI.__gmpn_submul_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3);
  }

  public static void __gmpn_tdiv_qr(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, SWIGTYPE_p_unsigned_long arg3, int arg4, SWIGTYPE_p_unsigned_long arg5, int arg6) {
    arblibJNI.__gmpn_tdiv_qr(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4, SWIGTYPE_p_unsigned_long.getCPtr(arg5), arg6);
  }

  public static void __gmpn_and_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    arblibJNI.__gmpn_and_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static void __gmpn_andn_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    arblibJNI.__gmpn_andn_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static void __gmpn_nand_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    arblibJNI.__gmpn_nand_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static void __gmpn_ior_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    arblibJNI.__gmpn_ior_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static void __gmpn_iorn_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    arblibJNI.__gmpn_iorn_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static void __gmpn_nior_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    arblibJNI.__gmpn_nior_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static void __gmpn_xor_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    arblibJNI.__gmpn_xor_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static void __gmpn_xnor_n(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    arblibJNI.__gmpn_xnor_n(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static void __gmpn_copyi(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2) {
    arblibJNI.__gmpn_copyi(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2);
  }

  public static void __gmpn_copyd(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2) {
    arblibJNI.__gmpn_copyd(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2);
  }

  public static void __gmpn_zero(SWIGTYPE_p_unsigned_long arg0, int arg1) {
    arblibJNI.__gmpn_zero(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1);
  }

  public static long __gmpn_cnd_add_n(long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, SWIGTYPE_p_unsigned_long arg3, int arg4) {
    return arblibJNI.__gmpn_cnd_add_n(arg0, SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4);
  }

  public static long __gmpn_cnd_sub_n(long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, SWIGTYPE_p_unsigned_long arg3, int arg4) {
    return arblibJNI.__gmpn_cnd_sub_n(arg0, SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4);
  }

  public static long __gmpn_sec_add_1(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, long arg3, SWIGTYPE_p_unsigned_long arg4) {
    return arblibJNI.__gmpn_sec_add_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_unsigned_long.getCPtr(arg4));
  }

  public static int __gmpn_sec_add_1_itch(int arg0) {
    return arblibJNI.__gmpn_sec_add_1_itch(arg0);
  }

  public static long __gmpn_sec_sub_1(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, long arg3, SWIGTYPE_p_unsigned_long arg4) {
    return arblibJNI.__gmpn_sec_sub_1(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3, SWIGTYPE_p_unsigned_long.getCPtr(arg4));
  }

  public static int __gmpn_sec_sub_1_itch(int arg0) {
    return arblibJNI.__gmpn_sec_sub_1_itch(arg0);
  }

  public static void __gmpn_cnd_swap(long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    arblibJNI.__gmpn_cnd_swap(arg0, SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
  }

  public static void __gmpn_sec_mul(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, SWIGTYPE_p_unsigned_long arg3, int arg4, SWIGTYPE_p_unsigned_long arg5) {
    arblibJNI.__gmpn_sec_mul(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4, SWIGTYPE_p_unsigned_long.getCPtr(arg5));
  }

  public static int __gmpn_sec_mul_itch(int arg0, int arg1) {
    return arblibJNI.__gmpn_sec_mul_itch(arg0, arg1);
  }

  public static void __gmpn_sec_sqr(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, SWIGTYPE_p_unsigned_long arg3) {
    arblibJNI.__gmpn_sec_sqr(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3));
  }

  public static int __gmpn_sec_sqr_itch(int arg0) {
    return arblibJNI.__gmpn_sec_sqr_itch(arg0);
  }

  public static void __gmpn_sec_powm(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, SWIGTYPE_p_unsigned_long arg3, long arg4, SWIGTYPE_p_unsigned_long arg5, int arg6, SWIGTYPE_p_unsigned_long arg7) {
    arblibJNI.__gmpn_sec_powm(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4, SWIGTYPE_p_unsigned_long.getCPtr(arg5), arg6, SWIGTYPE_p_unsigned_long.getCPtr(arg7));
  }

  public static int __gmpn_sec_powm_itch(int arg0, long arg1, int arg2) {
    return arblibJNI.__gmpn_sec_powm_itch(arg0, arg1, arg2);
  }

  public static void __gmpn_sec_tabselect(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, int arg3, int arg4) {
    arblibJNI.__gmpn_sec_tabselect(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, arg3, arg4);
  }

  public static long __gmpn_sec_div_qr(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, int arg2, SWIGTYPE_p_unsigned_long arg3, int arg4, SWIGTYPE_p_unsigned_long arg5) {
    return arblibJNI.__gmpn_sec_div_qr(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4, SWIGTYPE_p_unsigned_long.getCPtr(arg5));
  }

  public static int __gmpn_sec_div_qr_itch(int arg0, int arg1) {
    return arblibJNI.__gmpn_sec_div_qr_itch(arg0, arg1);
  }

  public static void __gmpn_sec_div_r(SWIGTYPE_p_unsigned_long arg0, int arg1, SWIGTYPE_p_unsigned_long arg2, int arg3, SWIGTYPE_p_unsigned_long arg4) {
    arblibJNI.__gmpn_sec_div_r(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1, SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3, SWIGTYPE_p_unsigned_long.getCPtr(arg4));
  }

  public static int __gmpn_sec_div_r_itch(int arg0, int arg1) {
    return arblibJNI.__gmpn_sec_div_r_itch(arg0, arg1);
  }

  public static int __gmpn_sec_invert(SWIGTYPE_p_unsigned_long arg0, SWIGTYPE_p_unsigned_long arg1, SWIGTYPE_p_unsigned_long arg2, int arg3, long arg4, SWIGTYPE_p_unsigned_long arg5) {
    return arblibJNI.__gmpn_sec_invert(SWIGTYPE_p_unsigned_long.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3, arg4, SWIGTYPE_p_unsigned_long.getCPtr(arg5));
  }

  public static int __gmpn_sec_invert_itch(int arg0) {
    return arblibJNI.__gmpn_sec_invert_itch(arg0);
  }

  public static void __gmpz_abs(__mpz_struct __gmp_w, __mpz_struct __gmp_u) {
    arblibJNI.__gmpz_abs(__mpz_struct.getCPtr(__gmp_w), __gmp_w, __mpz_struct.getCPtr(__gmp_u), __gmp_u);
  }

  public static int __gmpz_fits_uint_p(__mpz_struct __gmp_z) {
    return arblibJNI.__gmpz_fits_uint_p(__mpz_struct.getCPtr(__gmp_z), __gmp_z);
  }

  public static int __gmpz_fits_ulong_p(__mpz_struct __gmp_z) {
    return arblibJNI.__gmpz_fits_ulong_p(__mpz_struct.getCPtr(__gmp_z), __gmp_z);
  }

  public static int __gmpz_fits_ushort_p(__mpz_struct __gmp_z) {
    return arblibJNI.__gmpz_fits_ushort_p(__mpz_struct.getCPtr(__gmp_z), __gmp_z);
  }

  public static long __gmpz_get_ui(__mpz_struct __gmp_z) {
    return arblibJNI.__gmpz_get_ui(__mpz_struct.getCPtr(__gmp_z), __gmp_z);
  }

  public static long __gmpz_getlimbn(__mpz_struct __gmp_z, int __gmp_n) {
    return arblibJNI.__gmpz_getlimbn(__mpz_struct.getCPtr(__gmp_z), __gmp_z, __gmp_n);
  }

  public static void __gmpz_neg(__mpz_struct __gmp_w, __mpz_struct __gmp_u) {
    arblibJNI.__gmpz_neg(__mpz_struct.getCPtr(__gmp_w), __gmp_w, __mpz_struct.getCPtr(__gmp_u), __gmp_u);
  }

  public static int __gmpz_perfect_square_p(__mpz_struct __gmp_a) {
    return arblibJNI.__gmpz_perfect_square_p(__mpz_struct.getCPtr(__gmp_a), __gmp_a);
  }

  public static long __gmpz_popcount(__mpz_struct __gmp_u) {
    return arblibJNI.__gmpz_popcount(__mpz_struct.getCPtr(__gmp_u), __gmp_u);
  }

  public static void __gmpz_set_q(__mpz_struct __gmp_w, __mpq_struct __gmp_u) {
    arblibJNI.__gmpz_set_q(__mpz_struct.getCPtr(__gmp_w), __gmp_w, __mpq_struct.getCPtr(__gmp_u), __gmp_u);
  }

  public static long __gmpz_size(__mpz_struct __gmp_z) {
    return arblibJNI.__gmpz_size(__mpz_struct.getCPtr(__gmp_z), __gmp_z);
  }

  public static void __gmpq_abs(__mpq_struct __gmp_w, __mpq_struct __gmp_u) {
    arblibJNI.__gmpq_abs(__mpq_struct.getCPtr(__gmp_w), __gmp_w, __mpq_struct.getCPtr(__gmp_u), __gmp_u);
  }

  public static void __gmpq_neg(__mpq_struct __gmp_w, __mpq_struct __gmp_u) {
    arblibJNI.__gmpq_neg(__mpq_struct.getCPtr(__gmp_w), __gmp_w, __mpq_struct.getCPtr(__gmp_u), __gmp_u);
  }

  public static long __gmpn_add(SWIGTYPE_p_unsigned_long __gmp_wp, SWIGTYPE_p_unsigned_long __gmp_xp, int __gmp_xsize, SWIGTYPE_p_unsigned_long __gmp_yp, int __gmp_ysize) {
    return arblibJNI.__gmpn_add(SWIGTYPE_p_unsigned_long.getCPtr(__gmp_wp), SWIGTYPE_p_unsigned_long.getCPtr(__gmp_xp), __gmp_xsize, SWIGTYPE_p_unsigned_long.getCPtr(__gmp_yp), __gmp_ysize);
  }

  public static long __gmpn_add_1(SWIGTYPE_p_unsigned_long __gmp_dst, SWIGTYPE_p_unsigned_long __gmp_src, int __gmp_size, long __gmp_n) {
    return arblibJNI.__gmpn_add_1(SWIGTYPE_p_unsigned_long.getCPtr(__gmp_dst), SWIGTYPE_p_unsigned_long.getCPtr(__gmp_src), __gmp_size, __gmp_n);
  }

  public static int __gmpn_cmp(SWIGTYPE_p_unsigned_long __gmp_xp, SWIGTYPE_p_unsigned_long __gmp_yp, int __gmp_size) {
    return arblibJNI.__gmpn_cmp(SWIGTYPE_p_unsigned_long.getCPtr(__gmp_xp), SWIGTYPE_p_unsigned_long.getCPtr(__gmp_yp), __gmp_size);
  }

  public static int __gmpn_zero_p(SWIGTYPE_p_unsigned_long __gmp_p, int __gmp_n) {
    return arblibJNI.__gmpn_zero_p(SWIGTYPE_p_unsigned_long.getCPtr(__gmp_p), __gmp_n);
  }

  public static long __gmpn_sub(SWIGTYPE_p_unsigned_long __gmp_wp, SWIGTYPE_p_unsigned_long __gmp_xp, int __gmp_xsize, SWIGTYPE_p_unsigned_long __gmp_yp, int __gmp_ysize) {
    return arblibJNI.__gmpn_sub(SWIGTYPE_p_unsigned_long.getCPtr(__gmp_wp), SWIGTYPE_p_unsigned_long.getCPtr(__gmp_xp), __gmp_xsize, SWIGTYPE_p_unsigned_long.getCPtr(__gmp_yp), __gmp_ysize);
  }

  public static long __gmpn_sub_1(SWIGTYPE_p_unsigned_long __gmp_dst, SWIGTYPE_p_unsigned_long __gmp_src, int __gmp_size, long __gmp_n) {
    return arblibJNI.__gmpn_sub_1(SWIGTYPE_p_unsigned_long.getCPtr(__gmp_dst), SWIGTYPE_p_unsigned_long.getCPtr(__gmp_src), __gmp_size, __gmp_n);
  }

  public static long __gmpn_neg(SWIGTYPE_p_unsigned_long __gmp_rp, SWIGTYPE_p_unsigned_long __gmp_up, int __gmp_n) {
    return arblibJNI.__gmpn_neg(SWIGTYPE_p_unsigned_long.getCPtr(__gmp_rp), SWIGTYPE_p_unsigned_long.getCPtr(__gmp_up), __gmp_n);
  }

  public static String mpfr_get_version() {
    return arblibJNI.mpfr_get_version();
  }

  public static String mpfr_get_patches() {
    return arblibJNI.mpfr_get_patches();
  }

  public static int mpfr_buildopt_tls_p() {
    return arblibJNI.mpfr_buildopt_tls_p();
  }

  public static int mpfr_buildopt_float128_p() {
    return arblibJNI.mpfr_buildopt_float128_p();
  }

  public static int mpfr_buildopt_decimal_p() {
    return arblibJNI.mpfr_buildopt_decimal_p();
  }

  public static int mpfr_buildopt_gmpinternals_p() {
    return arblibJNI.mpfr_buildopt_gmpinternals_p();
  }

  public static int mpfr_buildopt_sharedcache_p() {
    return arblibJNI.mpfr_buildopt_sharedcache_p();
  }

  public static String mpfr_buildopt_tune_case() {
    return arblibJNI.mpfr_buildopt_tune_case();
  }

  public static int mpfr_get_emin() {
    return arblibJNI.mpfr_get_emin();
  }

  public static int mpfr_set_emin(int arg0) {
    return arblibJNI.mpfr_set_emin(arg0);
  }

  public static int mpfr_get_emin_min() {
    return arblibJNI.mpfr_get_emin_min();
  }

  public static int mpfr_get_emin_max() {
    return arblibJNI.mpfr_get_emin_max();
  }

  public static int mpfr_get_emax() {
    return arblibJNI.mpfr_get_emax();
  }

  public static int mpfr_set_emax(int arg0) {
    return arblibJNI.mpfr_set_emax(arg0);
  }

  public static int mpfr_get_emax_min() {
    return arblibJNI.mpfr_get_emax_min();
  }

  public static int mpfr_get_emax_max() {
    return arblibJNI.mpfr_get_emax_max();
  }

  public static void mpfr_set_default_rounding_mode(mpfr_rnd_t arg0) {
    arblibJNI.mpfr_set_default_rounding_mode(arg0.swigValue());
  }

  public static mpfr_rnd_t mpfr_get_default_rounding_mode() {
    return mpfr_rnd_t.swigToEnum(arblibJNI.mpfr_get_default_rounding_mode());
  }

  public static String mpfr_print_rnd_mode(mpfr_rnd_t arg0) {
    return arblibJNI.mpfr_print_rnd_mode(arg0.swigValue());
  }

  public static void mpfr_clear_flags() {
    arblibJNI.mpfr_clear_flags();
  }

  public static void mpfr_clear_underflow() {
    arblibJNI.mpfr_clear_underflow();
  }

  public static void mpfr_clear_overflow() {
    arblibJNI.mpfr_clear_overflow();
  }

  public static void mpfr_clear_divby0() {
    arblibJNI.mpfr_clear_divby0();
  }

  public static void mpfr_clear_nanflag() {
    arblibJNI.mpfr_clear_nanflag();
  }

  public static void mpfr_clear_inexflag() {
    arblibJNI.mpfr_clear_inexflag();
  }

  public static void mpfr_clear_erangeflag() {
    arblibJNI.mpfr_clear_erangeflag();
  }

  public static void mpfr_set_underflow() {
    arblibJNI.mpfr_set_underflow();
  }

  public static void mpfr_set_overflow() {
    arblibJNI.mpfr_set_overflow();
  }

  public static void mpfr_set_divby0() {
    arblibJNI.mpfr_set_divby0();
  }

  public static void mpfr_set_nanflag() {
    arblibJNI.mpfr_set_nanflag();
  }

  public static void mpfr_set_inexflag() {
    arblibJNI.mpfr_set_inexflag();
  }

  public static void mpfr_set_erangeflag() {
    arblibJNI.mpfr_set_erangeflag();
  }

  public static int mpfr_underflow_p() {
    return arblibJNI.mpfr_underflow_p();
  }

  public static int mpfr_overflow_p() {
    return arblibJNI.mpfr_overflow_p();
  }

  public static int mpfr_divby0_p() {
    return arblibJNI.mpfr_divby0_p();
  }

  public static int mpfr_nanflag_p() {
    return arblibJNI.mpfr_nanflag_p();
  }

  public static int mpfr_inexflag_p() {
    return arblibJNI.mpfr_inexflag_p();
  }

  public static int mpfr_erangeflag_p() {
    return arblibJNI.mpfr_erangeflag_p();
  }

  public static void mpfr_flags_clear(long arg0) {
    arblibJNI.mpfr_flags_clear(arg0);
  }

  public static void mpfr_flags_set(long arg0) {
    arblibJNI.mpfr_flags_set(arg0);
  }

  public static long mpfr_flags_test(long arg0) {
    return arblibJNI.mpfr_flags_test(arg0);
  }

  public static long mpfr_flags_save() {
    return arblibJNI.mpfr_flags_save();
  }

  public static void mpfr_flags_restore(long arg0, long arg1) {
    arblibJNI.mpfr_flags_restore(arg0, arg1);
  }

  public static int mpfr_check_range(__mpfr_struct arg0, int arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_check_range(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static void mpfr_init2(__mpfr_struct arg0, int arg1) {
    arblibJNI.mpfr_init2(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void mpfr_init(__mpfr_struct arg0) {
    arblibJNI.mpfr_init(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static void mpfr_clear(__mpfr_struct arg0) {
    arblibJNI.mpfr_clear(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static void mpfr_inits2(int arg0, __mpfr_struct arg1) {
    arblibJNI.mpfr_inits2(arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static void mpfr_inits(__mpfr_struct arg0) {
    arblibJNI.mpfr_inits(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static void mpfr_clears(__mpfr_struct arg0) {
    arblibJNI.mpfr_clears(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_prec_round(__mpfr_struct arg0, int arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_prec_round(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static int mpfr_can_round(__mpfr_struct arg0, int arg1, mpfr_rnd_t arg2, mpfr_rnd_t arg3, int arg4) {
    return arblibJNI.mpfr_can_round(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue(), arg3.swigValue(), arg4);
  }

  public static int mpfr_min_prec(__mpfr_struct arg0) {
    return arblibJNI.mpfr_min_prec(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_get_exp(__mpfr_struct arg0) {
    return arblibJNI.mpfr_get_exp(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_set_exp(__mpfr_struct arg0, int arg1) {
    return arblibJNI.mpfr_set_exp(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int mpfr_get_prec(__mpfr_struct arg0) {
    return arblibJNI.mpfr_get_prec(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static void mpfr_set_prec(__mpfr_struct arg0, int arg1) {
    arblibJNI.mpfr_set_prec(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void mpfr_set_prec_raw(__mpfr_struct arg0, int arg1) {
    arblibJNI.mpfr_set_prec_raw(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void mpfr_set_default_prec(int arg0) {
    arblibJNI.mpfr_set_default_prec(arg0);
  }

  public static int mpfr_get_default_prec() {
    return arblibJNI.mpfr_get_default_prec();
  }

  public static int mpfr_set_d(__mpfr_struct arg0, double arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_set_d(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static int mpfr_set_flt(__mpfr_struct arg0, float arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_set_flt(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static int mpfr_set_ld(__mpfr_struct arg0, SWIGTYPE_p_long_double arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_set_ld(__mpfr_struct.getCPtr(arg0), arg0, SWIGTYPE_p_long_double.getCPtr(arg1), arg2.swigValue());
  }

  public static int mpfr_set_z(__mpfr_struct arg0, __mpz_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_set_z(__mpfr_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_set_z_2exp(__mpfr_struct arg0, __mpz_struct arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_set_z_2exp(__mpfr_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static void mpfr_set_nan(__mpfr_struct arg0) {
    arblibJNI.mpfr_set_nan(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static void mpfr_set_inf(__mpfr_struct arg0, int arg1) {
    arblibJNI.mpfr_set_inf(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void mpfr_set_zero(__mpfr_struct arg0, int arg1) {
    arblibJNI.mpfr_set_zero(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int mpfr_set_f(__mpfr_struct arg0, __mpf_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_set_f(__mpfr_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_cmp_f(__mpfr_struct arg0, __mpf_struct arg1) {
    return arblibJNI.mpfr_cmp_f(__mpfr_struct.getCPtr(arg0), arg0, __mpf_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_get_f(__mpf_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_get_f(__mpf_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_set_si(__mpfr_struct arg0, int arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_set_si(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static int mpfr_set_ui(__mpfr_struct arg0, long arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_set_ui(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static int mpfr_set_si_2exp(__mpfr_struct arg0, int arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_set_si_2exp(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_set_ui_2exp(__mpfr_struct arg0, long arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_set_ui_2exp(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_set_q(__mpfr_struct arg0, __mpq_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_set_q(__mpfr_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_mul_q(__mpfr_struct arg0, __mpfr_struct arg1, __mpq_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_mul_q(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpq_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_div_q(__mpfr_struct arg0, __mpfr_struct arg1, __mpq_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_div_q(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpq_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_add_q(__mpfr_struct arg0, __mpfr_struct arg1, __mpq_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_add_q(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpq_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_sub_q(__mpfr_struct arg0, __mpfr_struct arg1, __mpq_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_sub_q(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpq_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_cmp_q(__mpfr_struct arg0, __mpq_struct arg1) {
    return arblibJNI.mpfr_cmp_q(__mpfr_struct.getCPtr(arg0), arg0, __mpq_struct.getCPtr(arg1), arg1);
  }

  public static void mpfr_get_q(__mpq_struct q, __mpfr_struct f) {
    arblibJNI.mpfr_get_q(__mpq_struct.getCPtr(q), q, __mpfr_struct.getCPtr(f), f);
  }

  public static int mpfr_set_str(__mpfr_struct arg0, String arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_set_str(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_init_set_str(__mpfr_struct arg0, String arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_init_set_str(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_set4(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2, int arg3) {
    return arblibJNI.mpfr_set4(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue(), arg3);
  }

  public static int mpfr_abs(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_abs(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_set(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_set(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_neg(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_neg(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_signbit(__mpfr_struct arg0) {
    return arblibJNI.mpfr_signbit(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_setsign(__mpfr_struct arg0, __mpfr_struct arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_setsign(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_copysign(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_copysign(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_get_z_2exp(__mpz_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_get_z_2exp(__mpz_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static float mpfr_get_flt(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_get_flt(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static double mpfr_get_d(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_get_d(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static SWIGTYPE_p_long_double mpfr_get_ld(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return new SWIGTYPE_p_long_double(arblibJNI.mpfr_get_ld(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue()), true);
  }

  public static double mpfr_get_d1(__mpfr_struct arg0) {
    return arblibJNI.mpfr_get_d1(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static double mpfr_get_d_2exp(SWIGTYPE_p_long arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_get_d_2exp(SWIGTYPE_p_long.getCPtr(arg0), __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static SWIGTYPE_p_long_double mpfr_get_ld_2exp(SWIGTYPE_p_long arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return new SWIGTYPE_p_long_double(arblibJNI.mpfr_get_ld_2exp(SWIGTYPE_p_long.getCPtr(arg0), __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue()), true);
  }

  public static int mpfr_frexp(SWIGTYPE_p_long arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_frexp(SWIGTYPE_p_long.getCPtr(arg0), __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_get_si(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_get_si(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static long mpfr_get_ui(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_get_ui(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static long mpfr_get_str_ndigits(int arg0, int arg1) {
    return arblibJNI.mpfr_get_str_ndigits(arg0, arg1);
  }

  public static String mpfr_get_str(String arg0, SWIGTYPE_p_long arg1, int arg2, long arg3, __mpfr_struct arg4, mpfr_rnd_t arg5) {
    return arblibJNI.mpfr_get_str(arg0, SWIGTYPE_p_long.getCPtr(arg1), arg2, arg3, __mpfr_struct.getCPtr(arg4), arg4, arg5.swigValue());
  }

  public static int mpfr_get_z(__mpz_struct z, __mpfr_struct f, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_get_z(__mpz_struct.getCPtr(z), z, __mpfr_struct.getCPtr(f), f, arg2.swigValue());
  }

  public static void mpfr_free_str(String arg0) {
    arblibJNI.mpfr_free_str(arg0);
  }

  public static int mpfr_urandom(__mpfr_struct arg0, __gmp_randstate_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_urandom(__mpfr_struct.getCPtr(arg0), arg0, __gmp_randstate_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_grandom(__mpfr_struct arg0, __mpfr_struct arg1, __gmp_randstate_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_grandom(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __gmp_randstate_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_nrandom(__mpfr_struct arg0, __gmp_randstate_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_nrandom(__mpfr_struct.getCPtr(arg0), arg0, __gmp_randstate_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_erandom(__mpfr_struct arg0, __gmp_randstate_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_erandom(__mpfr_struct.getCPtr(arg0), arg0, __gmp_randstate_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_urandomb(__mpfr_struct arg0, __gmp_randstate_struct arg1) {
    return arblibJNI.mpfr_urandomb(__mpfr_struct.getCPtr(arg0), arg0, __gmp_randstate_struct.getCPtr(arg1), arg1);
  }

  public static void mpfr_nextabove(__mpfr_struct arg0) {
    arblibJNI.mpfr_nextabove(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static void mpfr_nextbelow(__mpfr_struct arg0) {
    arblibJNI.mpfr_nextbelow(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static void mpfr_nexttoward(__mpfr_struct arg0, __mpfr_struct arg1) {
    arblibJNI.mpfr_nexttoward(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_printf(String arg0) {
    return arblibJNI.mpfr_printf(arg0);
  }

  public static int mpfr_asprintf(SWIGTYPE_p_p_char arg0, String arg1) {
    return arblibJNI.mpfr_asprintf(SWIGTYPE_p_p_char.getCPtr(arg0), arg1);
  }

  public static int mpfr_sprintf(String arg0, String arg1) {
    return arblibJNI.mpfr_sprintf(arg0, arg1);
  }

  public static int mpfr_snprintf(String arg0, long arg1, String arg2) {
    return arblibJNI.mpfr_snprintf(arg0, arg1, arg2);
  }

  public static int mpfr_pow(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_pow(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_pow_si(__mpfr_struct arg0, __mpfr_struct arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_pow_si(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_pow_ui(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_pow_ui(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_ui_pow_ui(__mpfr_struct arg0, long arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_ui_pow_ui(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_ui_pow(__mpfr_struct arg0, long arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_ui_pow(__mpfr_struct.getCPtr(arg0), arg0, arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_pow_z(__mpfr_struct arg0, __mpfr_struct arg1, __mpz_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_pow_z(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_sqrt(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_sqrt(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_sqrt_ui(__mpfr_struct arg0, long arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_sqrt_ui(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static int mpfr_rec_sqrt(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_rec_sqrt(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_add(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_add(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_sub(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_sub(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_mul(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_mul(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_div(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_div(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_add_ui(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_add_ui(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_sub_ui(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_sub_ui(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_ui_sub(__mpfr_struct arg0, long arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_ui_sub(__mpfr_struct.getCPtr(arg0), arg0, arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_mul_ui(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_mul_ui(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_div_ui(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_div_ui(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_ui_div(__mpfr_struct arg0, long arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_ui_div(__mpfr_struct.getCPtr(arg0), arg0, arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_add_si(__mpfr_struct arg0, __mpfr_struct arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_add_si(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_sub_si(__mpfr_struct arg0, __mpfr_struct arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_sub_si(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_si_sub(__mpfr_struct arg0, int arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_si_sub(__mpfr_struct.getCPtr(arg0), arg0, arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_mul_si(__mpfr_struct arg0, __mpfr_struct arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_mul_si(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_div_si(__mpfr_struct arg0, __mpfr_struct arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_div_si(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_si_div(__mpfr_struct arg0, int arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_si_div(__mpfr_struct.getCPtr(arg0), arg0, arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_add_d(__mpfr_struct arg0, __mpfr_struct arg1, double arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_add_d(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_sub_d(__mpfr_struct arg0, __mpfr_struct arg1, double arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_sub_d(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_d_sub(__mpfr_struct arg0, double arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_d_sub(__mpfr_struct.getCPtr(arg0), arg0, arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_mul_d(__mpfr_struct arg0, __mpfr_struct arg1, double arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_mul_d(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_div_d(__mpfr_struct arg0, __mpfr_struct arg1, double arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_div_d(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_d_div(__mpfr_struct arg0, double arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_d_div(__mpfr_struct.getCPtr(arg0), arg0, arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_sqr(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_sqr(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_const_pi(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_const_pi(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_const_log2(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_const_log2(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_const_euler(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_const_euler(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_const_catalan(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_const_catalan(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_agm(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_agm(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_log(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_log(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_log2(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_log2(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_log10(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_log10(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_log1p(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_log1p(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_log_ui(__mpfr_struct arg0, long arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_log_ui(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static int mpfr_exp(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_exp(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_exp2(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_exp2(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_exp10(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_exp10(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_expm1(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_expm1(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_eint(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_eint(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_li2(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_li2(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_cmp(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_cmp(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_cmp3(__mpfr_struct arg0, __mpfr_struct arg1, int arg2) {
    return arblibJNI.mpfr_cmp3(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2);
  }

  public static int mpfr_cmp_d(__mpfr_struct arg0, double arg1) {
    return arblibJNI.mpfr_cmp_d(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int mpfr_cmp_ld(__mpfr_struct arg0, SWIGTYPE_p_long_double arg1) {
    return arblibJNI.mpfr_cmp_ld(__mpfr_struct.getCPtr(arg0), arg0, SWIGTYPE_p_long_double.getCPtr(arg1));
  }

  public static int mpfr_cmp_ui(__mpfr_struct arg0, long arg1) {
    return arblibJNI.mpfr_cmp_ui(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int mpfr_cmp_si(__mpfr_struct arg0, int arg1) {
    return arblibJNI.mpfr_cmp_si(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static int mpfr_cmp_ui_2exp(__mpfr_struct arg0, long arg1, int arg2) {
    return arblibJNI.mpfr_cmp_ui_2exp(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static int mpfr_cmp_si_2exp(__mpfr_struct arg0, int arg1, int arg2) {
    return arblibJNI.mpfr_cmp_si_2exp(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2);
  }

  public static int mpfr_cmpabs(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_cmpabs(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_cmpabs_ui(__mpfr_struct arg0, long arg1) {
    return arblibJNI.mpfr_cmpabs_ui(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static void mpfr_reldiff(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    arblibJNI.mpfr_reldiff(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_eq(__mpfr_struct arg0, __mpfr_struct arg1, long arg2) {
    return arblibJNI.mpfr_eq(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2);
  }

  public static int mpfr_sgn(__mpfr_struct arg0) {
    return arblibJNI.mpfr_sgn(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_mul_2exp(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_mul_2exp(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_div_2exp(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_div_2exp(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_mul_2ui(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_mul_2ui(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_div_2ui(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_div_2ui(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_mul_2si(__mpfr_struct arg0, __mpfr_struct arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_mul_2si(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_div_2si(__mpfr_struct arg0, __mpfr_struct arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_div_2si(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_rint(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_rint(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_roundeven(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_roundeven(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_round(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_round(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_trunc(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_trunc(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_ceil(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_ceil(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_floor(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_floor(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_rint_roundeven(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_rint_roundeven(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_rint_round(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_rint_round(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_rint_trunc(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_rint_trunc(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_rint_ceil(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_rint_ceil(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_rint_floor(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_rint_floor(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_frac(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_frac(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_modf(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_modf(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_remquo(__mpfr_struct arg0, SWIGTYPE_p_long arg1, __mpfr_struct arg2, __mpfr_struct arg3, mpfr_rnd_t arg4) {
    return arblibJNI.mpfr_remquo(__mpfr_struct.getCPtr(arg0), arg0, SWIGTYPE_p_long.getCPtr(arg1), __mpfr_struct.getCPtr(arg2), arg2, __mpfr_struct.getCPtr(arg3), arg3, arg4.swigValue());
  }

  public static int mpfr_remainder(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_remainder(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_fmod(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_fmod(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_fmodquo(__mpfr_struct arg0, SWIGTYPE_p_long arg1, __mpfr_struct arg2, __mpfr_struct arg3, mpfr_rnd_t arg4) {
    return arblibJNI.mpfr_fmodquo(__mpfr_struct.getCPtr(arg0), arg0, SWIGTYPE_p_long.getCPtr(arg1), __mpfr_struct.getCPtr(arg2), arg2, __mpfr_struct.getCPtr(arg3), arg3, arg4.swigValue());
  }

  public static int mpfr_fits_ulong_p(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_fits_ulong_p(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_fits_slong_p(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_fits_slong_p(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_fits_uint_p(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_fits_uint_p(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_fits_sint_p(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_fits_sint_p(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_fits_ushort_p(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_fits_ushort_p(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_fits_sshort_p(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_fits_sshort_p(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_fits_uintmax_p(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_fits_uintmax_p(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static int mpfr_fits_intmax_p(__mpfr_struct arg0, mpfr_rnd_t arg1) {
    return arblibJNI.mpfr_fits_intmax_p(__mpfr_struct.getCPtr(arg0), arg0, arg1.swigValue());
  }

  public static void mpfr_extract(__mpz_struct arg0, __mpfr_struct arg1, long arg2) {
    arblibJNI.mpfr_extract(__mpz_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2);
  }

  public static void mpfr_swap(__mpfr_struct arg0, __mpfr_struct arg1) {
    arblibJNI.mpfr_swap(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static void mpfr_dump(__mpfr_struct arg0) {
    arblibJNI.mpfr_dump(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_nan_p(__mpfr_struct arg0) {
    return arblibJNI.mpfr_nan_p(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_inf_p(__mpfr_struct arg0) {
    return arblibJNI.mpfr_inf_p(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_number_p(__mpfr_struct arg0) {
    return arblibJNI.mpfr_number_p(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_integer_p(__mpfr_struct arg0) {
    return arblibJNI.mpfr_integer_p(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_zero_p(__mpfr_struct arg0) {
    return arblibJNI.mpfr_zero_p(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_regular_p(__mpfr_struct arg0) {
    return arblibJNI.mpfr_regular_p(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_greater_p(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_greater_p(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_greaterequal_p(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_greaterequal_p(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_less_p(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_less_p(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_lessequal_p(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_lessequal_p(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_lessgreater_p(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_lessgreater_p(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_equal_p(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_equal_p(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_unordered_p(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_unordered_p(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_atanh(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_atanh(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_acosh(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_acosh(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_asinh(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_asinh(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_cosh(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_cosh(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_sinh(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_sinh(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_tanh(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_tanh(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_sinh_cosh(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_sinh_cosh(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_sech(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_sech(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_csch(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_csch(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_coth(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_coth(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_acos(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_acos(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_asin(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_asin(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_atan(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_atan(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_sin(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_sin(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_sin_cos(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_sin_cos(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_cos(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_cos(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_tan(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_tan(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_atan2(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_atan2(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_sec(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_sec(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_csc(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_csc(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_cot(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_cot(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_hypot(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_hypot(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_erf(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_erf(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_erfc(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_erfc(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_cbrt(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_cbrt(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_root(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_root(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_rootn_ui(__mpfr_struct arg0, __mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_rootn_ui(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static int mpfr_gamma(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_gamma(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_gamma_inc(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_gamma_inc(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_beta(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_beta(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_lngamma(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_lngamma(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_lgamma(__mpfr_struct arg0, SWIGTYPE_p_int arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_lgamma(__mpfr_struct.getCPtr(arg0), arg0, SWIGTYPE_p_int.getCPtr(arg1), __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_digamma(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_digamma(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_zeta(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_zeta(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_zeta_ui(__mpfr_struct arg0, long arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_zeta_ui(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static int mpfr_fac_ui(__mpfr_struct arg0, long arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_fac_ui(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static int mpfr_j0(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_j0(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_j1(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_j1(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_jn(__mpfr_struct arg0, int arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_jn(__mpfr_struct.getCPtr(arg0), arg0, arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_y0(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_y0(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_y1(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_y1(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_yn(__mpfr_struct arg0, int arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_yn(__mpfr_struct.getCPtr(arg0), arg0, arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_ai(__mpfr_struct arg0, __mpfr_struct arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_ai(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, arg2.swigValue());
  }

  public static int mpfr_min(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_min(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_max(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_max(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_dim(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_dim(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_mul_z(__mpfr_struct arg0, __mpfr_struct arg1, __mpz_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_mul_z(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_div_z(__mpfr_struct arg0, __mpfr_struct arg1, __mpz_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_div_z(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_add_z(__mpfr_struct arg0, __mpfr_struct arg1, __mpz_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_add_z(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_sub_z(__mpfr_struct arg0, __mpfr_struct arg1, __mpz_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_sub_z(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpz_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_z_sub(__mpfr_struct arg0, __mpz_struct arg1, __mpfr_struct arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_z_sub(__mpfr_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, arg3.swigValue());
  }

  public static int mpfr_cmp_z(__mpfr_struct arg0, __mpz_struct arg1) {
    return arblibJNI.mpfr_cmp_z(__mpfr_struct.getCPtr(arg0), arg0, __mpz_struct.getCPtr(arg1), arg1);
  }

  public static int mpfr_fma(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, __mpfr_struct arg3, mpfr_rnd_t arg4) {
    return arblibJNI.mpfr_fma(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, __mpfr_struct.getCPtr(arg3), arg3, arg4.swigValue());
  }

  public static int mpfr_fms(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, __mpfr_struct arg3, mpfr_rnd_t arg4) {
    return arblibJNI.mpfr_fms(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, __mpfr_struct.getCPtr(arg3), arg3, arg4.swigValue());
  }

  public static int mpfr_fmma(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, __mpfr_struct arg3, __mpfr_struct arg4, mpfr_rnd_t arg5) {
    return arblibJNI.mpfr_fmma(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, __mpfr_struct.getCPtr(arg3), arg3, __mpfr_struct.getCPtr(arg4), arg4, arg5.swigValue());
  }

  public static int mpfr_fmms(__mpfr_struct arg0, __mpfr_struct arg1, __mpfr_struct arg2, __mpfr_struct arg3, __mpfr_struct arg4, mpfr_rnd_t arg5) {
    return arblibJNI.mpfr_fmms(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1, __mpfr_struct.getCPtr(arg2), arg2, __mpfr_struct.getCPtr(arg3), arg3, __mpfr_struct.getCPtr(arg4), arg4, arg5.swigValue());
  }

  public static int mpfr_sum(__mpfr_struct arg0, SWIGTYPE_p_p___mpfr_struct arg1, long arg2, mpfr_rnd_t arg3) {
    return arblibJNI.mpfr_sum(__mpfr_struct.getCPtr(arg0), arg0, SWIGTYPE_p_p___mpfr_struct.getCPtr(arg1), arg2, arg3.swigValue());
  }

  public static int mpfr_dot(__mpfr_struct arg0, SWIGTYPE_p_p___mpfr_struct arg1, SWIGTYPE_p_p___mpfr_struct arg2, long arg3, mpfr_rnd_t arg4) {
    return arblibJNI.mpfr_dot(__mpfr_struct.getCPtr(arg0), arg0, SWIGTYPE_p_p___mpfr_struct.getCPtr(arg1), SWIGTYPE_p_p___mpfr_struct.getCPtr(arg2), arg3, arg4.swigValue());
  }

  public static void mpfr_free_cache() {
    arblibJNI.mpfr_free_cache();
  }

  public static void mpfr_free_cache2(mpfr_free_cache_t arg0) {
    arblibJNI.mpfr_free_cache2(arg0.swigValue());
  }

  public static void mpfr_free_pool() {
    arblibJNI.mpfr_free_pool();
  }

  public static int mpfr_mp_memory_cleanup() {
    return arblibJNI.mpfr_mp_memory_cleanup();
  }

  public static int mpfr_subnormalize(__mpfr_struct arg0, int arg1, mpfr_rnd_t arg2) {
    return arblibJNI.mpfr_subnormalize(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2.swigValue());
  }

  public static int mpfr_strtofr(__mpfr_struct arg0, String arg1, SWIGTYPE_p_p_char arg2, int arg3, mpfr_rnd_t arg4) {
    return arblibJNI.mpfr_strtofr(__mpfr_struct.getCPtr(arg0), arg0, arg1, SWIGTYPE_p_p_char.getCPtr(arg2), arg3, arg4.swigValue());
  }

  public static void mpfr_round_nearest_away_begin(__mpfr_struct arg0) {
    arblibJNI.mpfr_round_nearest_away_begin(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_round_nearest_away_end(__mpfr_struct arg0, int arg1) {
    return arblibJNI.mpfr_round_nearest_away_end(__mpfr_struct.getCPtr(arg0), arg0, arg1);
  }

  public static long mpfr_custom_get_size(int arg0) {
    return arblibJNI.mpfr_custom_get_size(arg0);
  }

  public static void mpfr_custom_init(SWIGTYPE_p_void arg0, int arg1) {
    arblibJNI.mpfr_custom_init(SWIGTYPE_p_void.getCPtr(arg0), arg1);
  }

  public static SWIGTYPE_p_void mpfr_custom_get_significand(__mpfr_struct arg0) {
    long cPtr = arblibJNI.mpfr_custom_get_significand(__mpfr_struct.getCPtr(arg0), arg0);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static int mpfr_custom_get_exp(__mpfr_struct arg0) {
    return arblibJNI.mpfr_custom_get_exp(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static void mpfr_custom_move(__mpfr_struct arg0, SWIGTYPE_p_void arg1) {
    arblibJNI.mpfr_custom_move(__mpfr_struct.getCPtr(arg0), arg0, SWIGTYPE_p_void.getCPtr(arg1));
  }

  public static void mpfr_custom_init_set(__mpfr_struct arg0, int arg1, int arg2, int arg3, SWIGTYPE_p_void arg4) {
    arblibJNI.mpfr_custom_init_set(__mpfr_struct.getCPtr(arg0), arg0, arg1, arg2, arg3, SWIGTYPE_p_void.getCPtr(arg4));
  }

  public static int mpfr_custom_get_kind(__mpfr_struct arg0) {
    return arblibJNI.mpfr_custom_get_kind(__mpfr_struct.getCPtr(arg0), arg0);
  }

  public static int mpfr_total_order_p(__mpfr_struct arg0, __mpfr_struct arg1) {
    return arblibJNI.mpfr_total_order_p(__mpfr_struct.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static long __gmpfr_inp_str(__mpfr_struct arg0, _IO_FILE arg1, int arg2, mpfr_rnd_t arg3) {
    return arblibJNI.__gmpfr_inp_str(__mpfr_struct.getCPtr(arg0), arg0, _IO_FILE.getCPtr(arg1), arg1, arg2, arg3.swigValue());
  }

  public static long __gmpfr_out_str(_IO_FILE arg0, int arg1, long arg2, __mpfr_struct arg3, mpfr_rnd_t arg4) {
    return arblibJNI.__gmpfr_out_str(_IO_FILE.getCPtr(arg0), arg0, arg1, arg2, __mpfr_struct.getCPtr(arg3), arg3, arg4.swigValue());
  }

  public static int __gmpfr_fprintf(_IO_FILE arg0, String arg1) {
    return arblibJNI.__gmpfr_fprintf(_IO_FILE.getCPtr(arg0), arg0, arg1);
  }

  public static int __gmpfr_fpif_export(_IO_FILE arg0, __mpfr_struct arg1) {
    return arblibJNI.__gmpfr_fpif_export(_IO_FILE.getCPtr(arg0), arg0, __mpfr_struct.getCPtr(arg1), arg1);
  }

  public static int __gmpfr_fpif_import(__mpfr_struct arg0, _IO_FILE arg1) {
    return arblibJNI.__gmpfr_fpif_import(__mpfr_struct.getCPtr(arg0), arg0, _IO_FILE.getCPtr(arg1), arg1);
  }

  public static int __bswap_16(int __bsx) {
    return arblibJNI.__bswap_16(__bsx);
  }

  public static long __bswap_32(long __bsx) {
    return arblibJNI.__bswap_32(__bsx);
  }

  public static java.math.BigInteger __bswap_64(java.math.BigInteger __bsx) {
    return arblibJNI.__bswap_64(__bsx);
  }

  public static int __uint16_identity(int __x) {
    return arblibJNI.__uint16_identity(__x);
  }

  public static long __uint32_identity(long __x) {
    return arblibJNI.__uint32_identity(__x);
  }

  public static java.math.BigInteger __uint64_identity(java.math.BigInteger __x) {
    return arblibJNI.__uint64_identity(__x);
  }

  public static int select(int __nfds, fd_set __readfds, fd_set __writefds, fd_set __exceptfds, timeval __timeout) {
    return arblibJNI.select(__nfds, fd_set.getCPtr(__readfds), __readfds, fd_set.getCPtr(__writefds), __writefds, fd_set.getCPtr(__exceptfds), __exceptfds, timeval.getCPtr(__timeout), __timeout);
  }

  public static int pselect(int __nfds, fd_set __readfds, fd_set __writefds, fd_set __exceptfds, timespec __timeout, __sigset_t __sigmask) {
    return arblibJNI.pselect(__nfds, fd_set.getCPtr(__readfds), __readfds, fd_set.getCPtr(__writefds), __writefds, fd_set.getCPtr(__exceptfds), __exceptfds, timespec.getCPtr(__timeout), __timeout, __sigset_t.getCPtr(__sigmask), __sigmask);
  }

  public static long __ctype_get_mb_cur_max() {
    return arblibJNI.__ctype_get_mb_cur_max();
  }

  public static double atof(String __nptr) {
    return arblibJNI.atof(__nptr);
  }

  public static int atoi(String __nptr) {
    return arblibJNI.atoi(__nptr);
  }

  public static int atol(String __nptr) {
    return arblibJNI.atol(__nptr);
  }

  public static long atoll(String __nptr) {
    return arblibJNI.atoll(__nptr);
  }

  public static double strtod(String __nptr, SWIGTYPE_p_p_char __endptr) {
    return arblibJNI.strtod(__nptr, SWIGTYPE_p_p_char.getCPtr(__endptr));
  }

  public static float strtof(String __nptr, SWIGTYPE_p_p_char __endptr) {
    return arblibJNI.strtof(__nptr, SWIGTYPE_p_p_char.getCPtr(__endptr));
  }

  public static SWIGTYPE_p_long_double strtold(String __nptr, SWIGTYPE_p_p_char __endptr) {
    return new SWIGTYPE_p_long_double(arblibJNI.strtold(__nptr, SWIGTYPE_p_p_char.getCPtr(__endptr)), true);
  }

  public static int strtol(String __nptr, SWIGTYPE_p_p_char __endptr, int __base) {
    return arblibJNI.strtol(__nptr, SWIGTYPE_p_p_char.getCPtr(__endptr), __base);
  }

  public static long strtoul(String __nptr, SWIGTYPE_p_p_char __endptr, int __base) {
    return arblibJNI.strtoul(__nptr, SWIGTYPE_p_p_char.getCPtr(__endptr), __base);
  }

  public static long strtoq(String __nptr, SWIGTYPE_p_p_char __endptr, int __base) {
    return arblibJNI.strtoq(__nptr, SWIGTYPE_p_p_char.getCPtr(__endptr), __base);
  }

  public static java.math.BigInteger strtouq(String __nptr, SWIGTYPE_p_p_char __endptr, int __base) {
    return arblibJNI.strtouq(__nptr, SWIGTYPE_p_p_char.getCPtr(__endptr), __base);
  }

  public static long strtoll(String __nptr, SWIGTYPE_p_p_char __endptr, int __base) {
    return arblibJNI.strtoll(__nptr, SWIGTYPE_p_p_char.getCPtr(__endptr), __base);
  }

  public static java.math.BigInteger strtoull(String __nptr, SWIGTYPE_p_p_char __endptr, int __base) {
    return arblibJNI.strtoull(__nptr, SWIGTYPE_p_p_char.getCPtr(__endptr), __base);
  }

  public static String l64a(int __n) {
    return arblibJNI.l64a(__n);
  }

  public static int a64l(String __s) {
    return arblibJNI.a64l(__s);
  }

  public static int random() {
    return arblibJNI.random();
  }

  public static void srandom(long __seed) {
    arblibJNI.srandom(__seed);
  }

  public static String initstate(long __seed, String __statebuf, long __statelen) {
    return arblibJNI.initstate(__seed, __statebuf, __statelen);
  }

  public static String setstate(String __statebuf) {
    return arblibJNI.setstate(__statebuf);
  }

  public static int random_r(random_data __buf, SWIGTYPE_p_int __result) {
    return arblibJNI.random_r(random_data.getCPtr(__buf), __buf, SWIGTYPE_p_int.getCPtr(__result));
  }

  public static int srandom_r(long __seed, random_data __buf) {
    return arblibJNI.srandom_r(__seed, random_data.getCPtr(__buf), __buf);
  }

  public static int initstate_r(long __seed, String __statebuf, long __statelen, random_data __buf) {
    return arblibJNI.initstate_r(__seed, __statebuf, __statelen, random_data.getCPtr(__buf), __buf);
  }

  public static int setstate_r(String __statebuf, random_data __buf) {
    return arblibJNI.setstate_r(__statebuf, random_data.getCPtr(__buf), __buf);
  }

  public static int rand() {
    return arblibJNI.rand();
  }

  public static void srand(long __seed) {
    arblibJNI.srand(__seed);
  }

  public static int rand_r(SWIGTYPE_p_unsigned_int __seed) {
    return arblibJNI.rand_r(SWIGTYPE_p_unsigned_int.getCPtr(__seed));
  }

  public static double drand48() {
    return arblibJNI.drand48();
  }

  public static double erand48(SWIGTYPE_p_unsigned_short __xsubi) {
    return arblibJNI.erand48(SWIGTYPE_p_unsigned_short.getCPtr(__xsubi));
  }

  public static int lrand48() {
    return arblibJNI.lrand48();
  }

  public static int nrand48(SWIGTYPE_p_unsigned_short __xsubi) {
    return arblibJNI.nrand48(SWIGTYPE_p_unsigned_short.getCPtr(__xsubi));
  }

  public static int mrand48() {
    return arblibJNI.mrand48();
  }

  public static int jrand48(SWIGTYPE_p_unsigned_short __xsubi) {
    return arblibJNI.jrand48(SWIGTYPE_p_unsigned_short.getCPtr(__xsubi));
  }

  public static void srand48(int __seedval) {
    arblibJNI.srand48(__seedval);
  }

  public static SWIGTYPE_p_unsigned_short seed48(SWIGTYPE_p_unsigned_short __seed16v) {
    long cPtr = arblibJNI.seed48(SWIGTYPE_p_unsigned_short.getCPtr(__seed16v));
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static void lcong48(SWIGTYPE_p_unsigned_short __param) {
    arblibJNI.lcong48(SWIGTYPE_p_unsigned_short.getCPtr(__param));
  }

  public static int drand48_r(drand48_data __buffer, SWIGTYPE_p_double __result) {
    return arblibJNI.drand48_r(drand48_data.getCPtr(__buffer), __buffer, SWIGTYPE_p_double.getCPtr(__result));
  }

  public static int erand48_r(SWIGTYPE_p_unsigned_short __xsubi, drand48_data __buffer, SWIGTYPE_p_double __result) {
    return arblibJNI.erand48_r(SWIGTYPE_p_unsigned_short.getCPtr(__xsubi), drand48_data.getCPtr(__buffer), __buffer, SWIGTYPE_p_double.getCPtr(__result));
  }

  public static int lrand48_r(drand48_data __buffer, SWIGTYPE_p_long __result) {
    return arblibJNI.lrand48_r(drand48_data.getCPtr(__buffer), __buffer, SWIGTYPE_p_long.getCPtr(__result));
  }

  public static int nrand48_r(SWIGTYPE_p_unsigned_short __xsubi, drand48_data __buffer, SWIGTYPE_p_long __result) {
    return arblibJNI.nrand48_r(SWIGTYPE_p_unsigned_short.getCPtr(__xsubi), drand48_data.getCPtr(__buffer), __buffer, SWIGTYPE_p_long.getCPtr(__result));
  }

  public static int mrand48_r(drand48_data __buffer, SWIGTYPE_p_long __result) {
    return arblibJNI.mrand48_r(drand48_data.getCPtr(__buffer), __buffer, SWIGTYPE_p_long.getCPtr(__result));
  }

  public static int jrand48_r(SWIGTYPE_p_unsigned_short __xsubi, drand48_data __buffer, SWIGTYPE_p_long __result) {
    return arblibJNI.jrand48_r(SWIGTYPE_p_unsigned_short.getCPtr(__xsubi), drand48_data.getCPtr(__buffer), __buffer, SWIGTYPE_p_long.getCPtr(__result));
  }

  public static int srand48_r(int __seedval, drand48_data __buffer) {
    return arblibJNI.srand48_r(__seedval, drand48_data.getCPtr(__buffer), __buffer);
  }

  public static int seed48_r(SWIGTYPE_p_unsigned_short __seed16v, drand48_data __buffer) {
    return arblibJNI.seed48_r(SWIGTYPE_p_unsigned_short.getCPtr(__seed16v), drand48_data.getCPtr(__buffer), __buffer);
  }

  public static int lcong48_r(SWIGTYPE_p_unsigned_short __param, drand48_data __buffer) {
    return arblibJNI.lcong48_r(SWIGTYPE_p_unsigned_short.getCPtr(__param), drand48_data.getCPtr(__buffer), __buffer);
  }

  public static SWIGTYPE_p_void malloc(long __size) {
    long cPtr = arblibJNI.malloc(__size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void calloc(long __nmemb, long __size) {
    long cPtr = arblibJNI.calloc(__nmemb, __size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void realloc(SWIGTYPE_p_void __ptr, long __size) {
    long cPtr = arblibJNI.realloc(SWIGTYPE_p_void.getCPtr(__ptr), __size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void reallocarray(SWIGTYPE_p_void __ptr, long __nmemb, long __size) {
    long cPtr = arblibJNI.reallocarray(SWIGTYPE_p_void.getCPtr(__ptr), __nmemb, __size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void free(SWIGTYPE_p_void __ptr) {
    arblibJNI.free(SWIGTYPE_p_void.getCPtr(__ptr));
  }

  public static SWIGTYPE_p_void alloca(long __size) {
    long cPtr = arblibJNI.alloca(__size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void valloc(long __size) {
    long cPtr = arblibJNI.valloc(__size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static int posix_memalign(SWIGTYPE_p_p_void __memptr, long __alignment, long __size) {
    return arblibJNI.posix_memalign(SWIGTYPE_p_p_void.getCPtr(__memptr), __alignment, __size);
  }

  public static void abort() {
    arblibJNI.abort();
  }

  public static int atexit(SWIGTYPE_p_f_void__void __func) {
    return arblibJNI.atexit(SWIGTYPE_p_f_void__void.getCPtr(__func));
  }

  public static int on_exit(SWIGTYPE_p_f_int_p_void__void __func, SWIGTYPE_p_void __arg) {
    return arblibJNI.on_exit(SWIGTYPE_p_f_int_p_void__void.getCPtr(__func), SWIGTYPE_p_void.getCPtr(__arg));
  }

  public static void exit(int __status) {
    arblibJNI.exit(__status);
  }

  public static void _Exit(int __status) {
    arblibJNI._Exit(__status);
  }

  public static String getenv(String __name) {
    return arblibJNI.getenv(__name);
  }

  public static int putenv(String __string) {
    return arblibJNI.putenv(__string);
  }

  public static int setenv(String __name, String __value, int __replace) {
    return arblibJNI.setenv(__name, __value, __replace);
  }

  public static int unsetenv(String __name) {
    return arblibJNI.unsetenv(__name);
  }

  public static int clearenv() {
    return arblibJNI.clearenv();
  }

  public static String mktemp(String __template) {
    return arblibJNI.mktemp(__template);
  }

  public static int mkstemp(String __template) {
    return arblibJNI.mkstemp(__template);
  }

  public static int mkstemps(String __template, int __suffixlen) {
    return arblibJNI.mkstemps(__template, __suffixlen);
  }

  public static String mkdtemp(String __template) {
    return arblibJNI.mkdtemp(__template);
  }

  public static int system(String __command) {
    return arblibJNI.system(__command);
  }

  public static String realpath(String __name, String __resolved) {
    return arblibJNI.realpath(__name, __resolved);
  }

  public static SWIGTYPE_p_void bsearch(SWIGTYPE_p_void __key, SWIGTYPE_p_void __base, long __nmemb, long __size, SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int __compar) {
    long cPtr = arblibJNI.bsearch(SWIGTYPE_p_void.getCPtr(__key), SWIGTYPE_p_void.getCPtr(__base), __nmemb, __size, SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int.getCPtr(__compar));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void qsort(SWIGTYPE_p_void __base, long __nmemb, long __size, SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int __compar) {
    arblibJNI.qsort(SWIGTYPE_p_void.getCPtr(__base), __nmemb, __size, SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int.getCPtr(__compar));
  }

  public static int abs(int __x) {
    return arblibJNI.abs(__x);
  }

  public static int labs(int __x) {
    return arblibJNI.labs(__x);
  }

  public static long llabs(long __x) {
    return arblibJNI.llabs(__x);
  }

  public static div_t div(int __numer, int __denom) {
    return new div_t(arblibJNI.div(__numer, __denom), true);
  }

  public static ldiv_t ldiv(int __numer, int __denom) {
    return new ldiv_t(arblibJNI.ldiv(__numer, __denom), true);
  }

  public static lldiv_t lldiv(long __numer, long __denom) {
    return new lldiv_t(arblibJNI.lldiv(__numer, __denom), true);
  }

  public static String ecvt(double __value, int __ndigit, SWIGTYPE_p_int __decpt, SWIGTYPE_p_int __sign) {
    return arblibJNI.ecvt(__value, __ndigit, SWIGTYPE_p_int.getCPtr(__decpt), SWIGTYPE_p_int.getCPtr(__sign));
  }

  public static String fcvt(double __value, int __ndigit, SWIGTYPE_p_int __decpt, SWIGTYPE_p_int __sign) {
    return arblibJNI.fcvt(__value, __ndigit, SWIGTYPE_p_int.getCPtr(__decpt), SWIGTYPE_p_int.getCPtr(__sign));
  }

  public static String gcvt(double __value, int __ndigit, String __buf) {
    return arblibJNI.gcvt(__value, __ndigit, __buf);
  }

  public static String qecvt(SWIGTYPE_p_long_double __value, int __ndigit, SWIGTYPE_p_int __decpt, SWIGTYPE_p_int __sign) {
    return arblibJNI.qecvt(SWIGTYPE_p_long_double.getCPtr(__value), __ndigit, SWIGTYPE_p_int.getCPtr(__decpt), SWIGTYPE_p_int.getCPtr(__sign));
  }

  public static String qfcvt(SWIGTYPE_p_long_double __value, int __ndigit, SWIGTYPE_p_int __decpt, SWIGTYPE_p_int __sign) {
    return arblibJNI.qfcvt(SWIGTYPE_p_long_double.getCPtr(__value), __ndigit, SWIGTYPE_p_int.getCPtr(__decpt), SWIGTYPE_p_int.getCPtr(__sign));
  }

  public static String qgcvt(SWIGTYPE_p_long_double __value, int __ndigit, String __buf) {
    return arblibJNI.qgcvt(SWIGTYPE_p_long_double.getCPtr(__value), __ndigit, __buf);
  }

  public static int ecvt_r(double __value, int __ndigit, SWIGTYPE_p_int __decpt, SWIGTYPE_p_int __sign, String __buf, long __len) {
    return arblibJNI.ecvt_r(__value, __ndigit, SWIGTYPE_p_int.getCPtr(__decpt), SWIGTYPE_p_int.getCPtr(__sign), __buf, __len);
  }

  public static int fcvt_r(double __value, int __ndigit, SWIGTYPE_p_int __decpt, SWIGTYPE_p_int __sign, String __buf, long __len) {
    return arblibJNI.fcvt_r(__value, __ndigit, SWIGTYPE_p_int.getCPtr(__decpt), SWIGTYPE_p_int.getCPtr(__sign), __buf, __len);
  }

  public static int qecvt_r(SWIGTYPE_p_long_double __value, int __ndigit, SWIGTYPE_p_int __decpt, SWIGTYPE_p_int __sign, String __buf, long __len) {
    return arblibJNI.qecvt_r(SWIGTYPE_p_long_double.getCPtr(__value), __ndigit, SWIGTYPE_p_int.getCPtr(__decpt), SWIGTYPE_p_int.getCPtr(__sign), __buf, __len);
  }

  public static int qfcvt_r(SWIGTYPE_p_long_double __value, int __ndigit, SWIGTYPE_p_int __decpt, SWIGTYPE_p_int __sign, String __buf, long __len) {
    return arblibJNI.qfcvt_r(SWIGTYPE_p_long_double.getCPtr(__value), __ndigit, SWIGTYPE_p_int.getCPtr(__decpt), SWIGTYPE_p_int.getCPtr(__sign), __buf, __len);
  }

  public static int mblen(String __s, long __n) {
    return arblibJNI.mblen(__s, __n);
  }

  public static int mbtowc(SWIGTYPE_p_wchar_t __pwc, String __s, long __n) {
    return arblibJNI.mbtowc(SWIGTYPE_p_wchar_t.getCPtr(__pwc), __s, __n);
  }

  public static int wctomb(String __s, SWIGTYPE_p_wchar_t __wchar) {
    return arblibJNI.wctomb(__s, SWIGTYPE_p_wchar_t.getCPtr(__wchar));
  }

  public static long mbstowcs(SWIGTYPE_p_wchar_t __pwcs, String __s, long __n) {
    return arblibJNI.mbstowcs(SWIGTYPE_p_wchar_t.getCPtr(__pwcs), __s, __n);
  }

  public static long wcstombs(String __s, SWIGTYPE_p_wchar_t __pwcs, long __n) {
    return arblibJNI.wcstombs(__s, SWIGTYPE_p_wchar_t.getCPtr(__pwcs), __n);
  }

  public static int rpmatch(String __response) {
    return arblibJNI.rpmatch(__response);
  }

  public static int getsubopt(SWIGTYPE_p_p_char __optionp, SWIGTYPE_p_p_char __tokens, SWIGTYPE_p_p_char __valuep) {
    return arblibJNI.getsubopt(SWIGTYPE_p_p_char.getCPtr(__optionp), SWIGTYPE_p_p_char.getCPtr(__tokens), SWIGTYPE_p_p_char.getCPtr(__valuep));
  }

  public static int getloadavg(SWIGTYPE_p_double __loadavg, int __nelem) {
    return arblibJNI.getloadavg(SWIGTYPE_p_double.getCPtr(__loadavg), __nelem);
  }

  public static SWIGTYPE_p_int getRec_word_tab() {
    long cPtr = arblibJNI.rec_word_tab_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void setFlint_version(String value) {
    arblibJNI.flint_version_set(value);
  }

  public static String getFlint_version() {
    return arblibJNI.flint_version_get();
  }

  public static SWIGTYPE_p_void flint_malloc(long size) {
    long cPtr = arblibJNI.flint_malloc(size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void flint_realloc(SWIGTYPE_p_void ptr, long size) {
    long cPtr = arblibJNI.flint_realloc(SWIGTYPE_p_void.getCPtr(ptr), size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void flint_calloc(long num, long size) {
    long cPtr = arblibJNI.flint_calloc(num, size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void flint_free(SWIGTYPE_p_void ptr) {
    arblibJNI.flint_free(SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static void flint_register_cleanup_function(SWIGTYPE_p_f_void__void cleanup_function) {
    arblibJNI.flint_register_cleanup_function(SWIGTYPE_p_f_void__void.getCPtr(cleanup_function));
  }

  public static void flint_cleanup() {
    arblibJNI.flint_cleanup();
  }

  public static void flint_cleanup_master() {
    arblibJNI.flint_cleanup_master();
  }

  public static void __flint_set_memory_functions(SWIGTYPE_p_f_size_t__p_void alloc_func, SWIGTYPE_p_f_size_t_size_t__p_void calloc_func, SWIGTYPE_p_f_p_void_size_t__p_void realloc_func, SWIGTYPE_p_f_p_void__void free_func) {
    arblibJNI.__flint_set_memory_functions(SWIGTYPE_p_f_size_t__p_void.getCPtr(alloc_func), SWIGTYPE_p_f_size_t_size_t__p_void.getCPtr(calloc_func), SWIGTYPE_p_f_p_void_size_t__p_void.getCPtr(realloc_func), SWIGTYPE_p_f_p_void__void.getCPtr(free_func));
  }

  public static void flint_abort() {
    arblibJNI.flint_abort();
  }

  public static void flint_set_abort(SWIGTYPE_p_f_void__void func) {
    arblibJNI.flint_set_abort(SWIGTYPE_p_f_void__void.getCPtr(func));
  }

  public static int flint_get_num_threads() {
    return arblibJNI.flint_get_num_threads();
  }

  public static void flint_set_num_threads(int num_threads) {
    arblibJNI.flint_set_num_threads(num_threads);
  }

  public static void _flint_set_num_workers(int num_workers) {
    arblibJNI._flint_set_num_workers(num_workers);
  }

  public static int flint_set_num_workers(int num_workers) {
    return arblibJNI.flint_set_num_workers(num_workers);
  }

  public static void flint_reset_num_workers(int max_workers) {
    arblibJNI.flint_reset_num_workers(max_workers);
  }

  public static int flint_set_thread_affinity(SWIGTYPE_p_int cpus, int length) {
    return arblibJNI.flint_set_thread_affinity(SWIGTYPE_p_int.getCPtr(cpus), length);
  }

  public static int flint_restore_thread_affinity() {
    return arblibJNI.flint_restore_thread_affinity();
  }

  public static int flint_test_multiplier() {
    return arblibJNI.flint_test_multiplier();
  }

  public static void flint_randinit(flint_rand_s state) {
    arblibJNI.flint_randinit(flint_rand_s.getCPtr(state), state);
  }

  public static void flint_randseed(flint_rand_s state, long seed1, long seed2) {
    arblibJNI.flint_randseed(flint_rand_s.getCPtr(state), state, seed1, seed2);
  }

  public static void flint_get_randseed(SWIGTYPE_p_unsigned_long seed1, SWIGTYPE_p_unsigned_long seed2, flint_rand_s state) {
    arblibJNI.flint_get_randseed(SWIGTYPE_p_unsigned_long.getCPtr(seed1), SWIGTYPE_p_unsigned_long.getCPtr(seed2), flint_rand_s.getCPtr(state), state);
  }

  public static void _flint_rand_init_gmp(flint_rand_s state) {
    arblibJNI._flint_rand_init_gmp(flint_rand_s.getCPtr(state), state);
  }

  public static void flint_randclear(flint_rand_s state) {
    arblibJNI.flint_randclear(flint_rand_s.getCPtr(state), state);
  }

  public static flint_rand_s flint_rand_alloc() {
    long cPtr = arblibJNI.flint_rand_alloc();
    return (cPtr == 0) ? null : new flint_rand_s(cPtr, false);
  }

  public static void flint_rand_free(flint_rand_s state) {
    arblibJNI.flint_rand_free(flint_rand_s.getCPtr(state), state);
  }

  public static SWIGTYPE_p_unsigned_char get__flint_clz_tab() {
    long cPtr = arblibJNI.__flint_clz_tab_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static long FLINT_BIT_COUNT(long x) {
    return arblibJNI.FLINT_BIT_COUNT(x);
  }

  public static void mpn_tdiv_q(SWIGTYPE_p_unsigned_long qp, SWIGTYPE_p_unsigned_long np, int nn, SWIGTYPE_p_unsigned_long dp, int dn) {
    arblibJNI.mpn_tdiv_q(SWIGTYPE_p_unsigned_long.getCPtr(qp), SWIGTYPE_p_unsigned_long.getCPtr(np), nn, SWIGTYPE_p_unsigned_long.getCPtr(dp), dn);
  }

  public static int parse_fmt(SWIGTYPE_p_int floating, String fmt) {
    return arblibJNI.parse_fmt(SWIGTYPE_p_int.getCPtr(floating), fmt);
  }

  public static int flint_printf(String str) {
    return arblibJNI.flint_printf(str);
  }

  public static int flint_vprintf(String str, SWIGTYPE_p_va_list ap) {
    return arblibJNI.flint_vprintf(str, SWIGTYPE_p_va_list.getCPtr(ap));
  }

  public static int flint_fprintf(_IO_FILE f, String str) {
    return arblibJNI.flint_fprintf(_IO_FILE.getCPtr(f), f, str);
  }

  public static int flint_sprintf(String s, String str) {
    return arblibJNI.flint_sprintf(s, str);
  }

  public static int flint_scanf(String str) {
    return arblibJNI.flint_scanf(str);
  }

  public static int flint_fscanf(_IO_FILE f, String str) {
    return arblibJNI.flint_fscanf(_IO_FILE.getCPtr(f), f, str);
  }

  public static int flint_sscanf(String s, String str) {
    return arblibJNI.flint_sscanf(s, str);
  }

  public static int flint_mul_sizes(int x, int y) {
    return arblibJNI.flint_mul_sizes(x, y);
  }

  public static void flint_throw(flint_err_t exc, String msg) {
    arblibJNI.flint_throw(exc.swigValue(), msg);
  }

  public static int __fpclassify(double __value) {
    return arblibJNI.__fpclassify(__value);
  }

  public static int __signbit(double __value) {
    return arblibJNI.__signbit(__value);
  }

  public static int __isinf(double __value) {
    return arblibJNI.__isinf(__value);
  }

  public static int __finite(double __value) {
    return arblibJNI.__finite(__value);
  }

  public static int __isnan(double __value) {
    return arblibJNI.__isnan(__value);
  }

  public static int __iseqsig(double __x, double __y) {
    return arblibJNI.__iseqsig(__x, __y);
  }

  public static int __issignaling(double __value) {
    return arblibJNI.__issignaling(__value);
  }

  public static double acos(double __x) {
    return arblibJNI.acos(__x);
  }

  public static double __acos(double __x) {
    return arblibJNI.__acos(__x);
  }

  public static double asin(double __x) {
    return arblibJNI.asin(__x);
  }

  public static double __asin(double __x) {
    return arblibJNI.__asin(__x);
  }

  public static double atan(double __x) {
    return arblibJNI.atan(__x);
  }

  public static double __atan(double __x) {
    return arblibJNI.__atan(__x);
  }

  public static double atan2(double __y, double __x) {
    return arblibJNI.atan2(__y, __x);
  }

  public static double __atan2(double __y, double __x) {
    return arblibJNI.__atan2(__y, __x);
  }

  public static double cos(double __x) {
    return arblibJNI.cos(__x);
  }

  public static double __cos(double __x) {
    return arblibJNI.__cos(__x);
  }

  public static double sin(double __x) {
    return arblibJNI.sin(__x);
  }

  public static double __sin(double __x) {
    return arblibJNI.__sin(__x);
  }

  public static double tan(double __x) {
    return arblibJNI.tan(__x);
  }

  public static double __tan(double __x) {
    return arblibJNI.__tan(__x);
  }

  public static double cosh(double __x) {
    return arblibJNI.cosh(__x);
  }

  public static double __cosh(double __x) {
    return arblibJNI.__cosh(__x);
  }

  public static double sinh(double __x) {
    return arblibJNI.sinh(__x);
  }

  public static double __sinh(double __x) {
    return arblibJNI.__sinh(__x);
  }

  public static double tanh(double __x) {
    return arblibJNI.tanh(__x);
  }

  public static double __tanh(double __x) {
    return arblibJNI.__tanh(__x);
  }

  public static double acosh(double __x) {
    return arblibJNI.acosh(__x);
  }

  public static double __acosh(double __x) {
    return arblibJNI.__acosh(__x);
  }

  public static double asinh(double __x) {
    return arblibJNI.asinh(__x);
  }

  public static double __asinh(double __x) {
    return arblibJNI.__asinh(__x);
  }

  public static double atanh(double __x) {
    return arblibJNI.atanh(__x);
  }

  public static double __atanh(double __x) {
    return arblibJNI.__atanh(__x);
  }

  public static double exp(double __x) {
    return arblibJNI.exp(__x);
  }

  public static double __exp(double __x) {
    return arblibJNI.__exp(__x);
  }

  public static double frexp(double __x, SWIGTYPE_p_int __exponent) {
    return arblibJNI.frexp(__x, SWIGTYPE_p_int.getCPtr(__exponent));
  }

  public static double __frexp(double __x, SWIGTYPE_p_int __exponent) {
    return arblibJNI.__frexp(__x, SWIGTYPE_p_int.getCPtr(__exponent));
  }

  public static double ldexp(double __x, int __exponent) {
    return arblibJNI.ldexp(__x, __exponent);
  }

  public static double __ldexp(double __x, int __exponent) {
    return arblibJNI.__ldexp(__x, __exponent);
  }

  public static double log(double __x) {
    return arblibJNI.log(__x);
  }

  public static double __log(double __x) {
    return arblibJNI.__log(__x);
  }

  public static double log10(double __x) {
    return arblibJNI.log10(__x);
  }

  public static double __log10(double __x) {
    return arblibJNI.__log10(__x);
  }

  public static double modf(double __x, SWIGTYPE_p_double __iptr) {
    return arblibJNI.modf(__x, SWIGTYPE_p_double.getCPtr(__iptr));
  }

  public static double __modf(double __x, SWIGTYPE_p_double __iptr) {
    return arblibJNI.__modf(__x, SWIGTYPE_p_double.getCPtr(__iptr));
  }

  public static double expm1(double __x) {
    return arblibJNI.expm1(__x);
  }

  public static double __expm1(double __x) {
    return arblibJNI.__expm1(__x);
  }

  public static double log1p(double __x) {
    return arblibJNI.log1p(__x);
  }

  public static double __log1p(double __x) {
    return arblibJNI.__log1p(__x);
  }

  public static double logb(double __x) {
    return arblibJNI.logb(__x);
  }

  public static double __logb(double __x) {
    return arblibJNI.__logb(__x);
  }

  public static double exp2(double __x) {
    return arblibJNI.exp2(__x);
  }

  public static double __exp2(double __x) {
    return arblibJNI.__exp2(__x);
  }

  public static double log2(double __x) {
    return arblibJNI.log2(__x);
  }

  public static double __log2(double __x) {
    return arblibJNI.__log2(__x);
  }

  public static double pow(double __x, double __y) {
    return arblibJNI.pow(__x, __y);
  }

  public static double __pow(double __x, double __y) {
    return arblibJNI.__pow(__x, __y);
  }

  public static double sqrt(double __x) {
    return arblibJNI.sqrt(__x);
  }

  public static double __sqrt(double __x) {
    return arblibJNI.__sqrt(__x);
  }

  public static double hypot(double __x, double __y) {
    return arblibJNI.hypot(__x, __y);
  }

  public static double __hypot(double __x, double __y) {
    return arblibJNI.__hypot(__x, __y);
  }

  public static double cbrt(double __x) {
    return arblibJNI.cbrt(__x);
  }

  public static double __cbrt(double __x) {
    return arblibJNI.__cbrt(__x);
  }

  public static double ceil(double __x) {
    return arblibJNI.ceil(__x);
  }

  public static double __ceil(double __x) {
    return arblibJNI.__ceil(__x);
  }

  public static double fabs(double __x) {
    return arblibJNI.fabs(__x);
  }

  public static double __fabs(double __x) {
    return arblibJNI.__fabs(__x);
  }

  public static double floor(double __x) {
    return arblibJNI.floor(__x);
  }

  public static double __floor(double __x) {
    return arblibJNI.__floor(__x);
  }

  public static double fmod(double __x, double __y) {
    return arblibJNI.fmod(__x, __y);
  }

  public static double __fmod(double __x, double __y) {
    return arblibJNI.__fmod(__x, __y);
  }

  public static int isinf(double __value) {
    return arblibJNI.isinf(__value);
  }

  public static int finite(double __value) {
    return arblibJNI.finite(__value);
  }

  public static double drem(double __x, double __y) {
    return arblibJNI.drem(__x, __y);
  }

  public static double __drem(double __x, double __y) {
    return arblibJNI.__drem(__x, __y);
  }

  public static double significand(double __x) {
    return arblibJNI.significand(__x);
  }

  public static double __significand(double __x) {
    return arblibJNI.__significand(__x);
  }

  public static double copysign(double __x, double __y) {
    return arblibJNI.copysign(__x, __y);
  }

  public static double __copysign(double __x, double __y) {
    return arblibJNI.__copysign(__x, __y);
  }

  public static double nan(String __tagb) {
    return arblibJNI.nan(__tagb);
  }

  public static double __nan(String __tagb) {
    return arblibJNI.__nan(__tagb);
  }

  public static int isnan(double __value) {
    return arblibJNI.isnan(__value);
  }

  public static double j0(double arg0) {
    return arblibJNI.j0(arg0);
  }

  public static double __j0(double arg0) {
    return arblibJNI.__j0(arg0);
  }

  public static double j1(double arg0) {
    return arblibJNI.j1(arg0);
  }

  public static double __j1(double arg0) {
    return arblibJNI.__j1(arg0);
  }

  public static double jn(int arg0, double arg1) {
    return arblibJNI.jn(arg0, arg1);
  }

  public static double __jn(int arg0, double arg1) {
    return arblibJNI.__jn(arg0, arg1);
  }

  public static double y0(double arg0) {
    return arblibJNI.y0(arg0);
  }

  public static double __y0(double arg0) {
    return arblibJNI.__y0(arg0);
  }

  public static double y1(double arg0) {
    return arblibJNI.y1(arg0);
  }

  public static double __y1(double arg0) {
    return arblibJNI.__y1(arg0);
  }

  public static double yn(int arg0, double arg1) {
    return arblibJNI.yn(arg0, arg1);
  }

  public static double __yn(int arg0, double arg1) {
    return arblibJNI.__yn(arg0, arg1);
  }

  public static double erf(double arg0) {
    return arblibJNI.erf(arg0);
  }

  public static double __erf(double arg0) {
    return arblibJNI.__erf(arg0);
  }

  public static double erfc(double arg0) {
    return arblibJNI.erfc(arg0);
  }

  public static double __erfc(double arg0) {
    return arblibJNI.__erfc(arg0);
  }

  public static double lgamma(double arg0) {
    return arblibJNI.lgamma(arg0);
  }

  public static double __lgamma(double arg0) {
    return arblibJNI.__lgamma(arg0);
  }

  public static double tgamma(double arg0) {
    return arblibJNI.tgamma(arg0);
  }

  public static double __tgamma(double arg0) {
    return arblibJNI.__tgamma(arg0);
  }

  public static double gamma(double arg0) {
    return arblibJNI.gamma(arg0);
  }

  public static double __gamma(double arg0) {
    return arblibJNI.__gamma(arg0);
  }

  public static double lgamma_r(double arg0, SWIGTYPE_p_int __signgamp) {
    return arblibJNI.lgamma_r(arg0, SWIGTYPE_p_int.getCPtr(__signgamp));
  }

  public static double __lgamma_r(double arg0, SWIGTYPE_p_int __signgamp) {
    return arblibJNI.__lgamma_r(arg0, SWIGTYPE_p_int.getCPtr(__signgamp));
  }

  public static double rint(double __x) {
    return arblibJNI.rint(__x);
  }

  public static double __rint(double __x) {
    return arblibJNI.__rint(__x);
  }

  public static double nextafter(double __x, double __y) {
    return arblibJNI.nextafter(__x, __y);
  }

  public static double __nextafter(double __x, double __y) {
    return arblibJNI.__nextafter(__x, __y);
  }

  public static double nexttoward(double __x, SWIGTYPE_p_long_double __y) {
    return arblibJNI.nexttoward(__x, SWIGTYPE_p_long_double.getCPtr(__y));
  }

  public static double __nexttoward(double __x, SWIGTYPE_p_long_double __y) {
    return arblibJNI.__nexttoward(__x, SWIGTYPE_p_long_double.getCPtr(__y));
  }

  public static double remainder(double __x, double __y) {
    return arblibJNI.remainder(__x, __y);
  }

  public static double __remainder(double __x, double __y) {
    return arblibJNI.__remainder(__x, __y);
  }

  public static double scalbn(double __x, int __n) {
    return arblibJNI.scalbn(__x, __n);
  }

  public static double __scalbn(double __x, int __n) {
    return arblibJNI.__scalbn(__x, __n);
  }

  public static int ilogb(double __x) {
    return arblibJNI.ilogb(__x);
  }

  public static int __ilogb(double __x) {
    return arblibJNI.__ilogb(__x);
  }

  public static double scalbln(double __x, int __n) {
    return arblibJNI.scalbln(__x, __n);
  }

  public static double __scalbln(double __x, int __n) {
    return arblibJNI.__scalbln(__x, __n);
  }

  public static double nearbyint(double __x) {
    return arblibJNI.nearbyint(__x);
  }

  public static double __nearbyint(double __x) {
    return arblibJNI.__nearbyint(__x);
  }

  public static double round(double __x) {
    return arblibJNI.round(__x);
  }

  public static double __round(double __x) {
    return arblibJNI.__round(__x);
  }

  public static double trunc(double __x) {
    return arblibJNI.trunc(__x);
  }

  public static double __trunc(double __x) {
    return arblibJNI.__trunc(__x);
  }

  public static double remquo(double __x, double __y, SWIGTYPE_p_int __quo) {
    return arblibJNI.remquo(__x, __y, SWIGTYPE_p_int.getCPtr(__quo));
  }

  public static double __remquo(double __x, double __y, SWIGTYPE_p_int __quo) {
    return arblibJNI.__remquo(__x, __y, SWIGTYPE_p_int.getCPtr(__quo));
  }

  public static int lrint(double __x) {
    return arblibJNI.lrint(__x);
  }

  public static int __lrint(double __x) {
    return arblibJNI.__lrint(__x);
  }

  public static long llrint(double __x) {
    return arblibJNI.llrint(__x);
  }

  public static long __llrint(double __x) {
    return arblibJNI.__llrint(__x);
  }

  public static int lround(double __x) {
    return arblibJNI.lround(__x);
  }

  public static int __lround(double __x) {
    return arblibJNI.__lround(__x);
  }

  public static long llround(double __x) {
    return arblibJNI.llround(__x);
  }

  public static long __llround(double __x) {
    return arblibJNI.__llround(__x);
  }

  public static double fdim(double __x, double __y) {
    return arblibJNI.fdim(__x, __y);
  }

  public static double __fdim(double __x, double __y) {
    return arblibJNI.__fdim(__x, __y);
  }

  public static double fmax(double __x, double __y) {
    return arblibJNI.fmax(__x, __y);
  }

  public static double __fmax(double __x, double __y) {
    return arblibJNI.__fmax(__x, __y);
  }

  public static double fmin(double __x, double __y) {
    return arblibJNI.fmin(__x, __y);
  }

  public static double __fmin(double __x, double __y) {
    return arblibJNI.__fmin(__x, __y);
  }

  public static double fma(double __x, double __y, double __z) {
    return arblibJNI.fma(__x, __y, __z);
  }

  public static double __fma(double __x, double __y, double __z) {
    return arblibJNI.__fma(__x, __y, __z);
  }

  public static double scalb(double __x, double __n) {
    return arblibJNI.scalb(__x, __n);
  }

  public static double __scalb(double __x, double __n) {
    return arblibJNI.__scalb(__x, __n);
  }

  public static void setSigngam(int value) {
    arblibJNI.signgam_set(value);
  }

  public static int getSigngam() {
    return arblibJNI.signgam_get();
  }

  public static void n_primes_init(n_primes_struct iter) {
    arblibJNI.n_primes_init(n_primes_struct.getCPtr(iter), iter);
  }

  public static void n_primes_clear(n_primes_struct iter) {
    arblibJNI.n_primes_clear(n_primes_struct.getCPtr(iter), iter);
  }

  public static void n_primes_extend_small(n_primes_struct iter, long bound) {
    arblibJNI.n_primes_extend_small(n_primes_struct.getCPtr(iter), iter, bound);
  }

  public static void n_primes_sieve_range(n_primes_struct iter, long a, long b) {
    arblibJNI.n_primes_sieve_range(n_primes_struct.getCPtr(iter), iter, a, b);
  }

  public static void n_primes_jump_after(n_primes_struct iter, long n) {
    arblibJNI.n_primes_jump_after(n_primes_struct.getCPtr(iter), iter, n);
  }

  public static long n_primes_next(n_primes_struct iter) {
    return arblibJNI.n_primes_next(n_primes_struct.getCPtr(iter), iter);
  }

  public static SWIGTYPE_p_unsigned_int getFlint_primes_small() {
    long cPtr = arblibJNI.flint_primes_small_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static void set_flint_primes(SWIGTYPE_p_p_unsigned_long value) {
    arblibJNI._flint_primes_set(SWIGTYPE_p_p_unsigned_long.getCPtr(value));
  }

  public static SWIGTYPE_p_p_unsigned_long get_flint_primes() {
    long cPtr = arblibJNI._flint_primes_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_unsigned_long(cPtr, false);
  }

  public static void set_flint_prime_inverses(SWIGTYPE_p_p_double value) {
    arblibJNI._flint_prime_inverses_set(SWIGTYPE_p_p_double.getCPtr(value));
  }

  public static SWIGTYPE_p_p_double get_flint_prime_inverses() {
    long cPtr = arblibJNI._flint_prime_inverses_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_double(cPtr, false);
  }

  public static void set_flint_primes_used(int value) {
    arblibJNI._flint_primes_used_set(value);
  }

  public static int get_flint_primes_used() {
    return arblibJNI._flint_primes_used_get();
  }

  public static void n_compute_primes(long num_primes) {
    arblibJNI.n_compute_primes(num_primes);
  }

  public static void n_cleanup_primes() {
    arblibJNI.n_cleanup_primes();
  }

  public static SWIGTYPE_p_unsigned_long n_primes_arr_readonly(long n) {
    long cPtr = arblibJNI.n_primes_arr_readonly(n);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_double n_prime_inverses_arr_readonly(long n) {
    long cPtr = arblibJNI.n_prime_inverses_arr_readonly(n);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static long n_randlimb(flint_rand_s state) {
    return arblibJNI.n_randlimb(flint_rand_s.getCPtr(state), state);
  }

  public static long n_randint(flint_rand_s state, long limit) {
    return arblibJNI.n_randint(flint_rand_s.getCPtr(state), state, limit);
  }

  public static long n_urandint(flint_rand_s state, long limit) {
    return arblibJNI.n_urandint(flint_rand_s.getCPtr(state), state, limit);
  }

  public static long n_randbits(flint_rand_s state, long bits) {
    return arblibJNI.n_randbits(flint_rand_s.getCPtr(state), state, bits);
  }

  public static long n_randtest_bits(flint_rand_s state, int bits) {
    return arblibJNI.n_randtest_bits(flint_rand_s.getCPtr(state), state, bits);
  }

  public static long n_randtest(flint_rand_s state) {
    return arblibJNI.n_randtest(flint_rand_s.getCPtr(state), state);
  }

  public static long n_randtest_not_zero(flint_rand_s state) {
    return arblibJNI.n_randtest_not_zero(flint_rand_s.getCPtr(state), state);
  }

  public static long n_randprime(flint_rand_s state, long bits, int proved) {
    return arblibJNI.n_randprime(flint_rand_s.getCPtr(state), state, bits, proved);
  }

  public static long n_randtest_prime(flint_rand_s state, int proved) {
    return arblibJNI.n_randtest_prime(flint_rand_s.getCPtr(state), state, proved);
  }

  public static long n_pow(long n, long exp) {
    return arblibJNI.n_pow(n, exp);
  }

  public static long n_flog(long n, long b) {
    return arblibJNI.n_flog(n, b);
  }

  public static long n_clog(long n, long b) {
    return arblibJNI.n_clog(n, b);
  }

  public static double n_precompute_inverse(long n) {
    return arblibJNI.n_precompute_inverse(n);
  }

  public static long n_preinvert_limb(long n) {
    return arblibJNI.n_preinvert_limb(n);
  }

  public static long n_mod_precomp(long a, long n, double ninv) {
    return arblibJNI.n_mod_precomp(a, n, ninv);
  }

  public static long n_mod2_precomp(long a, long n, double ninv) {
    return arblibJNI.n_mod2_precomp(a, n, ninv);
  }

  public static long n_divrem2_precomp(SWIGTYPE_p_unsigned_long q, long a, long n, double npre) {
    return arblibJNI.n_divrem2_precomp(SWIGTYPE_p_unsigned_long.getCPtr(q), a, n, npre);
  }

  public static long n_divrem2_preinv(SWIGTYPE_p_unsigned_long q, long a, long n, long ninv) {
    return arblibJNI.n_divrem2_preinv(SWIGTYPE_p_unsigned_long.getCPtr(q), a, n, ninv);
  }

  public static long n_div2_preinv(long a, long n, long ninv) {
    return arblibJNI.n_div2_preinv(a, n, ninv);
  }

  public static long n_mod2_preinv(long a, long n, long ninv) {
    return arblibJNI.n_mod2_preinv(a, n, ninv);
  }

  public static long n_ll_mod_preinv(long a_hi, long a_lo, long n, long ninv) {
    return arblibJNI.n_ll_mod_preinv(a_hi, a_lo, n, ninv);
  }

  public static long n_lll_mod_preinv(long a_hi, long a_mi, long a_lo, long n, long ninv) {
    return arblibJNI.n_lll_mod_preinv(a_hi, a_mi, a_lo, n, ninv);
  }

  public static long n_mulmod_precomp(long a, long b, long n, double ninv) {
    return arblibJNI.n_mulmod_precomp(a, b, n, ninv);
  }

  public static long n_mulmod2_preinv(long a, long b, long n, long ninv) {
    return arblibJNI.n_mulmod2_preinv(a, b, n, ninv);
  }

  public static long n_mulmod2(long a, long b, long n) {
    return arblibJNI.n_mulmod2(a, b, n);
  }

  public static long n_mulmod_preinv(long a, long b, long n, long ninv, long norm) {
    return arblibJNI.n_mulmod_preinv(a, b, n, ninv, norm);
  }

  public static long n_powmod_ui_precomp(long a, long exp, long n, double npre) {
    return arblibJNI.n_powmod_ui_precomp(a, exp, n, npre);
  }

  public static long n_powmod_precomp(long a, int exp, long n, double npre) {
    return arblibJNI.n_powmod_precomp(a, exp, n, npre);
  }

  public static long n_powmod(long a, int exp, long n) {
    return arblibJNI.n_powmod(a, exp, n);
  }

  public static long n_powmod2_preinv(long a, int exp, long n, long ninv) {
    return arblibJNI.n_powmod2_preinv(a, exp, n, ninv);
  }

  public static long n_powmod2_ui_preinv(long a, long exp, long n, long ninv) {
    return arblibJNI.n_powmod2_ui_preinv(a, exp, n, ninv);
  }

  public static long n_powmod_ui_preinv(long a, long exp, long n, long ninv, long norm) {
    return arblibJNI.n_powmod_ui_preinv(a, exp, n, ninv, norm);
  }

  public static long n_powmod2(long a, int exp, long n) {
    return arblibJNI.n_powmod2(a, exp, n);
  }

  public static long n_addmod(long x, long y, long n) {
    return arblibJNI.n_addmod(x, y, n);
  }

  public static long n_submod(long x, long y, long n) {
    return arblibJNI.n_submod(x, y, n);
  }

  public static long n_negmod(long x, long n) {
    return arblibJNI.n_negmod(x, n);
  }

  public static long n_sqrtmod(long a, long p) {
    return arblibJNI.n_sqrtmod(a, p);
  }

  public static int n_sqrtmod_2pow(SWIGTYPE_p_p_unsigned_long sqrt, long a, int exp) {
    return arblibJNI.n_sqrtmod_2pow(SWIGTYPE_p_p_unsigned_long.getCPtr(sqrt), a, exp);
  }

  public static int n_sqrtmod_primepow(SWIGTYPE_p_p_unsigned_long sqrt, long a, long p, int exp) {
    return arblibJNI.n_sqrtmod_primepow(SWIGTYPE_p_p_unsigned_long.getCPtr(sqrt), a, p, exp);
  }

  public static int n_sqrtmodn(SWIGTYPE_p_p_unsigned_long sqrt, long a, n_factor_t fac) {
    return arblibJNI.n_sqrtmodn(SWIGTYPE_p_p_unsigned_long.getCPtr(sqrt), a, n_factor_t.getCPtr(fac), fac);
  }

  public static long n_gcd(long x, long y) {
    return arblibJNI.n_gcd(x, y);
  }

  public static long n_xgcd(SWIGTYPE_p_unsigned_long a, SWIGTYPE_p_unsigned_long b, long x, long y) {
    return arblibJNI.n_xgcd(SWIGTYPE_p_unsigned_long.getCPtr(a), SWIGTYPE_p_unsigned_long.getCPtr(b), x, y);
  }

  public static long n_gcdinv(SWIGTYPE_p_unsigned_long a, long x, long y) {
    return arblibJNI.n_gcdinv(SWIGTYPE_p_unsigned_long.getCPtr(a), x, y);
  }

  public static long n_invmod(long x, long y) {
    return arblibJNI.n_invmod(x, y);
  }

  public static long n_CRT(long r1, long m1, long r2, long m2) {
    return arblibJNI.n_CRT(r1, m1, r2, m2);
  }

  public static long n_revbin(long in, long bits) {
    return arblibJNI.n_revbin(in, bits);
  }

  public static int n_jacobi(int x, long y) {
    return arblibJNI.n_jacobi(x, y);
  }

  public static int n_jacobi_unsigned(long x, long y) {
    return arblibJNI.n_jacobi_unsigned(x, y);
  }

  public static long n_sqrt(long a) {
    return arblibJNI.n_sqrt(a);
  }

  public static long n_sqrtrem(SWIGTYPE_p_unsigned_long r, long a) {
    return arblibJNI.n_sqrtrem(SWIGTYPE_p_unsigned_long.getCPtr(r), a);
  }

  public static int n_is_square(long x) {
    return arblibJNI.n_is_square(x);
  }

  public static double n_cbrt_estimate(double a) {
    return arblibJNI.n_cbrt_estimate(a);
  }

  public static long n_cbrt(long a) {
    return arblibJNI.n_cbrt(a);
  }

  public static long n_cbrt_binary_search(long x) {
    return arblibJNI.n_cbrt_binary_search(x);
  }

  public static long n_cbrt_newton_iteration(long n) {
    return arblibJNI.n_cbrt_newton_iteration(n);
  }

  public static long n_cbrt_chebyshev_approx(long n) {
    return arblibJNI.n_cbrt_chebyshev_approx(n);
  }

  public static long n_cbrtrem(SWIGTYPE_p_unsigned_long remainder, long n) {
    return arblibJNI.n_cbrtrem(SWIGTYPE_p_unsigned_long.getCPtr(remainder), n);
  }

  public static int n_is_perfect_power235(long n) {
    return arblibJNI.n_is_perfect_power235(n);
  }

  public static int n_is_perfect_power(SWIGTYPE_p_unsigned_long root, long n) {
    return arblibJNI.n_is_perfect_power(SWIGTYPE_p_unsigned_long.getCPtr(root), n);
  }

  public static int n_is_oddprime_small(long n) {
    return arblibJNI.n_is_oddprime_small(n);
  }

  public static int n_is_oddprime_binary(long n) {
    return arblibJNI.n_is_oddprime_binary(n);
  }

  public static int n_is_probabprime_fermat(long n, long i) {
    return arblibJNI.n_is_probabprime_fermat(n, i);
  }

  public static int n_is_probabprime_fibonacci(long n) {
    return arblibJNI.n_is_probabprime_fibonacci(n);
  }

  public static int n_is_probabprime_lucas(long n) {
    return arblibJNI.n_is_probabprime_lucas(n);
  }

  public static int n_is_probabprime_BPSW(long n) {
    return arblibJNI.n_is_probabprime_BPSW(n);
  }

  public static int n_is_strong_probabprime_precomp(long n, double npre, long a, long d) {
    return arblibJNI.n_is_strong_probabprime_precomp(n, npre, a, d);
  }

  public static int n_is_strong_probabprime2_preinv(long n, long ninv, long a, long d) {
    return arblibJNI.n_is_strong_probabprime2_preinv(n, ninv, a, d);
  }

  public static int n_is_probabprime(long n) {
    return arblibJNI.n_is_probabprime(n);
  }

  public static int n_is_prime_pseudosquare(long n) {
    return arblibJNI.n_is_prime_pseudosquare(n);
  }

  public static int n_is_prime_pocklington(long n, long iterations) {
    return arblibJNI.n_is_prime_pocklington(n, iterations);
  }

  public static int n_is_prime(long n) {
    return arblibJNI.n_is_prime(n);
  }

  public static long n_nth_prime(long n) {
    return arblibJNI.n_nth_prime(n);
  }

  public static void n_nth_prime_bounds(SWIGTYPE_p_unsigned_long lo, SWIGTYPE_p_unsigned_long hi, long n) {
    arblibJNI.n_nth_prime_bounds(SWIGTYPE_p_unsigned_long.getCPtr(lo), SWIGTYPE_p_unsigned_long.getCPtr(hi), n);
  }

  public static long n_prime_pi(long n) {
    return arblibJNI.n_prime_pi(n);
  }

  public static void n_prime_pi_bounds(SWIGTYPE_p_unsigned_long lo, SWIGTYPE_p_unsigned_long hi, long n) {
    arblibJNI.n_prime_pi_bounds(SWIGTYPE_p_unsigned_long.getCPtr(lo), SWIGTYPE_p_unsigned_long.getCPtr(hi), n);
  }

  public static int n_remove(SWIGTYPE_p_unsigned_long n, long p) {
    return arblibJNI.n_remove(SWIGTYPE_p_unsigned_long.getCPtr(n), p);
  }

  public static int n_remove2_precomp(SWIGTYPE_p_unsigned_long n, long p, double ppre) {
    return arblibJNI.n_remove2_precomp(SWIGTYPE_p_unsigned_long.getCPtr(n), p, ppre);
  }

  public static void n_factor_init(n_factor_t factors) {
    arblibJNI.n_factor_init(n_factor_t.getCPtr(factors), factors);
  }

  public static void n_factor_insert(n_factor_t factors, long p, long exp) {
    arblibJNI.n_factor_insert(n_factor_t.getCPtr(factors), factors, p, exp);
  }

  public static long n_factor_trial_range(n_factor_t factors, long n, long start, long num_primes) {
    return arblibJNI.n_factor_trial_range(n_factor_t.getCPtr(factors), factors, n, start, num_primes);
  }

  public static long n_factor_trial_partial(n_factor_t factors, long n, SWIGTYPE_p_unsigned_long prod, long num_primes, long limit) {
    return arblibJNI.n_factor_trial_partial(n_factor_t.getCPtr(factors), factors, n, SWIGTYPE_p_unsigned_long.getCPtr(prod), num_primes, limit);
  }

  public static long n_factor_trial(n_factor_t factors, long n, long num_primes) {
    return arblibJNI.n_factor_trial(n_factor_t.getCPtr(factors), factors, n, num_primes);
  }

  public static long n_factor_partial(n_factor_t factors, long n, long limit, int proved) {
    return arblibJNI.n_factor_partial(n_factor_t.getCPtr(factors), factors, n, limit, proved);
  }

  public static long n_factor_power235(SWIGTYPE_p_unsigned_long exp, long n) {
    return arblibJNI.n_factor_power235(SWIGTYPE_p_unsigned_long.getCPtr(exp), n);
  }

  public static long n_factor_one_line(long n, long iters) {
    return arblibJNI.n_factor_one_line(n, iters);
  }

  public static long n_factor_lehman(long n) {
    return arblibJNI.n_factor_lehman(n);
  }

  public static long n_factor_SQUFOF(long n, long iters) {
    return arblibJNI.n_factor_SQUFOF(n, iters);
  }

  public static void n_factor(n_factor_t factors, long n, int proved) {
    arblibJNI.n_factor(n_factor_t.getCPtr(factors), factors, n, proved);
  }

  public static long n_factor_pp1(long n, long B1, long c) {
    return arblibJNI.n_factor_pp1(n, B1, c);
  }

  public static long n_factor_pp1_wrapper(long n) {
    return arblibJNI.n_factor_pp1_wrapper(n);
  }

  public static void n_factor_pp1_table_insert(int bits, int B1, int count) {
    arblibJNI.n_factor_pp1_table_insert(bits, B1, count);
  }

  public static int n_factor_pollard_brent_single(SWIGTYPE_p_unsigned_long factor, long n, long ninv, long ai, long xi, long normbits, long max_iters) {
    return arblibJNI.n_factor_pollard_brent_single(SWIGTYPE_p_unsigned_long.getCPtr(factor), n, ninv, ai, xi, normbits, max_iters);
  }

  public static int n_factor_pollard_brent(SWIGTYPE_p_unsigned_long factor, flint_rand_s state, long n_in, long max_tries, long max_iters) {
    return arblibJNI.n_factor_pollard_brent(SWIGTYPE_p_unsigned_long.getCPtr(factor), flint_rand_s.getCPtr(state), state, n_in, max_tries, max_iters);
  }

  public static int n_is_squarefree(long n) {
    return arblibJNI.n_is_squarefree(n);
  }

  public static int n_moebius_mu(long n) {
    return arblibJNI.n_moebius_mu(n);
  }

  public static void n_moebius_mu_vec(SWIGTYPE_p_int mu, long len) {
    arblibJNI.n_moebius_mu_vec(SWIGTYPE_p_int.getCPtr(mu), len);
  }

  public static long n_euler_phi(long n) {
    return arblibJNI.n_euler_phi(n);
  }

  public static int n_sizeinbase(long n, int base) {
    return arblibJNI.n_sizeinbase(n, base);
  }

  public static long n_nextprime(long n, int proved) {
    return arblibJNI.n_nextprime(n, proved);
  }

  public static long n_factorial_mod2_preinv(long n, long p, long pinv) {
    return arblibJNI.n_factorial_mod2_preinv(n, p, pinv);
  }

  public static long n_factorial_fast_mod2_preinv(long n, long p, long pinv) {
    return arblibJNI.n_factorial_fast_mod2_preinv(n, p, pinv);
  }

  public static long n_primitive_root_prime_prefactor(long p, n_factor_t factors) {
    return arblibJNI.n_primitive_root_prime_prefactor(p, n_factor_t.getCPtr(factors), factors);
  }

  public static long n_primitive_root_prime(long p) {
    return arblibJNI.n_primitive_root_prime(p);
  }

  public static long n_discrete_log_bsgs(long b, long a, long n) {
    return arblibJNI.n_discrete_log_bsgs(b, a, n);
  }

  public static long n_root_estimate(double a, int n) {
    return arblibJNI.n_root_estimate(a, n);
  }

  public static long n_rootrem(SWIGTYPE_p_unsigned_long remainder, long n, long root) {
    return arblibJNI.n_rootrem(SWIGTYPE_p_unsigned_long.getCPtr(remainder), n, root);
  }

  public static long n_root(long n, long root) {
    return arblibJNI.n_root(n, root);
  }

  public static void n_factor_ecm_double(SWIGTYPE_p_unsigned_long x, SWIGTYPE_p_unsigned_long z, long x0, long z0, long n, n_ecm_s n_ecm_inf) {
    arblibJNI.n_factor_ecm_double(SWIGTYPE_p_unsigned_long.getCPtr(x), SWIGTYPE_p_unsigned_long.getCPtr(z), x0, z0, n, n_ecm_s.getCPtr(n_ecm_inf), n_ecm_inf);
  }

  public static void n_factor_ecm_add(SWIGTYPE_p_unsigned_long x, SWIGTYPE_p_unsigned_long z, long x1, long z1, long x2, long z2, long x0, long z0, long n, n_ecm_s n_ecm_inf) {
    arblibJNI.n_factor_ecm_add(SWIGTYPE_p_unsigned_long.getCPtr(x), SWIGTYPE_p_unsigned_long.getCPtr(z), x1, z1, x2, z2, x0, z0, n, n_ecm_s.getCPtr(n_ecm_inf), n_ecm_inf);
  }

  public static void n_factor_ecm_mul_montgomery_ladder(SWIGTYPE_p_unsigned_long x, SWIGTYPE_p_unsigned_long z, long x0, long z0, long k, long n, n_ecm_s n_ecm_inf) {
    arblibJNI.n_factor_ecm_mul_montgomery_ladder(SWIGTYPE_p_unsigned_long.getCPtr(x), SWIGTYPE_p_unsigned_long.getCPtr(z), x0, z0, k, n, n_ecm_s.getCPtr(n_ecm_inf), n_ecm_inf);
  }

  public static int n_factor_ecm_select_curve(SWIGTYPE_p_unsigned_long f, long sig, long n, n_ecm_s n_ecm_inf) {
    return arblibJNI.n_factor_ecm_select_curve(SWIGTYPE_p_unsigned_long.getCPtr(f), sig, n, n_ecm_s.getCPtr(n_ecm_inf), n_ecm_inf);
  }

  public static int n_factor_ecm_stage_I(SWIGTYPE_p_unsigned_long f, SWIGTYPE_p_unsigned_long prime_array, long num, long B1, long n, n_ecm_s n_ecm_inf) {
    return arblibJNI.n_factor_ecm_stage_I(SWIGTYPE_p_unsigned_long.getCPtr(f), SWIGTYPE_p_unsigned_long.getCPtr(prime_array), num, B1, n, n_ecm_s.getCPtr(n_ecm_inf), n_ecm_inf);
  }

  public static int n_factor_ecm_stage_II(SWIGTYPE_p_unsigned_long f, long B1, long B2, long P, long n, n_ecm_s n_ecm_inf) {
    return arblibJNI.n_factor_ecm_stage_II(SWIGTYPE_p_unsigned_long.getCPtr(f), B1, B2, P, n, n_ecm_s.getCPtr(n_ecm_inf), n_ecm_inf);
  }

  public static int n_factor_ecm(SWIGTYPE_p_unsigned_long f, long curves, long B1, long B2, flint_rand_s state, long n) {
    return arblibJNI.n_factor_ecm(SWIGTYPE_p_unsigned_long.getCPtr(f), curves, B1, B2, flint_rand_s.getCPtr(state), state, n);
  }

  public static long n_mulmod_precomp_shoup(long w, long p) {
    return arblibJNI.n_mulmod_precomp_shoup(w, p);
  }

  public static long n_mulmod_shoup(long w, long t, long w_precomp, long p) {
    return arblibJNI.n_mulmod_shoup(w, t, w_precomp, p);
  }

  public static long _nmod_add(long a, long b, nmod_t mod) {
    return arblibJNI._nmod_add(a, b, nmod_t.getCPtr(mod), mod);
  }

  public static long _nmod_sub(long a, long b, nmod_t mod) {
    return arblibJNI._nmod_sub(a, b, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_add(long a, long b, nmod_t mod) {
    return arblibJNI.nmod_add(a, b, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_sub(long a, long b, nmod_t mod) {
    return arblibJNI.nmod_sub(a, b, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_neg(long a, nmod_t mod) {
    return arblibJNI.nmod_neg(a, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_mul(long a, long b, nmod_t mod) {
    return arblibJNI.nmod_mul(a, b, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_inv(long a, nmod_t mod) {
    return arblibJNI.nmod_inv(a, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_div(long a, long b, nmod_t mod) {
    return arblibJNI.nmod_div(a, b, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_pow_ui(long a, long exp, nmod_t mod) {
    return arblibJNI.nmod_pow_ui(a, exp, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_init(nmod_t mod, long n) {
    arblibJNI.nmod_init(nmod_t.getCPtr(mod), mod, n);
  }

  public static SWIGTYPE_p_unsigned_long _nmod_vec_init(int len) {
    long cPtr = arblibJNI._nmod_vec_init(len);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static void _nmod_vec_clear(SWIGTYPE_p_unsigned_long vec) {
    arblibJNI._nmod_vec_clear(SWIGTYPE_p_unsigned_long.getCPtr(vec));
  }

  public static void _nmod_vec_randtest(SWIGTYPE_p_unsigned_long vec, flint_rand_s state, int len, nmod_t mod) {
    arblibJNI._nmod_vec_randtest(SWIGTYPE_p_unsigned_long.getCPtr(vec), flint_rand_s.getCPtr(state), state, len, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_vec_zero(SWIGTYPE_p_unsigned_long vec, int len) {
    arblibJNI._nmod_vec_zero(SWIGTYPE_p_unsigned_long.getCPtr(vec), len);
  }

  public static long _nmod_vec_max_bits(SWIGTYPE_p_unsigned_long vec, int len) {
    return arblibJNI._nmod_vec_max_bits(SWIGTYPE_p_unsigned_long.getCPtr(vec), len);
  }

  public static void _nmod_vec_set(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long vec, int len) {
    arblibJNI._nmod_vec_set(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(vec), len);
  }

  public static void _nmod_vec_swap(SWIGTYPE_p_unsigned_long a, SWIGTYPE_p_unsigned_long b, int length) {
    arblibJNI._nmod_vec_swap(SWIGTYPE_p_unsigned_long.getCPtr(a), SWIGTYPE_p_unsigned_long.getCPtr(b), length);
  }

  public static int _nmod_vec_equal(SWIGTYPE_p_unsigned_long vec, SWIGTYPE_p_unsigned_long vec2, int len) {
    return arblibJNI._nmod_vec_equal(SWIGTYPE_p_unsigned_long.getCPtr(vec), SWIGTYPE_p_unsigned_long.getCPtr(vec2), len);
  }

  public static int _nmod_vec_is_zero(SWIGTYPE_p_unsigned_long vec, int len) {
    return arblibJNI._nmod_vec_is_zero(SWIGTYPE_p_unsigned_long.getCPtr(vec), len);
  }

  public static void _nmod_vec_reduce(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long vec, int len, nmod_t mod) {
    arblibJNI._nmod_vec_reduce(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(vec), len, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_vec_add(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long vec1, SWIGTYPE_p_unsigned_long vec2, int len, nmod_t mod) {
    arblibJNI._nmod_vec_add(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(vec1), SWIGTYPE_p_unsigned_long.getCPtr(vec2), len, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_vec_sub(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long vec1, SWIGTYPE_p_unsigned_long vec2, int len, nmod_t mod) {
    arblibJNI._nmod_vec_sub(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(vec1), SWIGTYPE_p_unsigned_long.getCPtr(vec2), len, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_vec_neg(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long vec, int len, nmod_t mod) {
    arblibJNI._nmod_vec_neg(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(vec), len, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_vec_scalar_mul_nmod(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long vec, int len, long c, nmod_t mod) {
    arblibJNI._nmod_vec_scalar_mul_nmod(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(vec), len, c, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_vec_scalar_mul_nmod_shoup(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long vec, int len, long c, nmod_t mod) {
    arblibJNI._nmod_vec_scalar_mul_nmod_shoup(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(vec), len, c, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_vec_scalar_addmul_nmod(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long vec, int len, long c, nmod_t mod) {
    arblibJNI._nmod_vec_scalar_addmul_nmod(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(vec), len, c, nmod_t.getCPtr(mod), mod);
  }

  public static int _nmod_vec_dot_bound_limbs(int len, nmod_t mod) {
    return arblibJNI._nmod_vec_dot_bound_limbs(len, nmod_t.getCPtr(mod), mod);
  }

  public static long _nmod_vec_dot(SWIGTYPE_p_unsigned_long vec1, SWIGTYPE_p_unsigned_long vec2, int len, nmod_t mod, int nlimbs) {
    return arblibJNI._nmod_vec_dot(SWIGTYPE_p_unsigned_long.getCPtr(vec1), SWIGTYPE_p_unsigned_long.getCPtr(vec2), len, nmod_t.getCPtr(mod), mod, nlimbs);
  }

  public static long _nmod_vec_dot_ptr(SWIGTYPE_p_unsigned_long vec1, SWIGTYPE_p_p_unsigned_long vec2, int offset, int len, nmod_t mod, int nlimbs) {
    return arblibJNI._nmod_vec_dot_ptr(SWIGTYPE_p_unsigned_long.getCPtr(vec1), SWIGTYPE_p_p_unsigned_long.getCPtr(vec2), offset, len, nmod_t.getCPtr(mod), mod, nlimbs);
  }

  public static void nmod_discrete_log_pohlig_hellman_init(nmod_discrete_log_pohlig_hellman_struct L) {
    arblibJNI.nmod_discrete_log_pohlig_hellman_init(nmod_discrete_log_pohlig_hellman_struct.getCPtr(L), L);
  }

  public static void nmod_discrete_log_pohlig_hellman_clear(nmod_discrete_log_pohlig_hellman_struct L) {
    arblibJNI.nmod_discrete_log_pohlig_hellman_clear(nmod_discrete_log_pohlig_hellman_struct.getCPtr(L), L);
  }

  public static double nmod_discrete_log_pohlig_hellman_precompute_prime(nmod_discrete_log_pohlig_hellman_struct L, long p) {
    return arblibJNI.nmod_discrete_log_pohlig_hellman_precompute_prime(nmod_discrete_log_pohlig_hellman_struct.getCPtr(L), L, p);
  }

  public static long nmod_discrete_log_pohlig_hellman_run(nmod_discrete_log_pohlig_hellman_struct L, long y) {
    return arblibJNI.nmod_discrete_log_pohlig_hellman_run(nmod_discrete_log_pohlig_hellman_struct.getCPtr(L), L, y);
  }

  public static long nmod_discrete_log_pohlig_hellman_primitive_root(nmod_discrete_log_pohlig_hellman_struct L) {
    return arblibJNI.nmod_discrete_log_pohlig_hellman_primitive_root(nmod_discrete_log_pohlig_hellman_struct.getCPtr(L), L);
  }

  public static int pthread_create(SWIGTYPE_p_unsigned_long __newthread, pthread_attr_t __attr, SWIGTYPE_p_f_p_void__p_void __start_routine, SWIGTYPE_p_void __arg) {
    return arblibJNI.pthread_create(SWIGTYPE_p_unsigned_long.getCPtr(__newthread), pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_f_p_void__p_void.getCPtr(__start_routine), SWIGTYPE_p_void.getCPtr(__arg));
  }

  public static void pthread_exit(SWIGTYPE_p_void __retval) {
    arblibJNI.pthread_exit(SWIGTYPE_p_void.getCPtr(__retval));
  }

  public static int pthread_join(long __th, SWIGTYPE_p_p_void __thread_return) {
    return arblibJNI.pthread_join(__th, SWIGTYPE_p_p_void.getCPtr(__thread_return));
  }

  public static int pthread_detach(long __th) {
    return arblibJNI.pthread_detach(__th);
  }

  public static long pthread_self() {
    return arblibJNI.pthread_self();
  }

  public static int pthread_equal(long __thread1, long __thread2) {
    return arblibJNI.pthread_equal(__thread1, __thread2);
  }

  public static int pthread_attr_init(pthread_attr_t __attr) {
    return arblibJNI.pthread_attr_init(pthread_attr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_attr_destroy(pthread_attr_t __attr) {
    return arblibJNI.pthread_attr_destroy(pthread_attr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_attr_getdetachstate(pthread_attr_t __attr, SWIGTYPE_p_int __detachstate) {
    return arblibJNI.pthread_attr_getdetachstate(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__detachstate));
  }

  public static int pthread_attr_setdetachstate(pthread_attr_t __attr, int __detachstate) {
    return arblibJNI.pthread_attr_setdetachstate(pthread_attr_t.getCPtr(__attr), __attr, __detachstate);
  }

  public static int pthread_attr_getguardsize(pthread_attr_t __attr, SWIGTYPE_p_size_t __guardsize) {
    return arblibJNI.pthread_attr_getguardsize(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_size_t.getCPtr(__guardsize));
  }

  public static int pthread_attr_setguardsize(pthread_attr_t __attr, long __guardsize) {
    return arblibJNI.pthread_attr_setguardsize(pthread_attr_t.getCPtr(__attr), __attr, __guardsize);
  }

  public static int pthread_attr_getschedparam(pthread_attr_t __attr, SWIGTYPE_p_sched_param __param) {
    return arblibJNI.pthread_attr_getschedparam(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_sched_param.getCPtr(__param));
  }

  public static int pthread_attr_setschedparam(pthread_attr_t __attr, SWIGTYPE_p_sched_param __param) {
    return arblibJNI.pthread_attr_setschedparam(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_sched_param.getCPtr(__param));
  }

  public static int pthread_attr_getschedpolicy(pthread_attr_t __attr, SWIGTYPE_p_int __policy) {
    return arblibJNI.pthread_attr_getschedpolicy(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__policy));
  }

  public static int pthread_attr_setschedpolicy(pthread_attr_t __attr, int __policy) {
    return arblibJNI.pthread_attr_setschedpolicy(pthread_attr_t.getCPtr(__attr), __attr, __policy);
  }

  public static int pthread_attr_getinheritsched(pthread_attr_t __attr, SWIGTYPE_p_int __inherit) {
    return arblibJNI.pthread_attr_getinheritsched(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__inherit));
  }

  public static int pthread_attr_setinheritsched(pthread_attr_t __attr, int __inherit) {
    return arblibJNI.pthread_attr_setinheritsched(pthread_attr_t.getCPtr(__attr), __attr, __inherit);
  }

  public static int pthread_attr_getscope(pthread_attr_t __attr, SWIGTYPE_p_int __scope) {
    return arblibJNI.pthread_attr_getscope(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__scope));
  }

  public static int pthread_attr_setscope(pthread_attr_t __attr, int __scope) {
    return arblibJNI.pthread_attr_setscope(pthread_attr_t.getCPtr(__attr), __attr, __scope);
  }

  public static int pthread_attr_getstackaddr(pthread_attr_t __attr, SWIGTYPE_p_p_void __stackaddr) {
    return arblibJNI.pthread_attr_getstackaddr(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_p_void.getCPtr(__stackaddr));
  }

  public static int pthread_attr_setstackaddr(pthread_attr_t __attr, SWIGTYPE_p_void __stackaddr) {
    return arblibJNI.pthread_attr_setstackaddr(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_void.getCPtr(__stackaddr));
  }

  public static int pthread_attr_getstacksize(pthread_attr_t __attr, SWIGTYPE_p_size_t __stacksize) {
    return arblibJNI.pthread_attr_getstacksize(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_size_t.getCPtr(__stacksize));
  }

  public static int pthread_attr_setstacksize(pthread_attr_t __attr, long __stacksize) {
    return arblibJNI.pthread_attr_setstacksize(pthread_attr_t.getCPtr(__attr), __attr, __stacksize);
  }

  public static int pthread_attr_getstack(pthread_attr_t __attr, SWIGTYPE_p_p_void __stackaddr, SWIGTYPE_p_size_t __stacksize) {
    return arblibJNI.pthread_attr_getstack(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_p_void.getCPtr(__stackaddr), SWIGTYPE_p_size_t.getCPtr(__stacksize));
  }

  public static int pthread_attr_setstack(pthread_attr_t __attr, SWIGTYPE_p_void __stackaddr, long __stacksize) {
    return arblibJNI.pthread_attr_setstack(pthread_attr_t.getCPtr(__attr), __attr, SWIGTYPE_p_void.getCPtr(__stackaddr), __stacksize);
  }

  public static int pthread_setschedparam(long __target_thread, int __policy, SWIGTYPE_p_sched_param __param) {
    return arblibJNI.pthread_setschedparam(__target_thread, __policy, SWIGTYPE_p_sched_param.getCPtr(__param));
  }

  public static int pthread_getschedparam(long __target_thread, SWIGTYPE_p_int __policy, SWIGTYPE_p_sched_param __param) {
    return arblibJNI.pthread_getschedparam(__target_thread, SWIGTYPE_p_int.getCPtr(__policy), SWIGTYPE_p_sched_param.getCPtr(__param));
  }

  public static int pthread_setschedprio(long __target_thread, int __prio) {
    return arblibJNI.pthread_setschedprio(__target_thread, __prio);
  }

  public static int pthread_once(SWIGTYPE_p_int __once_control, SWIGTYPE_p_f_void__void __init_routine) {
    return arblibJNI.pthread_once(SWIGTYPE_p_int.getCPtr(__once_control), SWIGTYPE_p_f_void__void.getCPtr(__init_routine));
  }

  public static int pthread_setcancelstate(int __state, SWIGTYPE_p_int __oldstate) {
    return arblibJNI.pthread_setcancelstate(__state, SWIGTYPE_p_int.getCPtr(__oldstate));
  }

  public static int pthread_setcanceltype(int __type, SWIGTYPE_p_int __oldtype) {
    return arblibJNI.pthread_setcanceltype(__type, SWIGTYPE_p_int.getCPtr(__oldtype));
  }

  public static int pthread_cancel(long __th) {
    return arblibJNI.pthread_cancel(__th);
  }

  public static void pthread_testcancel() {
    arblibJNI.pthread_testcancel();
  }

  public static void __pthread_register_cancel(__pthread_unwind_buf_t __buf) {
    arblibJNI.__pthread_register_cancel(__pthread_unwind_buf_t.getCPtr(__buf), __buf);
  }

  public static void __pthread_unregister_cancel(__pthread_unwind_buf_t __buf) {
    arblibJNI.__pthread_unregister_cancel(__pthread_unwind_buf_t.getCPtr(__buf), __buf);
  }

  public static void __pthread_unwind_next(__pthread_unwind_buf_t __buf) {
    arblibJNI.__pthread_unwind_next(__pthread_unwind_buf_t.getCPtr(__buf), __buf);
  }

  public static int __sigsetjmp(SWIGTYPE_p___jmp_buf_tag __env, int __savemask) {
    return arblibJNI.__sigsetjmp(SWIGTYPE_p___jmp_buf_tag.getCPtr(__env), __savemask);
  }

  public static int pthread_mutex_init(pthread_mutex_t __mutex, pthread_mutexattr_t __mutexattr) {
    return arblibJNI.pthread_mutex_init(pthread_mutex_t.getCPtr(__mutex), __mutex, pthread_mutexattr_t.getCPtr(__mutexattr), __mutexattr);
  }

  public static int pthread_mutex_destroy(pthread_mutex_t __mutex) {
    return arblibJNI.pthread_mutex_destroy(pthread_mutex_t.getCPtr(__mutex), __mutex);
  }

  public static int pthread_mutex_trylock(pthread_mutex_t __mutex) {
    return arblibJNI.pthread_mutex_trylock(pthread_mutex_t.getCPtr(__mutex), __mutex);
  }

  public static int pthread_mutex_lock(pthread_mutex_t __mutex) {
    return arblibJNI.pthread_mutex_lock(pthread_mutex_t.getCPtr(__mutex), __mutex);
  }

  public static int pthread_mutex_timedlock(pthread_mutex_t __mutex, timespec __abstime) {
    return arblibJNI.pthread_mutex_timedlock(pthread_mutex_t.getCPtr(__mutex), __mutex, timespec.getCPtr(__abstime), __abstime);
  }

  public static int pthread_mutex_unlock(pthread_mutex_t __mutex) {
    return arblibJNI.pthread_mutex_unlock(pthread_mutex_t.getCPtr(__mutex), __mutex);
  }

  public static int pthread_mutex_getprioceiling(pthread_mutex_t __mutex, SWIGTYPE_p_int __prioceiling) {
    return arblibJNI.pthread_mutex_getprioceiling(pthread_mutex_t.getCPtr(__mutex), __mutex, SWIGTYPE_p_int.getCPtr(__prioceiling));
  }

  public static int pthread_mutex_setprioceiling(pthread_mutex_t __mutex, int __prioceiling, SWIGTYPE_p_int __old_ceiling) {
    return arblibJNI.pthread_mutex_setprioceiling(pthread_mutex_t.getCPtr(__mutex), __mutex, __prioceiling, SWIGTYPE_p_int.getCPtr(__old_ceiling));
  }

  public static int pthread_mutex_consistent(pthread_mutex_t __mutex) {
    return arblibJNI.pthread_mutex_consistent(pthread_mutex_t.getCPtr(__mutex), __mutex);
  }

  public static int pthread_mutexattr_init(pthread_mutexattr_t __attr) {
    return arblibJNI.pthread_mutexattr_init(pthread_mutexattr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_mutexattr_destroy(pthread_mutexattr_t __attr) {
    return arblibJNI.pthread_mutexattr_destroy(pthread_mutexattr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_mutexattr_getpshared(pthread_mutexattr_t __attr, SWIGTYPE_p_int __pshared) {
    return arblibJNI.pthread_mutexattr_getpshared(pthread_mutexattr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__pshared));
  }

  public static int pthread_mutexattr_setpshared(pthread_mutexattr_t __attr, int __pshared) {
    return arblibJNI.pthread_mutexattr_setpshared(pthread_mutexattr_t.getCPtr(__attr), __attr, __pshared);
  }

  public static int pthread_mutexattr_gettype(pthread_mutexattr_t __attr, SWIGTYPE_p_int __kind) {
    return arblibJNI.pthread_mutexattr_gettype(pthread_mutexattr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__kind));
  }

  public static int pthread_mutexattr_settype(pthread_mutexattr_t __attr, int __kind) {
    return arblibJNI.pthread_mutexattr_settype(pthread_mutexattr_t.getCPtr(__attr), __attr, __kind);
  }

  public static int pthread_mutexattr_getprotocol(pthread_mutexattr_t __attr, SWIGTYPE_p_int __protocol) {
    return arblibJNI.pthread_mutexattr_getprotocol(pthread_mutexattr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__protocol));
  }

  public static int pthread_mutexattr_setprotocol(pthread_mutexattr_t __attr, int __protocol) {
    return arblibJNI.pthread_mutexattr_setprotocol(pthread_mutexattr_t.getCPtr(__attr), __attr, __protocol);
  }

  public static int pthread_mutexattr_getprioceiling(pthread_mutexattr_t __attr, SWIGTYPE_p_int __prioceiling) {
    return arblibJNI.pthread_mutexattr_getprioceiling(pthread_mutexattr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__prioceiling));
  }

  public static int pthread_mutexattr_setprioceiling(pthread_mutexattr_t __attr, int __prioceiling) {
    return arblibJNI.pthread_mutexattr_setprioceiling(pthread_mutexattr_t.getCPtr(__attr), __attr, __prioceiling);
  }

  public static int pthread_mutexattr_getrobust(pthread_mutexattr_t __attr, SWIGTYPE_p_int __robustness) {
    return arblibJNI.pthread_mutexattr_getrobust(pthread_mutexattr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__robustness));
  }

  public static int pthread_mutexattr_setrobust(pthread_mutexattr_t __attr, int __robustness) {
    return arblibJNI.pthread_mutexattr_setrobust(pthread_mutexattr_t.getCPtr(__attr), __attr, __robustness);
  }

  public static int pthread_rwlock_init(pthread_rwlock_t __rwlock, pthread_rwlockattr_t __attr) {
    return arblibJNI.pthread_rwlock_init(pthread_rwlock_t.getCPtr(__rwlock), __rwlock, pthread_rwlockattr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_rwlock_destroy(pthread_rwlock_t __rwlock) {
    return arblibJNI.pthread_rwlock_destroy(pthread_rwlock_t.getCPtr(__rwlock), __rwlock);
  }

  public static int pthread_rwlock_rdlock(pthread_rwlock_t __rwlock) {
    return arblibJNI.pthread_rwlock_rdlock(pthread_rwlock_t.getCPtr(__rwlock), __rwlock);
  }

  public static int pthread_rwlock_tryrdlock(pthread_rwlock_t __rwlock) {
    return arblibJNI.pthread_rwlock_tryrdlock(pthread_rwlock_t.getCPtr(__rwlock), __rwlock);
  }

  public static int pthread_rwlock_timedrdlock(pthread_rwlock_t __rwlock, timespec __abstime) {
    return arblibJNI.pthread_rwlock_timedrdlock(pthread_rwlock_t.getCPtr(__rwlock), __rwlock, timespec.getCPtr(__abstime), __abstime);
  }

  public static int pthread_rwlock_wrlock(pthread_rwlock_t __rwlock) {
    return arblibJNI.pthread_rwlock_wrlock(pthread_rwlock_t.getCPtr(__rwlock), __rwlock);
  }

  public static int pthread_rwlock_trywrlock(pthread_rwlock_t __rwlock) {
    return arblibJNI.pthread_rwlock_trywrlock(pthread_rwlock_t.getCPtr(__rwlock), __rwlock);
  }

  public static int pthread_rwlock_timedwrlock(pthread_rwlock_t __rwlock, timespec __abstime) {
    return arblibJNI.pthread_rwlock_timedwrlock(pthread_rwlock_t.getCPtr(__rwlock), __rwlock, timespec.getCPtr(__abstime), __abstime);
  }

  public static int pthread_rwlock_unlock(pthread_rwlock_t __rwlock) {
    return arblibJNI.pthread_rwlock_unlock(pthread_rwlock_t.getCPtr(__rwlock), __rwlock);
  }

  public static int pthread_rwlockattr_init(pthread_rwlockattr_t __attr) {
    return arblibJNI.pthread_rwlockattr_init(pthread_rwlockattr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_rwlockattr_destroy(pthread_rwlockattr_t __attr) {
    return arblibJNI.pthread_rwlockattr_destroy(pthread_rwlockattr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_rwlockattr_getpshared(pthread_rwlockattr_t __attr, SWIGTYPE_p_int __pshared) {
    return arblibJNI.pthread_rwlockattr_getpshared(pthread_rwlockattr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__pshared));
  }

  public static int pthread_rwlockattr_setpshared(pthread_rwlockattr_t __attr, int __pshared) {
    return arblibJNI.pthread_rwlockattr_setpshared(pthread_rwlockattr_t.getCPtr(__attr), __attr, __pshared);
  }

  public static int pthread_rwlockattr_getkind_np(pthread_rwlockattr_t __attr, SWIGTYPE_p_int __pref) {
    return arblibJNI.pthread_rwlockattr_getkind_np(pthread_rwlockattr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__pref));
  }

  public static int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t __attr, int __pref) {
    return arblibJNI.pthread_rwlockattr_setkind_np(pthread_rwlockattr_t.getCPtr(__attr), __attr, __pref);
  }

  public static int pthread_cond_init(pthread_cond_t __cond, pthread_condattr_t __cond_attr) {
    return arblibJNI.pthread_cond_init(pthread_cond_t.getCPtr(__cond), __cond, pthread_condattr_t.getCPtr(__cond_attr), __cond_attr);
  }

  public static int pthread_cond_destroy(pthread_cond_t __cond) {
    return arblibJNI.pthread_cond_destroy(pthread_cond_t.getCPtr(__cond), __cond);
  }

  public static int pthread_cond_signal(pthread_cond_t __cond) {
    return arblibJNI.pthread_cond_signal(pthread_cond_t.getCPtr(__cond), __cond);
  }

  public static int pthread_cond_broadcast(pthread_cond_t __cond) {
    return arblibJNI.pthread_cond_broadcast(pthread_cond_t.getCPtr(__cond), __cond);
  }

  public static int pthread_cond_wait(pthread_cond_t __cond, pthread_mutex_t __mutex) {
    return arblibJNI.pthread_cond_wait(pthread_cond_t.getCPtr(__cond), __cond, pthread_mutex_t.getCPtr(__mutex), __mutex);
  }

  public static int pthread_cond_timedwait(pthread_cond_t __cond, pthread_mutex_t __mutex, timespec __abstime) {
    return arblibJNI.pthread_cond_timedwait(pthread_cond_t.getCPtr(__cond), __cond, pthread_mutex_t.getCPtr(__mutex), __mutex, timespec.getCPtr(__abstime), __abstime);
  }

  public static int pthread_condattr_init(pthread_condattr_t __attr) {
    return arblibJNI.pthread_condattr_init(pthread_condattr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_condattr_destroy(pthread_condattr_t __attr) {
    return arblibJNI.pthread_condattr_destroy(pthread_condattr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_condattr_getpshared(pthread_condattr_t __attr, SWIGTYPE_p_int __pshared) {
    return arblibJNI.pthread_condattr_getpshared(pthread_condattr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__pshared));
  }

  public static int pthread_condattr_setpshared(pthread_condattr_t __attr, int __pshared) {
    return arblibJNI.pthread_condattr_setpshared(pthread_condattr_t.getCPtr(__attr), __attr, __pshared);
  }

  public static int pthread_condattr_getclock(pthread_condattr_t __attr, SWIGTYPE_p_int __clock_id) {
    return arblibJNI.pthread_condattr_getclock(pthread_condattr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__clock_id));
  }

  public static int pthread_condattr_setclock(pthread_condattr_t __attr, int __clock_id) {
    return arblibJNI.pthread_condattr_setclock(pthread_condattr_t.getCPtr(__attr), __attr, __clock_id);
  }

  public static int pthread_spin_init(SWIGTYPE_p_int __lock, int __pshared) {
    return arblibJNI.pthread_spin_init(SWIGTYPE_p_int.getCPtr(__lock), __pshared);
  }

  public static int pthread_spin_destroy(SWIGTYPE_p_int __lock) {
    return arblibJNI.pthread_spin_destroy(SWIGTYPE_p_int.getCPtr(__lock));
  }

  public static int pthread_spin_lock(SWIGTYPE_p_int __lock) {
    return arblibJNI.pthread_spin_lock(SWIGTYPE_p_int.getCPtr(__lock));
  }

  public static int pthread_spin_trylock(SWIGTYPE_p_int __lock) {
    return arblibJNI.pthread_spin_trylock(SWIGTYPE_p_int.getCPtr(__lock));
  }

  public static int pthread_spin_unlock(SWIGTYPE_p_int __lock) {
    return arblibJNI.pthread_spin_unlock(SWIGTYPE_p_int.getCPtr(__lock));
  }

  public static int pthread_barrier_init(pthread_barrier_t __barrier, pthread_barrierattr_t __attr, long __count) {
    return arblibJNI.pthread_barrier_init(pthread_barrier_t.getCPtr(__barrier), __barrier, pthread_barrierattr_t.getCPtr(__attr), __attr, __count);
  }

  public static int pthread_barrier_destroy(pthread_barrier_t __barrier) {
    return arblibJNI.pthread_barrier_destroy(pthread_barrier_t.getCPtr(__barrier), __barrier);
  }

  public static int pthread_barrier_wait(pthread_barrier_t __barrier) {
    return arblibJNI.pthread_barrier_wait(pthread_barrier_t.getCPtr(__barrier), __barrier);
  }

  public static int pthread_barrierattr_init(pthread_barrierattr_t __attr) {
    return arblibJNI.pthread_barrierattr_init(pthread_barrierattr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_barrierattr_destroy(pthread_barrierattr_t __attr) {
    return arblibJNI.pthread_barrierattr_destroy(pthread_barrierattr_t.getCPtr(__attr), __attr);
  }

  public static int pthread_barrierattr_getpshared(pthread_barrierattr_t __attr, SWIGTYPE_p_int __pshared) {
    return arblibJNI.pthread_barrierattr_getpshared(pthread_barrierattr_t.getCPtr(__attr), __attr, SWIGTYPE_p_int.getCPtr(__pshared));
  }

  public static int pthread_barrierattr_setpshared(pthread_barrierattr_t __attr, int __pshared) {
    return arblibJNI.pthread_barrierattr_setpshared(pthread_barrierattr_t.getCPtr(__attr), __attr, __pshared);
  }

  public static int pthread_key_create(SWIGTYPE_p_unsigned_int __key, SWIGTYPE_p_f_p_void__void __destr_function) {
    return arblibJNI.pthread_key_create(SWIGTYPE_p_unsigned_int.getCPtr(__key), SWIGTYPE_p_f_p_void__void.getCPtr(__destr_function));
  }

  public static int pthread_key_delete(long __key) {
    return arblibJNI.pthread_key_delete(__key);
  }

  public static SWIGTYPE_p_void pthread_getspecific(long __key) {
    long cPtr = arblibJNI.pthread_getspecific(__key);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static int pthread_setspecific(long __key, SWIGTYPE_p_void __pointer) {
    return arblibJNI.pthread_setspecific(__key, SWIGTYPE_p_void.getCPtr(__pointer));
  }

  public static int pthread_getcpuclockid(long __thread_id, SWIGTYPE_p_int __clock_id) {
    return arblibJNI.pthread_getcpuclockid(__thread_id, SWIGTYPE_p_int.getCPtr(__clock_id));
  }

  public static int pthread_atfork(SWIGTYPE_p_f_void__void __prepare, SWIGTYPE_p_f_void__void __parent, SWIGTYPE_p_f_void__void __child) {
    return arblibJNI.pthread_atfork(SWIGTYPE_p_f_void__void.getCPtr(__prepare), SWIGTYPE_p_f_void__void.getCPtr(__parent), SWIGTYPE_p_f_void__void.getCPtr(__child));
  }

  public static void setFmpz_arr(__mpz_struct value) {
    arblibJNI.fmpz_arr_set(__mpz_struct.getCPtr(value), value);
  }

  public static __mpz_struct getFmpz_arr() {
    long cPtr = arblibJNI.fmpz_arr_get();
    return (cPtr == 0) ? null : new __mpz_struct(cPtr, false);
  }

  public static void setFmpz_randstate(__gmp_randstate_struct value) {
    arblibJNI.fmpz_randstate_set(__gmp_randstate_struct.getCPtr(value), value);
  }

  public static __gmp_randstate_struct getFmpz_randstate() {
    long cPtr = arblibJNI.fmpz_randstate_get();
    return (cPtr == 0) ? null : new __gmp_randstate_struct(cPtr, false);
  }

  public static __mpz_struct _fmpz_new_mpz() {
    long cPtr = arblibJNI._fmpz_new_mpz();
    return (cPtr == 0) ? null : new __mpz_struct(cPtr, false);
  }

  public static void _fmpz_clear_mpz(int f) {
    arblibJNI._fmpz_clear_mpz(f);
  }

  public static void _fmpz_cleanup_mpz_content() {
    arblibJNI._fmpz_cleanup_mpz_content();
  }

  public static void _fmpz_cleanup() {
    arblibJNI._fmpz_cleanup();
  }

  public static __mpz_struct _fmpz_promote(SWIGTYPE_p_long f) {
    long cPtr = arblibJNI._fmpz_promote(SWIGTYPE_p_long.getCPtr(f));
    return (cPtr == 0) ? null : new __mpz_struct(cPtr, false);
  }

  public static __mpz_struct _fmpz_promote_val(SWIGTYPE_p_long f) {
    long cPtr = arblibJNI._fmpz_promote_val(SWIGTYPE_p_long.getCPtr(f));
    return (cPtr == 0) ? null : new __mpz_struct(cPtr, false);
  }

  public static void _fmpz_demote(SWIGTYPE_p_long f) {
    arblibJNI._fmpz_demote(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void _fmpz_demote_val(SWIGTYPE_p_long f) {
    arblibJNI._fmpz_demote_val(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void _fmpz_init_readonly_mpz(SWIGTYPE_p_long f, __mpz_struct z) {
    arblibJNI._fmpz_init_readonly_mpz(SWIGTYPE_p_long.getCPtr(f), __mpz_struct.getCPtr(z), z);
  }

  public static void _fmpz_clear_readonly_mpz(__mpz_struct arg0) {
    arblibJNI._fmpz_clear_readonly_mpz(__mpz_struct.getCPtr(arg0), arg0);
  }

  public static void fmpz_init(SWIGTYPE_p_long f) {
    arblibJNI.fmpz_init(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_init2(SWIGTYPE_p_long f, long limbs) {
    arblibJNI.fmpz_init2(SWIGTYPE_p_long.getCPtr(f), limbs);
  }

  public static void fmpz_init_set(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    arblibJNI.fmpz_init_set(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static void fmpz_init_set_ui(SWIGTYPE_p_long f, long g) {
    arblibJNI.fmpz_init_set_ui(SWIGTYPE_p_long.getCPtr(f), g);
  }

  public static void fmpz_init_set_si(SWIGTYPE_p_long f, int g) {
    arblibJNI.fmpz_init_set_si(SWIGTYPE_p_long.getCPtr(f), g);
  }

  public static void fmpz_clear(SWIGTYPE_p_long f) {
    arblibJNI.fmpz_clear(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_randbits(SWIGTYPE_p_long f, flint_rand_s state, long bits) {
    arblibJNI.fmpz_randbits(SWIGTYPE_p_long.getCPtr(f), flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpz_randm(SWIGTYPE_p_long f, flint_rand_s state, SWIGTYPE_p_long m) {
    arblibJNI.fmpz_randm(SWIGTYPE_p_long.getCPtr(f), flint_rand_s.getCPtr(state), state, SWIGTYPE_p_long.getCPtr(m));
  }

  public static void fmpz_randtest(SWIGTYPE_p_long f, flint_rand_s state, long bits) {
    arblibJNI.fmpz_randtest(SWIGTYPE_p_long.getCPtr(f), flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpz_randtest_unsigned(SWIGTYPE_p_long f, flint_rand_s state, long bits) {
    arblibJNI.fmpz_randtest_unsigned(SWIGTYPE_p_long.getCPtr(f), flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpz_randtest_not_zero(SWIGTYPE_p_long f, flint_rand_s state, long bits) {
    arblibJNI.fmpz_randtest_not_zero(SWIGTYPE_p_long.getCPtr(f), flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpz_randtest_mod(SWIGTYPE_p_long f, flint_rand_s state, SWIGTYPE_p_long m) {
    arblibJNI.fmpz_randtest_mod(SWIGTYPE_p_long.getCPtr(f), flint_rand_s.getCPtr(state), state, SWIGTYPE_p_long.getCPtr(m));
  }

  public static void fmpz_randtest_mod_signed(SWIGTYPE_p_long f, flint_rand_s state, SWIGTYPE_p_long m) {
    arblibJNI.fmpz_randtest_mod_signed(SWIGTYPE_p_long.getCPtr(f), flint_rand_s.getCPtr(state), state, SWIGTYPE_p_long.getCPtr(m));
  }

  public static void fmpz_randprime(SWIGTYPE_p_long f, flint_rand_s state, long bits, int proved) {
    arblibJNI.fmpz_randprime(SWIGTYPE_p_long.getCPtr(f), flint_rand_s.getCPtr(state), state, bits, proved);
  }

  public static int fmpz_get_si(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_get_si(SWIGTYPE_p_long.getCPtr(f));
  }

  public static long fmpz_get_ui(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_get_ui(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_get_uiui(SWIGTYPE_p_unsigned_long hi, SWIGTYPE_p_unsigned_long low, SWIGTYPE_p_long f) {
    arblibJNI.fmpz_get_uiui(SWIGTYPE_p_unsigned_long.getCPtr(hi), SWIGTYPE_p_unsigned_long.getCPtr(low), SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_set_si(SWIGTYPE_p_long f, int val) {
    arblibJNI.fmpz_set_si(SWIGTYPE_p_long.getCPtr(f), val);
  }

  public static void fmpz_set_ui(SWIGTYPE_p_long f, long val) {
    arblibJNI.fmpz_set_ui(SWIGTYPE_p_long.getCPtr(f), val);
  }

  public static void fmpz_neg_ui(SWIGTYPE_p_long f, long val) {
    arblibJNI.fmpz_neg_ui(SWIGTYPE_p_long.getCPtr(f), val);
  }

  public static void fmpz_set_uiui(SWIGTYPE_p_long f, long hi, long lo) {
    arblibJNI.fmpz_set_uiui(SWIGTYPE_p_long.getCPtr(f), hi, lo);
  }

  public static void fmpz_neg_uiui(SWIGTYPE_p_long f, long hi, long lo) {
    arblibJNI.fmpz_neg_uiui(SWIGTYPE_p_long.getCPtr(f), hi, lo);
  }

  public static void fmpz_set_signed_uiui(SWIGTYPE_p_long r, long hi, long lo) {
    arblibJNI.fmpz_set_signed_uiui(SWIGTYPE_p_long.getCPtr(r), hi, lo);
  }

  public static void fmpz_set_signed_uiuiui(SWIGTYPE_p_long r, long hi, long mid, long lo) {
    arblibJNI.fmpz_set_signed_uiuiui(SWIGTYPE_p_long.getCPtr(r), hi, mid, lo);
  }

  public static void fmpz_set_ui_array(SWIGTYPE_p_long out, SWIGTYPE_p_unsigned_long in, int in_len) {
    arblibJNI.fmpz_set_ui_array(SWIGTYPE_p_long.getCPtr(out), SWIGTYPE_p_unsigned_long.getCPtr(in), in_len);
  }

  public static void fmpz_get_ui_array(SWIGTYPE_p_unsigned_long out, int out_len, SWIGTYPE_p_long in) {
    arblibJNI.fmpz_get_ui_array(SWIGTYPE_p_unsigned_long.getCPtr(out), out_len, SWIGTYPE_p_long.getCPtr(in));
  }

  public static void fmpz_get_mpz(__mpz_struct x, SWIGTYPE_p_long f) {
    arblibJNI.fmpz_get_mpz(__mpz_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_set_mpz(SWIGTYPE_p_long f, __mpz_struct x) {
    arblibJNI.fmpz_set_mpz(SWIGTYPE_p_long.getCPtr(f), __mpz_struct.getCPtr(x), x);
  }

  public static double fmpz_get_d(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_get_d(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_set_d(SWIGTYPE_p_long f, double c) {
    arblibJNI.fmpz_set_d(SWIGTYPE_p_long.getCPtr(f), c);
  }

  public static void fmpz_get_mpf(__mpf_struct x, SWIGTYPE_p_long f) {
    arblibJNI.fmpz_get_mpf(__mpf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_set_mpf(SWIGTYPE_p_long f, __mpf_struct x) {
    arblibJNI.fmpz_set_mpf(SWIGTYPE_p_long.getCPtr(f), __mpf_struct.getCPtr(x), x);
  }

  public static void fmpz_get_mpfr(__mpfr_struct x, SWIGTYPE_p_long f, mpfr_rnd_t rnd) {
    arblibJNI.fmpz_get_mpfr(__mpfr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(f), rnd.swigValue());
  }

  public static int fmpz_get_mpn(SWIGTYPE_p_p_unsigned_long n, SWIGTYPE_p_long n_in) {
    return arblibJNI.fmpz_get_mpn(SWIGTYPE_p_p_unsigned_long.getCPtr(n), SWIGTYPE_p_long.getCPtr(n_in));
  }

  public static int fmpz_set_str(SWIGTYPE_p_long f, String str, int b) {
    return arblibJNI.fmpz_set_str(SWIGTYPE_p_long.getCPtr(f), str, b);
  }

  public static void flint_mpz_init_set_readonly(__mpz_struct z, SWIGTYPE_p_long f) {
    arblibJNI.flint_mpz_init_set_readonly(__mpz_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(f));
  }

  public static void flint_mpz_clear_readonly(__mpz_struct z) {
    arblibJNI.flint_mpz_clear_readonly(__mpz_struct.getCPtr(z), z);
  }

  public static void fmpz_init_set_readonly(SWIGTYPE_p_long f, __mpz_struct z) {
    arblibJNI.fmpz_init_set_readonly(SWIGTYPE_p_long.getCPtr(f), __mpz_struct.getCPtr(z), z);
  }

  public static void fmpz_clear_readonly(SWIGTYPE_p_long f) {
    arblibJNI.fmpz_clear_readonly(SWIGTYPE_p_long.getCPtr(f));
  }

  public static int fmpz_abs_fits_ui(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_abs_fits_ui(SWIGTYPE_p_long.getCPtr(f));
  }

  public static int fmpz_fits_si(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_fits_si(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_zero(SWIGTYPE_p_long f) {
    arblibJNI.fmpz_zero(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_one(SWIGTYPE_p_long f) {
    arblibJNI.fmpz_one(SWIGTYPE_p_long.getCPtr(f));
  }

  public static int fmpz_is_zero(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_is_zero(SWIGTYPE_p_long.getCPtr(f));
  }

  public static int fmpz_is_one(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_is_one(SWIGTYPE_p_long.getCPtr(f));
  }

  public static int fmpz_is_pm1(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_is_pm1(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_set(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    arblibJNI.fmpz_set(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int fmpz_equal(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    return arblibJNI.fmpz_equal(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int fmpz_equal_si(SWIGTYPE_p_long f, int g) {
    return arblibJNI.fmpz_equal_si(SWIGTYPE_p_long.getCPtr(f), g);
  }

  public static int fmpz_equal_ui(SWIGTYPE_p_long f, long g) {
    return arblibJNI.fmpz_equal_ui(SWIGTYPE_p_long.getCPtr(f), g);
  }

  public static int fmpz_read(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_read(SWIGTYPE_p_long.getCPtr(f));
  }

  public static int fmpz_fread(_IO_FILE file, SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_fread(_IO_FILE.getCPtr(file), file, SWIGTYPE_p_long.getCPtr(f));
  }

  public static long fmpz_inp_raw(SWIGTYPE_p_long x, _IO_FILE fin) {
    return arblibJNI.fmpz_inp_raw(SWIGTYPE_p_long.getCPtr(x), _IO_FILE.getCPtr(fin), fin);
  }

  public static int fmpz_print(SWIGTYPE_p_long x) {
    return arblibJNI.fmpz_print(SWIGTYPE_p_long.getCPtr(x));
  }

  public static int fmpz_fprint(_IO_FILE file, SWIGTYPE_p_long x) {
    return arblibJNI.fmpz_fprint(_IO_FILE.getCPtr(file), file, SWIGTYPE_p_long.getCPtr(x));
  }

  public static long fmpz_out_raw(_IO_FILE fout, SWIGTYPE_p_long x) {
    return arblibJNI.fmpz_out_raw(_IO_FILE.getCPtr(fout), fout, SWIGTYPE_p_long.getCPtr(x));
  }

  public static long fmpz_sizeinbase(SWIGTYPE_p_long f, int b) {
    return arblibJNI.fmpz_sizeinbase(SWIGTYPE_p_long.getCPtr(f), b);
  }

  public static String fmpz_get_str(String str, int b, SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_get_str(str, b, SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_swap(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    arblibJNI.fmpz_swap(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int fmpz_cmp(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    return arblibJNI.fmpz_cmp(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int fmpz_cmp_ui(SWIGTYPE_p_long f, long g) {
    return arblibJNI.fmpz_cmp_ui(SWIGTYPE_p_long.getCPtr(f), g);
  }

  public static int fmpz_cmp_si(SWIGTYPE_p_long f, int g) {
    return arblibJNI.fmpz_cmp_si(SWIGTYPE_p_long.getCPtr(f), g);
  }

  public static int fmpz_cmpabs(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    return arblibJNI.fmpz_cmpabs(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int fmpz_is_even(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_is_even(SWIGTYPE_p_long.getCPtr(f));
  }

  public static int fmpz_is_odd(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_is_odd(SWIGTYPE_p_long.getCPtr(f));
  }

  public static int fmpz_size(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_size(SWIGTYPE_p_long.getCPtr(f));
  }

  public static int fmpz_sgn(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_sgn(SWIGTYPE_p_long.getCPtr(f));
  }

  public static long fmpz_bits(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_bits(SWIGTYPE_p_long.getCPtr(f));
  }

  public static long fmpz_val2(SWIGTYPE_p_long x) {
    return arblibJNI.fmpz_val2(SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpz_neg(SWIGTYPE_p_long f1, SWIGTYPE_p_long f2) {
    arblibJNI.fmpz_neg(SWIGTYPE_p_long.getCPtr(f1), SWIGTYPE_p_long.getCPtr(f2));
  }

  public static void fmpz_abs(SWIGTYPE_p_long f1, SWIGTYPE_p_long f2) {
    arblibJNI.fmpz_abs(SWIGTYPE_p_long.getCPtr(f1), SWIGTYPE_p_long.getCPtr(f2));
  }

  public static void fmpz_add(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_add(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_sub(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_sub(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_mul_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long x) {
    arblibJNI.fmpz_mul_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), x);
  }

  public static void fmpz_mul_si(SWIGTYPE_p_long f, SWIGTYPE_p_long g, int x) {
    arblibJNI.fmpz_mul_si(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), x);
  }

  public static void fmpz_mul(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_mul(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_mul_2exp(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long exp) {
    arblibJNI.fmpz_mul_2exp(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), exp);
  }

  public static void fmpz_add_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long x) {
    arblibJNI.fmpz_add_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), x);
  }

  public static void fmpz_sub_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long x) {
    arblibJNI.fmpz_sub_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), x);
  }

  public static void fmpz_add_si(SWIGTYPE_p_long f, SWIGTYPE_p_long g, int x) {
    arblibJNI.fmpz_add_si(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), x);
  }

  public static void fmpz_sub_si(SWIGTYPE_p_long f, SWIGTYPE_p_long g, int x) {
    arblibJNI.fmpz_sub_si(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), x);
  }

  public static void fmpz_addmul_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long x) {
    arblibJNI.fmpz_addmul_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), x);
  }

  public static void fmpz_submul_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long x) {
    arblibJNI.fmpz_submul_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), x);
  }

  public static void fmpz_addmul(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_addmul(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_submul(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_submul(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_fmma(SWIGTYPE_p_long f, SWIGTYPE_p_long a, SWIGTYPE_p_long b, SWIGTYPE_p_long c, SWIGTYPE_p_long d) {
    arblibJNI.fmpz_fmma(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b), SWIGTYPE_p_long.getCPtr(c), SWIGTYPE_p_long.getCPtr(d));
  }

  public static void fmpz_fmms(SWIGTYPE_p_long f, SWIGTYPE_p_long a, SWIGTYPE_p_long b, SWIGTYPE_p_long c, SWIGTYPE_p_long d) {
    arblibJNI.fmpz_fmms(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b), SWIGTYPE_p_long.getCPtr(c), SWIGTYPE_p_long.getCPtr(d));
  }

  public static void fmpz_pow_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long exp) {
    arblibJNI.fmpz_pow_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), exp);
  }

  public static int fmpz_pow_fmpz(SWIGTYPE_p_long a, SWIGTYPE_p_long b, SWIGTYPE_p_long e) {
    return arblibJNI.fmpz_pow_fmpz(SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b), SWIGTYPE_p_long.getCPtr(e));
  }

  public static void fmpz_powm_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long exp, SWIGTYPE_p_long m) {
    arblibJNI.fmpz_powm_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), exp, SWIGTYPE_p_long.getCPtr(m));
  }

  public static void fmpz_powm(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long e, SWIGTYPE_p_long m) {
    arblibJNI.fmpz_powm(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(e), SWIGTYPE_p_long.getCPtr(m));
  }

  public static void fmpz_setbit(SWIGTYPE_p_long f, long i) {
    arblibJNI.fmpz_setbit(SWIGTYPE_p_long.getCPtr(f), i);
  }

  public static int fmpz_tstbit(SWIGTYPE_p_long f, long i) {
    return arblibJNI.fmpz_tstbit(SWIGTYPE_p_long.getCPtr(f), i);
  }

  public static void fmpz_clrbit(SWIGTYPE_p_long f, long i) {
    arblibJNI.fmpz_clrbit(SWIGTYPE_p_long.getCPtr(f), i);
  }

  public static void fmpz_complement(SWIGTYPE_p_long r, SWIGTYPE_p_long f) {
    arblibJNI.fmpz_complement(SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_combit(SWIGTYPE_p_long f, long i) {
    arblibJNI.fmpz_combit(SWIGTYPE_p_long.getCPtr(f), i);
  }

  public static void fmpz_and(SWIGTYPE_p_long r, SWIGTYPE_p_long a, SWIGTYPE_p_long b) {
    arblibJNI.fmpz_and(SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b));
  }

  public static void fmpz_or(SWIGTYPE_p_long r, SWIGTYPE_p_long a, SWIGTYPE_p_long b) {
    arblibJNI.fmpz_or(SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b));
  }

  public static void fmpz_xor(SWIGTYPE_p_long r, SWIGTYPE_p_long a, SWIGTYPE_p_long b) {
    arblibJNI.fmpz_xor(SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b));
  }

  public static long fmpz_popcnt(SWIGTYPE_p_long c) {
    return arblibJNI.fmpz_popcnt(SWIGTYPE_p_long.getCPtr(c));
  }

  public static double fmpz_dlog(SWIGTYPE_p_long x) {
    return arblibJNI.fmpz_dlog(SWIGTYPE_p_long.getCPtr(x));
  }

  public static int fmpz_flog(SWIGTYPE_p_long x, SWIGTYPE_p_long b) {
    return arblibJNI.fmpz_flog(SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(b));
  }

  public static int fmpz_flog_ui(SWIGTYPE_p_long x, long b) {
    return arblibJNI.fmpz_flog_ui(SWIGTYPE_p_long.getCPtr(x), b);
  }

  public static int fmpz_clog(SWIGTYPE_p_long x, SWIGTYPE_p_long b) {
    return arblibJNI.fmpz_clog(SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(b));
  }

  public static int fmpz_clog_ui(SWIGTYPE_p_long x, long b) {
    return arblibJNI.fmpz_clog_ui(SWIGTYPE_p_long.getCPtr(x), b);
  }

  public static int fmpz_sqrtmod(SWIGTYPE_p_long b, SWIGTYPE_p_long a, SWIGTYPE_p_long p) {
    return arblibJNI.fmpz_sqrtmod(SWIGTYPE_p_long.getCPtr(b), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(p));
  }

  public static void fmpz_sqrt(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    arblibJNI.fmpz_sqrt(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int fmpz_is_square(SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_is_square(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_root(SWIGTYPE_p_long r, SWIGTYPE_p_long f, int n) {
    arblibJNI.fmpz_root(SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(f), n);
  }

  public static int fmpz_is_perfect_power(SWIGTYPE_p_long root, SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_is_perfect_power(SWIGTYPE_p_long.getCPtr(root), SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_sqrtrem(SWIGTYPE_p_long f, SWIGTYPE_p_long r, SWIGTYPE_p_long g) {
    arblibJNI.fmpz_sqrtrem(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(g));
  }

  public static long fmpz_fdiv_ui(SWIGTYPE_p_long g, long h) {
    return arblibJNI.fmpz_fdiv_ui(SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static long fmpz_mod_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long h) {
    return arblibJNI.fmpz_mod_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static void fmpz_mod(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_mod(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_smod(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_smod(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_negmod(SWIGTYPE_p_long r, SWIGTYPE_p_long a, SWIGTYPE_p_long mod) {
    arblibJNI.fmpz_negmod(SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(mod));
  }

  public static void fmpz_gcd(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_gcd(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_lcm(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_lcm(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_gcdinv(SWIGTYPE_p_long d, SWIGTYPE_p_long a, SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    arblibJNI.fmpz_gcdinv(SWIGTYPE_p_long.getCPtr(d), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static void fmpz_xgcd(SWIGTYPE_p_long d, SWIGTYPE_p_long a, SWIGTYPE_p_long b, SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    arblibJNI.fmpz_xgcd(SWIGTYPE_p_long.getCPtr(d), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b), SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static void fmpz_xgcd_partial(SWIGTYPE_p_long co2, SWIGTYPE_p_long co1, SWIGTYPE_p_long r2, SWIGTYPE_p_long r1, SWIGTYPE_p_long L) {
    arblibJNI.fmpz_xgcd_partial(SWIGTYPE_p_long.getCPtr(co2), SWIGTYPE_p_long.getCPtr(co1), SWIGTYPE_p_long.getCPtr(r2), SWIGTYPE_p_long.getCPtr(r1), SWIGTYPE_p_long.getCPtr(L));
  }

  public static int fmpz_invmod(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    return arblibJNI.fmpz_invmod(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static int fmpz_jacobi(SWIGTYPE_p_long a, SWIGTYPE_p_long p) {
    return arblibJNI.fmpz_jacobi(SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(p));
  }

  public static void fmpz_divides_mod_list(SWIGTYPE_p_long xstart, SWIGTYPE_p_long xstride, SWIGTYPE_p_long xlength, SWIGTYPE_p_long a, SWIGTYPE_p_long b, SWIGTYPE_p_long n) {
    arblibJNI.fmpz_divides_mod_list(SWIGTYPE_p_long.getCPtr(xstart), SWIGTYPE_p_long.getCPtr(xstride), SWIGTYPE_p_long.getCPtr(xlength), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b), SWIGTYPE_p_long.getCPtr(n));
  }

  public static int _fmpz_remove(SWIGTYPE_p_long x, SWIGTYPE_p_long f, double finv) {
    return arblibJNI._fmpz_remove(SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(f), finv);
  }

  public static int fmpz_remove(SWIGTYPE_p_long rop, SWIGTYPE_p_long op, SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_remove(SWIGTYPE_p_long.getCPtr(rop), SWIGTYPE_p_long.getCPtr(op), SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_divexact(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_divexact(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_divexact_si(SWIGTYPE_p_long f, SWIGTYPE_p_long g, int h) {
    arblibJNI.fmpz_divexact_si(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static void fmpz_divexact_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long h) {
    arblibJNI.fmpz_divexact_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static int fmpz_divisible(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    return arblibJNI.fmpz_divisible(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int fmpz_divisible_si(SWIGTYPE_p_long f, int g) {
    return arblibJNI.fmpz_divisible_si(SWIGTYPE_p_long.getCPtr(f), g);
  }

  public static void fmpz_cdiv_qr(SWIGTYPE_p_long f, SWIGTYPE_p_long s, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_cdiv_qr(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(s), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_cdiv_q(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_cdiv_q(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_cdiv_q_si(SWIGTYPE_p_long f, SWIGTYPE_p_long g, int h) {
    arblibJNI.fmpz_cdiv_q_si(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static void fmpz_cdiv_q_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long h) {
    arblibJNI.fmpz_cdiv_q_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static void fmpz_cdiv_q_2exp(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long exp) {
    arblibJNI.fmpz_cdiv_q_2exp(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), exp);
  }

  public static void fmpz_cdiv_r_2exp(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long exp) {
    arblibJNI.fmpz_cdiv_r_2exp(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), exp);
  }

  public static long fmpz_cdiv_ui(SWIGTYPE_p_long g, long h) {
    return arblibJNI.fmpz_cdiv_ui(SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static void fmpz_fdiv_qr(SWIGTYPE_p_long f, SWIGTYPE_p_long s, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_fdiv_qr(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(s), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_fdiv_qr_preinvn(SWIGTYPE_p_long f, SWIGTYPE_p_long s, SWIGTYPE_p_long g, SWIGTYPE_p_long h, fmpz_preinvn_struct inv) {
    arblibJNI.fmpz_fdiv_qr_preinvn(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(s), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h), fmpz_preinvn_struct.getCPtr(inv), inv);
  }

  public static void fmpz_fdiv_q(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_fdiv_q(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_fdiv_r(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_fdiv_r(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_fdiv_q_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long h) {
    arblibJNI.fmpz_fdiv_q_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static void fmpz_fdiv_q_si(SWIGTYPE_p_long f, SWIGTYPE_p_long g, int h) {
    arblibJNI.fmpz_fdiv_q_si(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static void fmpz_fdiv_q_2exp(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long exp) {
    arblibJNI.fmpz_fdiv_q_2exp(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), exp);
  }

  public static void fmpz_fdiv_r_2exp(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long exp) {
    arblibJNI.fmpz_fdiv_r_2exp(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), exp);
  }

  public static void fmpz_tdiv_q(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_tdiv_q(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_tdiv_qr(SWIGTYPE_p_long f, SWIGTYPE_p_long s, SWIGTYPE_p_long g, SWIGTYPE_p_long h) {
    arblibJNI.fmpz_tdiv_qr(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(s), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h));
  }

  public static void fmpz_tdiv_q_ui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long h) {
    arblibJNI.fmpz_tdiv_q_ui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static void fmpz_tdiv_q_si(SWIGTYPE_p_long f, SWIGTYPE_p_long g, int h) {
    arblibJNI.fmpz_tdiv_q_si(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static void fmpz_tdiv_r_2exp(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long exp) {
    arblibJNI.fmpz_tdiv_r_2exp(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), exp);
  }

  public static long fmpz_tdiv_ui(SWIGTYPE_p_long g, long h) {
    return arblibJNI.fmpz_tdiv_ui(SWIGTYPE_p_long.getCPtr(g), h);
  }

  public static void fmpz_tdiv_q_2exp(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long exp) {
    arblibJNI.fmpz_tdiv_q_2exp(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), exp);
  }

  public static void fmpz_preinvn_init(fmpz_preinvn_struct inv, SWIGTYPE_p_long f) {
    arblibJNI.fmpz_preinvn_init(fmpz_preinvn_struct.getCPtr(inv), inv, SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_preinvn_clear(fmpz_preinvn_struct inv) {
    arblibJNI.fmpz_preinvn_clear(fmpz_preinvn_struct.getCPtr(inv), inv);
  }

  public static double fmpz_get_d_2exp(SWIGTYPE_p_long exp, SWIGTYPE_p_long f) {
    return arblibJNI.fmpz_get_d_2exp(SWIGTYPE_p_long.getCPtr(exp), SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_set_d_2exp(SWIGTYPE_p_long f, double m, int exp) {
    arblibJNI.fmpz_set_d_2exp(SWIGTYPE_p_long.getCPtr(f), m, exp);
  }

  public static void fmpz_mul2_uiui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long h1, long h2) {
    arblibJNI.fmpz_mul2_uiui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h1, h2);
  }

  public static void fmpz_divexact2_uiui(SWIGTYPE_p_long f, SWIGTYPE_p_long g, long h1, long h2) {
    arblibJNI.fmpz_divexact2_uiui(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), h1, h2);
  }

  public static void fmpz_mul_tdiv_q_2exp(SWIGTYPE_p_long f, SWIGTYPE_p_long g, SWIGTYPE_p_long h, long exp) {
    arblibJNI.fmpz_mul_tdiv_q_2exp(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(h), exp);
  }

  public static void fmpz_mul_si_tdiv_q_2exp(SWIGTYPE_p_long f, SWIGTYPE_p_long g, int x, long exp) {
    arblibJNI.fmpz_mul_si_tdiv_q_2exp(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g), x, exp);
  }

  public static void fmpz_fac_ui(SWIGTYPE_p_long f, long n) {
    arblibJNI.fmpz_fac_ui(SWIGTYPE_p_long.getCPtr(f), n);
  }

  public static void fmpz_fib_ui(SWIGTYPE_p_long f, long n) {
    arblibJNI.fmpz_fib_ui(SWIGTYPE_p_long.getCPtr(f), n);
  }

  public static void fmpz_bin_uiui(SWIGTYPE_p_long res, long n, long k) {
    arblibJNI.fmpz_bin_uiui(SWIGTYPE_p_long.getCPtr(res), n, k);
  }

  public static void _fmpz_rfac_ui(SWIGTYPE_p_long r, SWIGTYPE_p_long x, long a, long b) {
    arblibJNI._fmpz_rfac_ui(SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(x), a, b);
  }

  public static void fmpz_rfac_ui(SWIGTYPE_p_long r, SWIGTYPE_p_long x, long n) {
    arblibJNI.fmpz_rfac_ui(SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(x), n);
  }

  public static void fmpz_rfac_uiui(SWIGTYPE_p_long r, long x, long n) {
    arblibJNI.fmpz_rfac_uiui(SWIGTYPE_p_long.getCPtr(r), x, n);
  }

  public static int fmpz_bit_pack(SWIGTYPE_p_unsigned_long arr, long shift, long bits, SWIGTYPE_p_long coeff, int negate, int borrow) {
    return arblibJNI.fmpz_bit_pack(SWIGTYPE_p_unsigned_long.getCPtr(arr), shift, bits, SWIGTYPE_p_long.getCPtr(coeff), negate, borrow);
  }

  public static int fmpz_bit_unpack(SWIGTYPE_p_long coeff, SWIGTYPE_p_unsigned_long arr, long shift, long bits, int negate, int borrow) {
    return arblibJNI.fmpz_bit_unpack(SWIGTYPE_p_long.getCPtr(coeff), SWIGTYPE_p_unsigned_long.getCPtr(arr), shift, bits, negate, borrow);
  }

  public static void fmpz_bit_unpack_unsigned(SWIGTYPE_p_long coeff, SWIGTYPE_p_unsigned_long arr, long shift, long bits) {
    arblibJNI.fmpz_bit_unpack_unsigned(SWIGTYPE_p_long.getCPtr(coeff), SWIGTYPE_p_unsigned_long.getCPtr(arr), shift, bits);
  }

  public static void _fmpz_CRT_ui_precomp(SWIGTYPE_p_long out, SWIGTYPE_p_long r1, SWIGTYPE_p_long m1, long r2, long m2, long m2inv, SWIGTYPE_p_long m1m2, long c, int sign) {
    arblibJNI._fmpz_CRT_ui_precomp(SWIGTYPE_p_long.getCPtr(out), SWIGTYPE_p_long.getCPtr(r1), SWIGTYPE_p_long.getCPtr(m1), r2, m2, m2inv, SWIGTYPE_p_long.getCPtr(m1m2), c, sign);
  }

  public static void fmpz_CRT_ui(SWIGTYPE_p_long out, SWIGTYPE_p_long r1, SWIGTYPE_p_long m1, long r2, long m2, int sign) {
    arblibJNI.fmpz_CRT_ui(SWIGTYPE_p_long.getCPtr(out), SWIGTYPE_p_long.getCPtr(r1), SWIGTYPE_p_long.getCPtr(m1), r2, m2, sign);
  }

  public static void fmpz_comb_temp_init(fmpz_comb_temp_struct temp, fmpz_comb_struct comb) {
    arblibJNI.fmpz_comb_temp_init(fmpz_comb_temp_struct.getCPtr(temp), temp, fmpz_comb_struct.getCPtr(comb), comb);
  }

  public static void fmpz_comb_temp_clear(fmpz_comb_temp_struct temp) {
    arblibJNI.fmpz_comb_temp_clear(fmpz_comb_temp_struct.getCPtr(temp), temp);
  }

  public static void fmpz_comb_init(fmpz_comb_struct comb, SWIGTYPE_p_unsigned_long primes, int num_primes) {
    arblibJNI.fmpz_comb_init(fmpz_comb_struct.getCPtr(comb), comb, SWIGTYPE_p_unsigned_long.getCPtr(primes), num_primes);
  }

  public static void fmpz_comb_clear(fmpz_comb_struct comb) {
    arblibJNI.fmpz_comb_clear(fmpz_comb_struct.getCPtr(comb), comb);
  }

  public static void fmpz_multi_mod_ui(SWIGTYPE_p_unsigned_long out, SWIGTYPE_p_long in, fmpz_comb_struct comb, fmpz_comb_temp_struct temp) {
    arblibJNI.fmpz_multi_mod_ui(SWIGTYPE_p_unsigned_long.getCPtr(out), SWIGTYPE_p_long.getCPtr(in), fmpz_comb_struct.getCPtr(comb), comb, fmpz_comb_temp_struct.getCPtr(temp), temp);
  }

  public static void fmpz_multi_CRT_ui(SWIGTYPE_p_long output, SWIGTYPE_p_unsigned_long residues, fmpz_comb_struct comb, fmpz_comb_temp_struct temp, int sign) {
    arblibJNI.fmpz_multi_CRT_ui(SWIGTYPE_p_long.getCPtr(output), SWIGTYPE_p_unsigned_long.getCPtr(residues), fmpz_comb_struct.getCPtr(comb), comb, fmpz_comb_temp_struct.getCPtr(temp), temp, sign);
  }

  public static void fmpz_CRT(SWIGTYPE_p_long out, SWIGTYPE_p_long r1, SWIGTYPE_p_long m1, SWIGTYPE_p_long r2, SWIGTYPE_p_long m2, int sign) {
    arblibJNI.fmpz_CRT(SWIGTYPE_p_long.getCPtr(out), SWIGTYPE_p_long.getCPtr(r1), SWIGTYPE_p_long.getCPtr(m1), SWIGTYPE_p_long.getCPtr(r2), SWIGTYPE_p_long.getCPtr(m2), sign);
  }

  public static void fmpz_set_ui_smod(SWIGTYPE_p_long f, long x, long m) {
    arblibJNI.fmpz_set_ui_smod(SWIGTYPE_p_long.getCPtr(f), x, m);
  }

  public static void fmpz_multi_crt_init(fmpz_multi_crt_struct CRT) {
    arblibJNI.fmpz_multi_crt_init(fmpz_multi_crt_struct.getCPtr(CRT), CRT);
  }

  public static int fmpz_multi_crt_precompute(fmpz_multi_crt_struct CRT, SWIGTYPE_p_long moduli, int len) {
    return arblibJNI.fmpz_multi_crt_precompute(fmpz_multi_crt_struct.getCPtr(CRT), CRT, SWIGTYPE_p_long.getCPtr(moduli), len);
  }

  public static int fmpz_multi_crt_precompute_p(fmpz_multi_crt_struct CRT, SWIGTYPE_p_p_long moduli, int len) {
    return arblibJNI.fmpz_multi_crt_precompute_p(fmpz_multi_crt_struct.getCPtr(CRT), CRT, SWIGTYPE_p_p_long.getCPtr(moduli), len);
  }

  public static void fmpz_multi_crt_precomp(SWIGTYPE_p_long output, fmpz_multi_crt_struct P, SWIGTYPE_p_long inputs) {
    arblibJNI.fmpz_multi_crt_precomp(SWIGTYPE_p_long.getCPtr(output), fmpz_multi_crt_struct.getCPtr(P), P, SWIGTYPE_p_long.getCPtr(inputs));
  }

  public static void fmpz_multi_crt_precomp_p(SWIGTYPE_p_long output, fmpz_multi_crt_struct P, SWIGTYPE_p_p_long inputs) {
    arblibJNI.fmpz_multi_crt_precomp_p(SWIGTYPE_p_long.getCPtr(output), fmpz_multi_crt_struct.getCPtr(P), P, SWIGTYPE_p_p_long.getCPtr(inputs));
  }

  public static int fmpz_multi_crt(SWIGTYPE_p_long output, SWIGTYPE_p_long moduli, SWIGTYPE_p_long values, int len) {
    return arblibJNI.fmpz_multi_crt(SWIGTYPE_p_long.getCPtr(output), SWIGTYPE_p_long.getCPtr(moduli), SWIGTYPE_p_long.getCPtr(values), len);
  }

  public static void fmpz_multi_crt_clear(fmpz_multi_crt_struct P) {
    arblibJNI.fmpz_multi_crt_clear(fmpz_multi_crt_struct.getCPtr(P), P);
  }

  public static int _fmpz_multi_crt_local_size(fmpz_multi_crt_struct CRT) {
    return arblibJNI._fmpz_multi_crt_local_size(fmpz_multi_crt_struct.getCPtr(CRT), CRT);
  }

  public static void _fmpz_multi_crt_run(SWIGTYPE_p_long outputs, fmpz_multi_crt_struct CRT, SWIGTYPE_p_long inputs) {
    arblibJNI._fmpz_multi_crt_run(SWIGTYPE_p_long.getCPtr(outputs), fmpz_multi_crt_struct.getCPtr(CRT), CRT, SWIGTYPE_p_long.getCPtr(inputs));
  }

  public static void _fmpz_multi_crt_run_p(SWIGTYPE_p_long outputs, fmpz_multi_crt_struct CRT, SWIGTYPE_p_p_long inputs) {
    arblibJNI._fmpz_multi_crt_run_p(SWIGTYPE_p_long.getCPtr(outputs), fmpz_multi_crt_struct.getCPtr(CRT), CRT, SWIGTYPE_p_p_long.getCPtr(inputs));
  }

  public static long fmpz_abs_ubound_ui_2exp(SWIGTYPE_p_long exp, SWIGTYPE_p_long x, int bits) {
    return arblibJNI.fmpz_abs_ubound_ui_2exp(SWIGTYPE_p_long.getCPtr(exp), SWIGTYPE_p_long.getCPtr(x), bits);
  }

  public static long fmpz_abs_lbound_ui_2exp(SWIGTYPE_p_long exp, SWIGTYPE_p_long x, int bits) {
    return arblibJNI.fmpz_abs_lbound_ui_2exp(SWIGTYPE_p_long.getCPtr(exp), SWIGTYPE_p_long.getCPtr(x), bits);
  }

  public static void fmpz_lucas_chain(SWIGTYPE_p_long Vm, SWIGTYPE_p_long Vm1, SWIGTYPE_p_long A, SWIGTYPE_p_long m, SWIGTYPE_p_long n) {
    arblibJNI.fmpz_lucas_chain(SWIGTYPE_p_long.getCPtr(Vm), SWIGTYPE_p_long.getCPtr(Vm1), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(m), SWIGTYPE_p_long.getCPtr(n));
  }

  public static void fmpz_lucas_chain_full(SWIGTYPE_p_long Vm, SWIGTYPE_p_long Vm1, SWIGTYPE_p_long A, SWIGTYPE_p_long B, SWIGTYPE_p_long m, SWIGTYPE_p_long n) {
    arblibJNI.fmpz_lucas_chain_full(SWIGTYPE_p_long.getCPtr(Vm), SWIGTYPE_p_long.getCPtr(Vm1), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(m), SWIGTYPE_p_long.getCPtr(n));
  }

  public static void fmpz_lucas_chain_double(SWIGTYPE_p_long U2m, SWIGTYPE_p_long U2m1, SWIGTYPE_p_long Um, SWIGTYPE_p_long Um1, SWIGTYPE_p_long A, SWIGTYPE_p_long B, SWIGTYPE_p_long n) {
    arblibJNI.fmpz_lucas_chain_double(SWIGTYPE_p_long.getCPtr(U2m), SWIGTYPE_p_long.getCPtr(U2m1), SWIGTYPE_p_long.getCPtr(Um), SWIGTYPE_p_long.getCPtr(Um1), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(n));
  }

  public static void fmpz_lucas_chain_add(SWIGTYPE_p_long Umn, SWIGTYPE_p_long Umn1, SWIGTYPE_p_long Um, SWIGTYPE_p_long Um1, SWIGTYPE_p_long Un, SWIGTYPE_p_long Un1, SWIGTYPE_p_long A, SWIGTYPE_p_long B, SWIGTYPE_p_long n) {
    arblibJNI.fmpz_lucas_chain_add(SWIGTYPE_p_long.getCPtr(Umn), SWIGTYPE_p_long.getCPtr(Umn1), SWIGTYPE_p_long.getCPtr(Um), SWIGTYPE_p_long.getCPtr(Um1), SWIGTYPE_p_long.getCPtr(Un), SWIGTYPE_p_long.getCPtr(Un1), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(n));
  }

  public static void fmpz_lucas_chain_mul(SWIGTYPE_p_long Ukm, SWIGTYPE_p_long Ukm1, SWIGTYPE_p_long Um, SWIGTYPE_p_long Um1, SWIGTYPE_p_long A, SWIGTYPE_p_long B, SWIGTYPE_p_long k, SWIGTYPE_p_long n) {
    arblibJNI.fmpz_lucas_chain_mul(SWIGTYPE_p_long.getCPtr(Ukm), SWIGTYPE_p_long.getCPtr(Ukm1), SWIGTYPE_p_long.getCPtr(Um), SWIGTYPE_p_long.getCPtr(Um1), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(k), SWIGTYPE_p_long.getCPtr(n));
  }

  public static void fmpz_lucas_chain_VtoU(SWIGTYPE_p_long Um, SWIGTYPE_p_long Um1, SWIGTYPE_p_long Vm, SWIGTYPE_p_long Vm1, SWIGTYPE_p_long A, SWIGTYPE_p_long B, SWIGTYPE_p_long Dinv, SWIGTYPE_p_long n) {
    arblibJNI.fmpz_lucas_chain_VtoU(SWIGTYPE_p_long.getCPtr(Um), SWIGTYPE_p_long.getCPtr(Um1), SWIGTYPE_p_long.getCPtr(Vm), SWIGTYPE_p_long.getCPtr(Vm1), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(Dinv), SWIGTYPE_p_long.getCPtr(n));
  }

  public static int fmpz_is_probabprime_lucas(SWIGTYPE_p_long n) {
    return arblibJNI.fmpz_is_probabprime_lucas(SWIGTYPE_p_long.getCPtr(n));
  }

  public static int fmpz_is_probabprime_BPSW(SWIGTYPE_p_long n) {
    return arblibJNI.fmpz_is_probabprime_BPSW(SWIGTYPE_p_long.getCPtr(n));
  }

  public static int fmpz_is_strong_probabprime(SWIGTYPE_p_long n, SWIGTYPE_p_long a) {
    return arblibJNI.fmpz_is_strong_probabprime(SWIGTYPE_p_long.getCPtr(n), SWIGTYPE_p_long.getCPtr(a));
  }

  public static int fmpz_is_probabprime(SWIGTYPE_p_long p) {
    return arblibJNI.fmpz_is_probabprime(SWIGTYPE_p_long.getCPtr(p));
  }

  public static int fmpz_is_prime_pseudosquare(SWIGTYPE_p_long n) {
    return arblibJNI.fmpz_is_prime_pseudosquare(SWIGTYPE_p_long.getCPtr(n));
  }

  public static void _fmpz_nm1_trial_factors(SWIGTYPE_p_long n, SWIGTYPE_p_unsigned_long pm1, SWIGTYPE_p_long num_pm1, long limit) {
    arblibJNI._fmpz_nm1_trial_factors(SWIGTYPE_p_long.getCPtr(n), SWIGTYPE_p_unsigned_long.getCPtr(pm1), SWIGTYPE_p_long.getCPtr(num_pm1), limit);
  }

  public static int fmpz_is_prime_pocklington(SWIGTYPE_p_long F, SWIGTYPE_p_long R, SWIGTYPE_p_long n, SWIGTYPE_p_unsigned_long pm1, int num_pm1) {
    return arblibJNI.fmpz_is_prime_pocklington(SWIGTYPE_p_long.getCPtr(F), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(n), SWIGTYPE_p_unsigned_long.getCPtr(pm1), num_pm1);
  }

  public static void _fmpz_np1_trial_factors(SWIGTYPE_p_long n, SWIGTYPE_p_unsigned_long pp1, SWIGTYPE_p_long num_pp1, long limit) {
    arblibJNI._fmpz_np1_trial_factors(SWIGTYPE_p_long.getCPtr(n), SWIGTYPE_p_unsigned_long.getCPtr(pp1), SWIGTYPE_p_long.getCPtr(num_pp1), limit);
  }

  public static int fmpz_is_prime_morrison(SWIGTYPE_p_long F, SWIGTYPE_p_long R, SWIGTYPE_p_long n, SWIGTYPE_p_unsigned_long pm1, int num_pm1) {
    return arblibJNI.fmpz_is_prime_morrison(SWIGTYPE_p_long.getCPtr(F), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(n), SWIGTYPE_p_unsigned_long.getCPtr(pm1), num_pm1);
  }

  public static int fmpz_is_prime(SWIGTYPE_p_long p) {
    return arblibJNI.fmpz_is_prime(SWIGTYPE_p_long.getCPtr(p));
  }

  public static int fmpz_divisor_in_residue_class_lenstra(SWIGTYPE_p_long fac, SWIGTYPE_p_long n, SWIGTYPE_p_long r, SWIGTYPE_p_long s) {
    return arblibJNI.fmpz_divisor_in_residue_class_lenstra(SWIGTYPE_p_long.getCPtr(fac), SWIGTYPE_p_long.getCPtr(n), SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(s));
  }

  public static void fmpz_nextprime(SWIGTYPE_p_long res, SWIGTYPE_p_long n, int proved) {
    arblibJNI.fmpz_nextprime(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(n), proved);
  }

  public static void fmpz_primorial(SWIGTYPE_p_long res, long n) {
    arblibJNI.fmpz_primorial(SWIGTYPE_p_long.getCPtr(res), n);
  }

  public static void fmpz_euler_phi(SWIGTYPE_p_long res, SWIGTYPE_p_long n) {
    arblibJNI.fmpz_euler_phi(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(n));
  }

  public static int fmpz_moebius_mu(SWIGTYPE_p_long n) {
    return arblibJNI.fmpz_moebius_mu(SWIGTYPE_p_long.getCPtr(n));
  }

  public static void fmpz_divisor_sigma(SWIGTYPE_p_long res, SWIGTYPE_p_long n, long k) {
    arblibJNI.fmpz_divisor_sigma(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(n), k);
  }

  public static long n_powmod2_fmpz_preinv(long a, SWIGTYPE_p_long exp, long n, long ninv) {
    return arblibJNI.n_powmod2_fmpz_preinv(a, SWIGTYPE_p_long.getCPtr(exp), n, ninv);
  }

  public static long nmod_pow_fmpz(long a, SWIGTYPE_p_long exp, nmod_t mod) {
    return arblibJNI.nmod_pow_fmpz(a, SWIGTYPE_p_long.getCPtr(exp), nmod_t.getCPtr(mod), mod);
  }

  public static SWIGTYPE_p_long __new_fmpz() {
    long cPtr = arblibJNI.__new_fmpz();
    return (cPtr == 0) ? null : new SWIGTYPE_p_long(cPtr, false);
  }

  public static void __free_fmpz(SWIGTYPE_p_long f) {
    arblibJNI.__free_fmpz(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void __fmpz_set_si(SWIGTYPE_p_long f, int val) {
    arblibJNI.__fmpz_set_si(SWIGTYPE_p_long.getCPtr(f), val);
  }

  public static void __fmpz_set_ui(SWIGTYPE_p_long f, long val) {
    arblibJNI.__fmpz_set_ui(SWIGTYPE_p_long.getCPtr(f), val);
  }

  public static void __fmpz_init(SWIGTYPE_p_long f) {
    arblibJNI.__fmpz_init(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void __fmpz_init_set_ui(SWIGTYPE_p_long f, long g) {
    arblibJNI.__fmpz_init_set_ui(SWIGTYPE_p_long.getCPtr(f), g);
  }

  public static void __fmpz_clear(SWIGTYPE_p_long f) {
    arblibJNI.__fmpz_clear(SWIGTYPE_p_long.getCPtr(f));
  }

  public static int __fmpz_lt(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    return arblibJNI.__fmpz_lt(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int __fmpz_gt(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    return arblibJNI.__fmpz_gt(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int __fmpz_lte(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    return arblibJNI.__fmpz_lte(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int __fmpz_gte(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    return arblibJNI.__fmpz_gte(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int __fmpz_eq(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    return arblibJNI.__fmpz_eq(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static int __fmpz_neq(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    return arblibJNI.__fmpz_neq(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static void __fmpz_init_set(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    arblibJNI.__fmpz_init_set(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static void __fmpz_neg(SWIGTYPE_p_long f1, SWIGTYPE_p_long f2) {
    arblibJNI.__fmpz_neg(SWIGTYPE_p_long.getCPtr(f1), SWIGTYPE_p_long.getCPtr(f2));
  }

  public static void fmpz_factor_init(fmpz_factor_struct factor) {
    arblibJNI.fmpz_factor_init(fmpz_factor_struct.getCPtr(factor), factor);
  }

  public static void fmpz_factor_clear(fmpz_factor_struct factor) {
    arblibJNI.fmpz_factor_clear(fmpz_factor_struct.getCPtr(factor), factor);
  }

  public static void fmpz_factor_print(fmpz_factor_struct factor) {
    arblibJNI.fmpz_factor_print(fmpz_factor_struct.getCPtr(factor), factor);
  }

  public static void _fmpz_factor_fit_length(fmpz_factor_struct factor, int len) {
    arblibJNI._fmpz_factor_fit_length(fmpz_factor_struct.getCPtr(factor), factor, len);
  }

  public static void _fmpz_factor_append_ui(fmpz_factor_struct factor, long p, long exp) {
    arblibJNI._fmpz_factor_append_ui(fmpz_factor_struct.getCPtr(factor), factor, p, exp);
  }

  public static void _fmpz_factor_append(fmpz_factor_struct factor, SWIGTYPE_p_long p, long exp) {
    arblibJNI._fmpz_factor_append(fmpz_factor_struct.getCPtr(factor), factor, SWIGTYPE_p_long.getCPtr(p), exp);
  }

  public static void _fmpz_factor_set_length(fmpz_factor_struct factor, int newlen) {
    arblibJNI._fmpz_factor_set_length(fmpz_factor_struct.getCPtr(factor), factor, newlen);
  }

  public static void _fmpz_factor_concat(fmpz_factor_struct factor1, fmpz_factor_struct factor2, long exp) {
    arblibJNI._fmpz_factor_concat(fmpz_factor_struct.getCPtr(factor1), factor1, fmpz_factor_struct.getCPtr(factor2), factor2, exp);
  }

  public static void _fmpz_factor_extend_factor_ui(fmpz_factor_struct factor, long n) {
    arblibJNI._fmpz_factor_extend_factor_ui(fmpz_factor_struct.getCPtr(factor), factor, n);
  }

  public static int fmpz_factor_trial_range(fmpz_factor_struct factor, SWIGTYPE_p_long n, long start, long num_primes) {
    return arblibJNI.fmpz_factor_trial_range(fmpz_factor_struct.getCPtr(factor), factor, SWIGTYPE_p_long.getCPtr(n), start, num_primes);
  }

  public static int fmpz_factor_trial(fmpz_factor_struct factor, SWIGTYPE_p_long n, int num_primes) {
    return arblibJNI.fmpz_factor_trial(fmpz_factor_struct.getCPtr(factor), factor, SWIGTYPE_p_long.getCPtr(n), num_primes);
  }

  public static void fmpz_factor(fmpz_factor_struct factor, SWIGTYPE_p_long n) {
    arblibJNI.fmpz_factor(fmpz_factor_struct.getCPtr(factor), factor, SWIGTYPE_p_long.getCPtr(n));
  }

  public static void fmpz_factor_no_trial(fmpz_factor_struct factor, SWIGTYPE_p_long n) {
    arblibJNI.fmpz_factor_no_trial(fmpz_factor_struct.getCPtr(factor), factor, SWIGTYPE_p_long.getCPtr(n));
  }

  public static int fmpz_factor_smooth(fmpz_factor_struct factor, SWIGTYPE_p_long n, int bits, int proved) {
    return arblibJNI.fmpz_factor_smooth(fmpz_factor_struct.getCPtr(factor), factor, SWIGTYPE_p_long.getCPtr(n), bits, proved);
  }

  public static void fmpz_factor_si(fmpz_factor_struct factor, int n) {
    arblibJNI.fmpz_factor_si(fmpz_factor_struct.getCPtr(factor), factor, n);
  }

  public static int fmpz_factor_pp1(SWIGTYPE_p_long factor, SWIGTYPE_p_long n, long B1, long B2_sqrt, long c) {
    return arblibJNI.fmpz_factor_pp1(SWIGTYPE_p_long.getCPtr(factor), SWIGTYPE_p_long.getCPtr(n), B1, B2_sqrt, c);
  }

  public static void fmpz_factor_refine(fmpz_factor_struct res, fmpz_factor_struct f) {
    arblibJNI.fmpz_factor_refine(fmpz_factor_struct.getCPtr(res), res, fmpz_factor_struct.getCPtr(f), f);
  }

  public static void flint_mpn_sqr_and_add_a(SWIGTYPE_p_unsigned_long y, SWIGTYPE_p_unsigned_long a, SWIGTYPE_p_unsigned_long n, long n_size, SWIGTYPE_p_unsigned_long ninv, long normbits) {
    arblibJNI.flint_mpn_sqr_and_add_a(SWIGTYPE_p_unsigned_long.getCPtr(y), SWIGTYPE_p_unsigned_long.getCPtr(a), SWIGTYPE_p_unsigned_long.getCPtr(n), n_size, SWIGTYPE_p_unsigned_long.getCPtr(ninv), normbits);
  }

  public static int flint_mpn_factor_pollard_brent_single(SWIGTYPE_p_unsigned_long factor, SWIGTYPE_p_unsigned_long n, SWIGTYPE_p_unsigned_long ninv, SWIGTYPE_p_unsigned_long a, SWIGTYPE_p_unsigned_long y, long n_size, long normbits, long max_iters) {
    return arblibJNI.flint_mpn_factor_pollard_brent_single(SWIGTYPE_p_unsigned_long.getCPtr(factor), SWIGTYPE_p_unsigned_long.getCPtr(n), SWIGTYPE_p_unsigned_long.getCPtr(ninv), SWIGTYPE_p_unsigned_long.getCPtr(a), SWIGTYPE_p_unsigned_long.getCPtr(y), n_size, normbits, max_iters);
  }

  public static int fmpz_factor_pollard_brent_single(SWIGTYPE_p_long p_factor, SWIGTYPE_p_long n_in, SWIGTYPE_p_long yi, SWIGTYPE_p_long ai, long max_iters) {
    return arblibJNI.fmpz_factor_pollard_brent_single(SWIGTYPE_p_long.getCPtr(p_factor), SWIGTYPE_p_long.getCPtr(n_in), SWIGTYPE_p_long.getCPtr(yi), SWIGTYPE_p_long.getCPtr(ai), max_iters);
  }

  public static int fmpz_factor_pollard_brent(SWIGTYPE_p_long factor, flint_rand_s state, SWIGTYPE_p_long n, long max_tries, long max_iters) {
    return arblibJNI.fmpz_factor_pollard_brent(SWIGTYPE_p_long.getCPtr(factor), flint_rand_s.getCPtr(state), state, SWIGTYPE_p_long.getCPtr(n), max_tries, max_iters);
  }

  public static void fmpz_factor_expand_iterative(SWIGTYPE_p_long n, fmpz_factor_struct factor) {
    arblibJNI.fmpz_factor_expand_iterative(SWIGTYPE_p_long.getCPtr(n), fmpz_factor_struct.getCPtr(factor), factor);
  }

  public static void fmpz_factor_expand_multiexp(SWIGTYPE_p_long n, fmpz_factor_struct factor) {
    arblibJNI.fmpz_factor_expand_multiexp(SWIGTYPE_p_long.getCPtr(n), fmpz_factor_struct.getCPtr(factor), factor);
  }

  public static void fmpz_factor_expand(SWIGTYPE_p_long n, fmpz_factor_struct factor) {
    arblibJNI.fmpz_factor_expand(SWIGTYPE_p_long.getCPtr(n), fmpz_factor_struct.getCPtr(factor), factor);
  }

  public static void fmpz_factor_euler_phi(SWIGTYPE_p_long res, fmpz_factor_struct fac) {
    arblibJNI.fmpz_factor_euler_phi(SWIGTYPE_p_long.getCPtr(res), fmpz_factor_struct.getCPtr(fac), fac);
  }

  public static int fmpz_factor_moebius_mu(fmpz_factor_struct fac) {
    return arblibJNI.fmpz_factor_moebius_mu(fmpz_factor_struct.getCPtr(fac), fac);
  }

  public static void fmpz_factor_divisor_sigma(SWIGTYPE_p_long res, fmpz_factor_struct fac, long k) {
    arblibJNI.fmpz_factor_divisor_sigma(SWIGTYPE_p_long.getCPtr(res), fmpz_factor_struct.getCPtr(fac), fac, k);
  }

  public static void fmpz_factor_ecm_init(ecm_s ecm_inf, long sz) {
    arblibJNI.fmpz_factor_ecm_init(ecm_s.getCPtr(ecm_inf), ecm_inf, sz);
  }

  public static void fmpz_factor_ecm_clear(ecm_s ecm_inf) {
    arblibJNI.fmpz_factor_ecm_clear(ecm_s.getCPtr(ecm_inf), ecm_inf);
  }

  public static void fmpz_factor_ecm_addmod(SWIGTYPE_p_unsigned_long a, SWIGTYPE_p_unsigned_long b, SWIGTYPE_p_unsigned_long c, SWIGTYPE_p_unsigned_long n, long n_size) {
    arblibJNI.fmpz_factor_ecm_addmod(SWIGTYPE_p_unsigned_long.getCPtr(a), SWIGTYPE_p_unsigned_long.getCPtr(b), SWIGTYPE_p_unsigned_long.getCPtr(c), SWIGTYPE_p_unsigned_long.getCPtr(n), n_size);
  }

  public static void fmpz_factor_ecm_submod(SWIGTYPE_p_unsigned_long x, SWIGTYPE_p_unsigned_long a, SWIGTYPE_p_unsigned_long b, SWIGTYPE_p_unsigned_long n, long n_size) {
    arblibJNI.fmpz_factor_ecm_submod(SWIGTYPE_p_unsigned_long.getCPtr(x), SWIGTYPE_p_unsigned_long.getCPtr(a), SWIGTYPE_p_unsigned_long.getCPtr(b), SWIGTYPE_p_unsigned_long.getCPtr(n), n_size);
  }

  public static void fmpz_factor_ecm_double(SWIGTYPE_p_unsigned_long x, SWIGTYPE_p_unsigned_long z, SWIGTYPE_p_unsigned_long x0, SWIGTYPE_p_unsigned_long z0, SWIGTYPE_p_unsigned_long n, ecm_s ecm_inf) {
    arblibJNI.fmpz_factor_ecm_double(SWIGTYPE_p_unsigned_long.getCPtr(x), SWIGTYPE_p_unsigned_long.getCPtr(z), SWIGTYPE_p_unsigned_long.getCPtr(x0), SWIGTYPE_p_unsigned_long.getCPtr(z0), SWIGTYPE_p_unsigned_long.getCPtr(n), ecm_s.getCPtr(ecm_inf), ecm_inf);
  }

  public static void fmpz_factor_ecm_add(SWIGTYPE_p_unsigned_long x, SWIGTYPE_p_unsigned_long z, SWIGTYPE_p_unsigned_long x1, SWIGTYPE_p_unsigned_long z1, SWIGTYPE_p_unsigned_long x2, SWIGTYPE_p_unsigned_long z2, SWIGTYPE_p_unsigned_long x0, SWIGTYPE_p_unsigned_long z0, SWIGTYPE_p_unsigned_long n, ecm_s ecm_inf) {
    arblibJNI.fmpz_factor_ecm_add(SWIGTYPE_p_unsigned_long.getCPtr(x), SWIGTYPE_p_unsigned_long.getCPtr(z), SWIGTYPE_p_unsigned_long.getCPtr(x1), SWIGTYPE_p_unsigned_long.getCPtr(z1), SWIGTYPE_p_unsigned_long.getCPtr(x2), SWIGTYPE_p_unsigned_long.getCPtr(z2), SWIGTYPE_p_unsigned_long.getCPtr(x0), SWIGTYPE_p_unsigned_long.getCPtr(z0), SWIGTYPE_p_unsigned_long.getCPtr(n), ecm_s.getCPtr(ecm_inf), ecm_inf);
  }

  public static void fmpz_factor_ecm_mul_montgomery_ladder(SWIGTYPE_p_unsigned_long x, SWIGTYPE_p_unsigned_long z, SWIGTYPE_p_unsigned_long x0, SWIGTYPE_p_unsigned_long z0, long k, SWIGTYPE_p_unsigned_long n, ecm_s ecm_inf) {
    arblibJNI.fmpz_factor_ecm_mul_montgomery_ladder(SWIGTYPE_p_unsigned_long.getCPtr(x), SWIGTYPE_p_unsigned_long.getCPtr(z), SWIGTYPE_p_unsigned_long.getCPtr(x0), SWIGTYPE_p_unsigned_long.getCPtr(z0), k, SWIGTYPE_p_unsigned_long.getCPtr(n), ecm_s.getCPtr(ecm_inf), ecm_inf);
  }

  public static int fmpz_factor_ecm_select_curve(SWIGTYPE_p_unsigned_long f, SWIGTYPE_p_unsigned_long sig, SWIGTYPE_p_unsigned_long n, ecm_s ecm_inf) {
    return arblibJNI.fmpz_factor_ecm_select_curve(SWIGTYPE_p_unsigned_long.getCPtr(f), SWIGTYPE_p_unsigned_long.getCPtr(sig), SWIGTYPE_p_unsigned_long.getCPtr(n), ecm_s.getCPtr(ecm_inf), ecm_inf);
  }

  public static int fmpz_factor_ecm_stage_I(SWIGTYPE_p_unsigned_long f, SWIGTYPE_p_unsigned_long prime_array, long num, long B1, SWIGTYPE_p_unsigned_long n, ecm_s ecm_inf) {
    return arblibJNI.fmpz_factor_ecm_stage_I(SWIGTYPE_p_unsigned_long.getCPtr(f), SWIGTYPE_p_unsigned_long.getCPtr(prime_array), num, B1, SWIGTYPE_p_unsigned_long.getCPtr(n), ecm_s.getCPtr(ecm_inf), ecm_inf);
  }

  public static int fmpz_factor_ecm_stage_II(SWIGTYPE_p_unsigned_long f, long B1, long B2, long P, SWIGTYPE_p_unsigned_long n, ecm_s ecm_inf) {
    return arblibJNI.fmpz_factor_ecm_stage_II(SWIGTYPE_p_unsigned_long.getCPtr(f), B1, B2, P, SWIGTYPE_p_unsigned_long.getCPtr(n), ecm_s.getCPtr(ecm_inf), ecm_inf);
  }

  public static int fmpz_factor_ecm(SWIGTYPE_p_long f, long curves, long B1, long B2, flint_rand_s state, SWIGTYPE_p_long n_in) {
    return arblibJNI.fmpz_factor_ecm(SWIGTYPE_p_long.getCPtr(f), curves, B1, B2, flint_rand_s.getCPtr(state), state, SWIGTYPE_p_long.getCPtr(n_in));
  }

  public static void fmpz_factor_get_fmpz(SWIGTYPE_p_long z, fmpz_factor_struct factor, int i) {
    arblibJNI.fmpz_factor_get_fmpz(SWIGTYPE_p_long.getCPtr(z), fmpz_factor_struct.getCPtr(factor), factor, i);
  }

  public static __mpf_struct _mpf_vec_init(int len, long prec) {
    long cPtr = arblibJNI._mpf_vec_init(len, prec);
    return (cPtr == 0) ? null : new __mpf_struct(cPtr, false);
  }

  public static void _mpf_vec_clear(__mpf_struct vec, int len) {
    arblibJNI._mpf_vec_clear(__mpf_struct.getCPtr(vec), vec, len);
  }

  public static void _mpf_vec_randtest(__mpf_struct f, flint_rand_s state, int len, long bits) {
    arblibJNI._mpf_vec_randtest(__mpf_struct.getCPtr(f), f, flint_rand_s.getCPtr(state), state, len, bits);
  }

  public static void _mpf_vec_zero(__mpf_struct vec, int len) {
    arblibJNI._mpf_vec_zero(__mpf_struct.getCPtr(vec), vec, len);
  }

  public static void _mpf_vec_set(__mpf_struct vec1, __mpf_struct vec2, int len2) {
    arblibJNI._mpf_vec_set(__mpf_struct.getCPtr(vec1), vec1, __mpf_struct.getCPtr(vec2), vec2, len2);
  }

  public static int _mpf_vec_equal(__mpf_struct vec1, __mpf_struct vec2, int len) {
    return arblibJNI._mpf_vec_equal(__mpf_struct.getCPtr(vec1), vec1, __mpf_struct.getCPtr(vec2), vec2, len);
  }

  public static int _mpf_vec_approx_equal(__mpf_struct vec1, __mpf_struct vec2, int len, long bits) {
    return arblibJNI._mpf_vec_approx_equal(__mpf_struct.getCPtr(vec1), vec1, __mpf_struct.getCPtr(vec2), vec2, len, bits);
  }

  public static int _mpf_vec_is_zero(__mpf_struct vec, int len) {
    return arblibJNI._mpf_vec_is_zero(__mpf_struct.getCPtr(vec), vec, len);
  }

  public static void _mpf_vec_add(__mpf_struct res, __mpf_struct vec1, __mpf_struct vec2, int len2) {
    arblibJNI._mpf_vec_add(__mpf_struct.getCPtr(res), res, __mpf_struct.getCPtr(vec1), vec1, __mpf_struct.getCPtr(vec2), vec2, len2);
  }

  public static void _mpf_vec_sub(__mpf_struct res, __mpf_struct vec1, __mpf_struct vec2, int len2) {
    arblibJNI._mpf_vec_sub(__mpf_struct.getCPtr(res), res, __mpf_struct.getCPtr(vec1), vec1, __mpf_struct.getCPtr(vec2), vec2, len2);
  }

  public static void _mpf_vec_scalar_mul_2exp(__mpf_struct res, __mpf_struct vec, int len, long exp) {
    arblibJNI._mpf_vec_scalar_mul_2exp(__mpf_struct.getCPtr(res), res, __mpf_struct.getCPtr(vec), vec, len, exp);
  }

  public static void _mpf_vec_scalar_mul_mpf(__mpf_struct res, __mpf_struct vec, int len, __mpf_struct c) {
    arblibJNI._mpf_vec_scalar_mul_mpf(__mpf_struct.getCPtr(res), res, __mpf_struct.getCPtr(vec), vec, len, __mpf_struct.getCPtr(c), c);
  }

  public static void _mpf_vec_dot(__mpf_struct res, __mpf_struct vec1, __mpf_struct vec2, int len2) {
    arblibJNI._mpf_vec_dot(__mpf_struct.getCPtr(res), res, __mpf_struct.getCPtr(vec1), vec1, __mpf_struct.getCPtr(vec2), vec2, len2);
  }

  public static void _mpf_vec_norm(__mpf_struct res, __mpf_struct vec, int len) {
    arblibJNI._mpf_vec_norm(__mpf_struct.getCPtr(res), res, __mpf_struct.getCPtr(vec), vec, len);
  }

  public static int _mpf_vec_dot2(__mpf_struct res, __mpf_struct vec1, __mpf_struct vec2, int len2, long prec) {
    return arblibJNI._mpf_vec_dot2(__mpf_struct.getCPtr(res), res, __mpf_struct.getCPtr(vec1), vec1, __mpf_struct.getCPtr(vec2), vec2, len2, prec);
  }

  public static void _mpf_vec_norm2(__mpf_struct res, __mpf_struct vec, int len, long prec) {
    arblibJNI._mpf_vec_norm2(__mpf_struct.getCPtr(res), res, __mpf_struct.getCPtr(vec), vec, len, prec);
  }

  public static SWIGTYPE_p_long _fmpz_vec_init(int len) {
    long cPtr = arblibJNI._fmpz_vec_init(len);
    return (cPtr == 0) ? null : new SWIGTYPE_p_long(cPtr, false);
  }

  public static void _fmpz_vec_clear(SWIGTYPE_p_long vec, int len) {
    arblibJNI._fmpz_vec_clear(SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_randtest(SWIGTYPE_p_long f, flint_rand_s state, int len, long bits) {
    arblibJNI._fmpz_vec_randtest(SWIGTYPE_p_long.getCPtr(f), flint_rand_s.getCPtr(state), state, len, bits);
  }

  public static void _fmpz_vec_randtest_unsigned(SWIGTYPE_p_long f, flint_rand_s state, int len, long bits) {
    arblibJNI._fmpz_vec_randtest_unsigned(SWIGTYPE_p_long.getCPtr(f), flint_rand_s.getCPtr(state), state, len, bits);
  }

  public static int _fmpz_vec_max_bits(SWIGTYPE_p_long vec, int len) {
    return arblibJNI._fmpz_vec_max_bits(SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static int _fmpz_vec_max_bits_ref(SWIGTYPE_p_long vec, int len) {
    return arblibJNI._fmpz_vec_max_bits_ref(SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_sum_max_bits(SWIGTYPE_p_long sumabs, SWIGTYPE_p_long maxabs, SWIGTYPE_p_long coeffs, int length) {
    arblibJNI._fmpz_vec_sum_max_bits(SWIGTYPE_p_long.getCPtr(sumabs), SWIGTYPE_p_long.getCPtr(maxabs), SWIGTYPE_p_long.getCPtr(coeffs), length);
  }

  public static int _fmpz_vec_max_limbs(SWIGTYPE_p_long vec, int len) {
    return arblibJNI._fmpz_vec_max_limbs(SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_height(SWIGTYPE_p_long height, SWIGTYPE_p_long vec, int len) {
    arblibJNI._fmpz_vec_height(SWIGTYPE_p_long.getCPtr(height), SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static int _fmpz_vec_height_index(SWIGTYPE_p_long vec, int len) {
    return arblibJNI._fmpz_vec_height_index(SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static int _fmpz_vec_fprint(_IO_FILE file, SWIGTYPE_p_long vec, int len) {
    return arblibJNI._fmpz_vec_fprint(_IO_FILE.getCPtr(file), file, SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static int _fmpz_vec_print(SWIGTYPE_p_long vec, int len) {
    return arblibJNI._fmpz_vec_print(SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static int _fmpz_vec_fread(_IO_FILE file, SWIGTYPE_p_p_long vec, SWIGTYPE_p_long len) {
    return arblibJNI._fmpz_vec_fread(_IO_FILE.getCPtr(file), file, SWIGTYPE_p_p_long.getCPtr(vec), SWIGTYPE_p_long.getCPtr(len));
  }

  public static int _fmpz_vec_read(SWIGTYPE_p_p_long vec, SWIGTYPE_p_long len) {
    return arblibJNI._fmpz_vec_read(SWIGTYPE_p_p_long.getCPtr(vec), SWIGTYPE_p_long.getCPtr(len));
  }

  public static void _fmpz_vec_set_nmod_vec(SWIGTYPE_p_long res, SWIGTYPE_p_unsigned_long poly, int len, nmod_t mod) {
    arblibJNI._fmpz_vec_set_nmod_vec(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, nmod_t.getCPtr(mod), mod);
  }

  public static void _fmpz_vec_get_nmod_vec(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_long poly, int len, nmod_t mod) {
    arblibJNI._fmpz_vec_get_nmod_vec(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, nmod_t.getCPtr(mod), mod);
  }

  public static int _fmpz_vec_get_fft(SWIGTYPE_p_p_unsigned_long coeffs_f, SWIGTYPE_p_long coeffs_m, int l, int length) {
    return arblibJNI._fmpz_vec_get_fft(SWIGTYPE_p_p_unsigned_long.getCPtr(coeffs_f), SWIGTYPE_p_long.getCPtr(coeffs_m), l, length);
  }

  public static void _fmpz_vec_set_fft(SWIGTYPE_p_long coeffs_m, int length, SWIGTYPE_p_p_unsigned_long coeffs_f, int limbs, int sign) {
    arblibJNI._fmpz_vec_set_fft(SWIGTYPE_p_long.getCPtr(coeffs_m), length, SWIGTYPE_p_p_unsigned_long.getCPtr(coeffs_f), limbs, sign);
  }

  public static int _fmpz_vec_get_d_vec_2exp(SWIGTYPE_p_double appv, SWIGTYPE_p_long vec, int len) {
    return arblibJNI._fmpz_vec_get_d_vec_2exp(SWIGTYPE_p_double.getCPtr(appv), SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_get_mpf_vec(__mpf_struct appv, SWIGTYPE_p_long vec, int len) {
    arblibJNI._fmpz_vec_get_mpf_vec(__mpf_struct.getCPtr(appv), appv, SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_set(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2) {
    arblibJNI._fmpz_vec_set(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2);
  }

  public static void _fmpz_vec_swap(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2) {
    arblibJNI._fmpz_vec_swap(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2);
  }

  public static void _fmpz_vec_zero(SWIGTYPE_p_long vec, int len) {
    arblibJNI._fmpz_vec_zero(SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_neg(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2) {
    arblibJNI._fmpz_vec_neg(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2);
  }

  public static void _fmpz_vec_scalar_abs(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2) {
    arblibJNI._fmpz_vec_scalar_abs(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2);
  }

  public static int _fmpz_vec_equal(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len) {
    return arblibJNI._fmpz_vec_equal(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len);
  }

  public static int _fmpz_vec_is_zero(SWIGTYPE_p_long vec, int len) {
    return arblibJNI._fmpz_vec_is_zero(SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_max(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, SWIGTYPE_p_long vec3, int len) {
    arblibJNI._fmpz_vec_max(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), SWIGTYPE_p_long.getCPtr(vec3), len);
  }

  public static void _fmpz_vec_max_inplace(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len) {
    arblibJNI._fmpz_vec_max_inplace(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len);
  }

  public static void _fmpz_vec_min(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, SWIGTYPE_p_long vec3, int len) {
    arblibJNI._fmpz_vec_min(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), SWIGTYPE_p_long.getCPtr(vec3), len);
  }

  public static void _fmpz_vec_min_inplace(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len) {
    arblibJNI._fmpz_vec_min_inplace(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len);
  }

  public static void _fmpz_vec_sort(SWIGTYPE_p_long vec, int len) {
    arblibJNI._fmpz_vec_sort(SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_add(SWIGTYPE_p_long res, SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2) {
    arblibJNI._fmpz_vec_add(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2);
  }

  public static void _fmpz_vec_sub(SWIGTYPE_p_long res, SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2) {
    arblibJNI._fmpz_vec_sub(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2);
  }

  public static void _fmpz_vec_scalar_mul_si(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, int c) {
    arblibJNI._fmpz_vec_scalar_mul_si(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c);
  }

  public static void _fmpz_vec_scalar_mul_ui(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, long c) {
    arblibJNI._fmpz_vec_scalar_mul_ui(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c);
  }

  public static void _fmpz_vec_scalar_mul_fmpz(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, SWIGTYPE_p_long x) {
    arblibJNI._fmpz_vec_scalar_mul_fmpz(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void _fmpz_vec_scalar_mul_2exp(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, long exp) {
    arblibJNI._fmpz_vec_scalar_mul_2exp(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, exp);
  }

  public static void _fmpz_vec_scalar_divexact_fmpz(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, SWIGTYPE_p_long x) {
    arblibJNI._fmpz_vec_scalar_divexact_fmpz(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void _fmpz_vec_scalar_divexact_si(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, int c) {
    arblibJNI._fmpz_vec_scalar_divexact_si(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c);
  }

  public static void _fmpz_vec_scalar_divexact_ui(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, long c) {
    arblibJNI._fmpz_vec_scalar_divexact_ui(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c);
  }

  public static void _fmpz_vec_scalar_fdiv_q_fmpz(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, SWIGTYPE_p_long c) {
    arblibJNI._fmpz_vec_scalar_fdiv_q_fmpz(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpz_vec_scalar_fdiv_q_si(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, int c) {
    arblibJNI._fmpz_vec_scalar_fdiv_q_si(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c);
  }

  public static void _fmpz_vec_scalar_fdiv_q_ui(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, long c) {
    arblibJNI._fmpz_vec_scalar_fdiv_q_ui(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c);
  }

  public static void _fmpz_vec_scalar_fdiv_q_2exp(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, long exp) {
    arblibJNI._fmpz_vec_scalar_fdiv_q_2exp(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, exp);
  }

  public static void _fmpz_vec_scalar_fdiv_r_2exp(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, long exp) {
    arblibJNI._fmpz_vec_scalar_fdiv_r_2exp(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, exp);
  }

  public static void _fmpz_vec_scalar_tdiv_q_fmpz(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, SWIGTYPE_p_long c) {
    arblibJNI._fmpz_vec_scalar_tdiv_q_fmpz(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpz_vec_scalar_tdiv_q_si(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, int c) {
    arblibJNI._fmpz_vec_scalar_tdiv_q_si(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c);
  }

  public static void _fmpz_vec_scalar_tdiv_q_ui(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, long c) {
    arblibJNI._fmpz_vec_scalar_tdiv_q_ui(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c);
  }

  public static void _fmpz_vec_scalar_tdiv_q_2exp(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, long exp) {
    arblibJNI._fmpz_vec_scalar_tdiv_q_2exp(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, exp);
  }

  public static void _fmpz_vec_scalar_addmul_si(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, int c) {
    arblibJNI._fmpz_vec_scalar_addmul_si(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c);
  }

  public static void _fmpz_vec_scalar_addmul_fmpz(SWIGTYPE_p_long poly1, SWIGTYPE_p_long poly2, int len2, SWIGTYPE_p_long x) {
    arblibJNI._fmpz_vec_scalar_addmul_fmpz(SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(poly2), len2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void _fmpz_vec_scalar_addmul_si_2exp(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, int c, long exp) {
    arblibJNI._fmpz_vec_scalar_addmul_si_2exp(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c, exp);
  }

  public static void _fmpz_vec_scalar_submul_si(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, int c) {
    arblibJNI._fmpz_vec_scalar_submul_si(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c);
  }

  public static void _fmpz_vec_scalar_submul_fmpz(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, SWIGTYPE_p_long x) {
    arblibJNI._fmpz_vec_scalar_submul_fmpz(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void _fmpz_vec_scalar_submul_si_2exp(SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2, int c, long exp) {
    arblibJNI._fmpz_vec_scalar_submul_si_2exp(SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2, c, exp);
  }

  public static void _fmpz_vec_sum(SWIGTYPE_p_long res, SWIGTYPE_p_long vec, int len) {
    arblibJNI._fmpz_vec_sum(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_prod(SWIGTYPE_p_long res, SWIGTYPE_p_long vec, int len) {
    arblibJNI._fmpz_vec_prod(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_scalar_mod_fmpz(SWIGTYPE_p_long res, SWIGTYPE_p_long vec, int len, SWIGTYPE_p_long p) {
    arblibJNI._fmpz_vec_scalar_mod_fmpz(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(vec), len, SWIGTYPE_p_long.getCPtr(p));
  }

  public static void _fmpz_vec_scalar_smod_fmpz(SWIGTYPE_p_long res, SWIGTYPE_p_long vec, int len, SWIGTYPE_p_long p) {
    arblibJNI._fmpz_vec_scalar_smod_fmpz(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(vec), len, SWIGTYPE_p_long.getCPtr(p));
  }

  public static void _fmpz_vec_content(SWIGTYPE_p_long res, SWIGTYPE_p_long vec, int len) {
    arblibJNI._fmpz_vec_content(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_lcm(SWIGTYPE_p_long res, SWIGTYPE_p_long vec, int len) {
    arblibJNI._fmpz_vec_lcm(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(vec), len);
  }

  public static void _fmpz_vec_dot(SWIGTYPE_p_long res, SWIGTYPE_p_long vec1, SWIGTYPE_p_long vec2, int len2) {
    arblibJNI._fmpz_vec_dot(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_long.getCPtr(vec2), len2);
  }

  public static void _fmpz_vec_dot_ptr(SWIGTYPE_p_long c, SWIGTYPE_p_long vec1, SWIGTYPE_p_p_long vec2, int offset, int len) {
    arblibJNI._fmpz_vec_dot_ptr(SWIGTYPE_p_long.getCPtr(c), SWIGTYPE_p_long.getCPtr(vec1), SWIGTYPE_p_p_long.getCPtr(vec2), offset, len);
  }

  public static void fmpq_init(fmpq x) {
    arblibJNI.fmpq_init(fmpq.getCPtr(x), x);
  }

  public static void fmpq_clear(fmpq x) {
    arblibJNI.fmpq_clear(fmpq.getCPtr(x), x);
  }

  public static void fmpq_zero(fmpq res) {
    arblibJNI.fmpq_zero(fmpq.getCPtr(res), res);
  }

  public static void fmpq_one(fmpq res) {
    arblibJNI.fmpq_one(fmpq.getCPtr(res), res);
  }

  public static int fmpq_equal(fmpq x, fmpq y) {
    return arblibJNI.fmpq_equal(fmpq.getCPtr(x), x, fmpq.getCPtr(y), y);
  }

  public static int fmpq_sgn(fmpq x) {
    return arblibJNI.fmpq_sgn(fmpq.getCPtr(x), x);
  }

  public static int fmpq_is_zero(fmpq x) {
    return arblibJNI.fmpq_is_zero(fmpq.getCPtr(x), x);
  }

  public static int fmpq_is_one(fmpq x) {
    return arblibJNI.fmpq_is_one(fmpq.getCPtr(x), x);
  }

  public static int fmpq_is_pm1(fmpq x) {
    return arblibJNI.fmpq_is_pm1(fmpq.getCPtr(x), x);
  }

  public static void fmpq_set(fmpq dest, fmpq src) {
    arblibJNI.fmpq_set(fmpq.getCPtr(dest), dest, fmpq.getCPtr(src), src);
  }

  public static void fmpq_swap(fmpq op1, fmpq op2) {
    arblibJNI.fmpq_swap(fmpq.getCPtr(op1), op1, fmpq.getCPtr(op2), op2);
  }

  public static void fmpq_neg(fmpq dest, fmpq src) {
    arblibJNI.fmpq_neg(fmpq.getCPtr(dest), dest, fmpq.getCPtr(src), src);
  }

  public static void fmpq_abs(fmpq dest, fmpq src) {
    arblibJNI.fmpq_abs(fmpq.getCPtr(dest), dest, fmpq.getCPtr(src), src);
  }

  public static int _fmpq_cmp(SWIGTYPE_p_long p, SWIGTYPE_p_long q, SWIGTYPE_p_long r, SWIGTYPE_p_long s) {
    return arblibJNI._fmpq_cmp(SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(s));
  }

  public static int fmpq_cmp(fmpq x, fmpq y) {
    return arblibJNI.fmpq_cmp(fmpq.getCPtr(x), x, fmpq.getCPtr(y), y);
  }

  public static int _fmpq_cmp_fmpz(SWIGTYPE_p_long p, SWIGTYPE_p_long q, SWIGTYPE_p_long r) {
    return arblibJNI._fmpq_cmp_fmpz(SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), SWIGTYPE_p_long.getCPtr(r));
  }

  public static int fmpq_cmp_fmpz(fmpq x, SWIGTYPE_p_long y) {
    return arblibJNI.fmpq_cmp_fmpz(fmpq.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y));
  }

  public static int _fmpq_cmp_ui(SWIGTYPE_p_long p, SWIGTYPE_p_long q, long c) {
    return arblibJNI._fmpq_cmp_ui(SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), c);
  }

  public static int fmpq_cmp_ui(fmpq x, long c) {
    return arblibJNI.fmpq_cmp_ui(fmpq.getCPtr(x), x, c);
  }

  public static int _fmpq_cmp_si(SWIGTYPE_p_long p, SWIGTYPE_p_long q, int c) {
    return arblibJNI._fmpq_cmp_si(SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), c);
  }

  public static int fmpq_cmp_si(fmpq x, int c) {
    return arblibJNI.fmpq_cmp_si(fmpq.getCPtr(x), x, c);
  }

  public static void _fmpq_canonicalise(SWIGTYPE_p_long num, SWIGTYPE_p_long den) {
    arblibJNI._fmpq_canonicalise(SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den));
  }

  public static void fmpq_canonicalise(fmpq res) {
    arblibJNI.fmpq_canonicalise(fmpq.getCPtr(res), res);
  }

  public static int _fmpq_is_canonical(SWIGTYPE_p_long num, SWIGTYPE_p_long den) {
    return arblibJNI._fmpq_is_canonical(SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den));
  }

  public static int fmpq_is_canonical(fmpq x) {
    return arblibJNI.fmpq_is_canonical(fmpq.getCPtr(x), x);
  }

  public static void _fmpq_set_ui(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, long p, long q) {
    arblibJNI._fmpq_set_ui(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), p, q);
  }

  public static void fmpq_set_ui(fmpq res, long p, long q) {
    arblibJNI.fmpq_set_ui(fmpq.getCPtr(res), res, p, q);
  }

  public static void _fmpq_set_si(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, int p, long q) {
    arblibJNI._fmpq_set_si(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), p, q);
  }

  public static void fmpq_set_si(fmpq res, int p, long q) {
    arblibJNI.fmpq_set_si(fmpq.getCPtr(res), res, p, q);
  }

  public static int fmpq_equal_ui(fmpq q, int n) {
    return arblibJNI.fmpq_equal_ui(fmpq.getCPtr(q), q, n);
  }

  public static int fmpq_equal_si(fmpq q, int n) {
    return arblibJNI.fmpq_equal_si(fmpq.getCPtr(q), q, n);
  }

  public static void fmpq_set_fmpz_frac(fmpq res, SWIGTYPE_p_long p, SWIGTYPE_p_long q) {
    arblibJNI.fmpq_set_fmpz_frac(fmpq.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q));
  }

  public static int fmpq_set_str(fmpq res, String str, int base) {
    return arblibJNI.fmpq_set_str(fmpq.getCPtr(res), res, str, base);
  }

  public static void fmpq_set_mpq(fmpq dest, __mpq_struct src) {
    arblibJNI.fmpq_set_mpq(fmpq.getCPtr(dest), dest, __mpq_struct.getCPtr(src), src);
  }

  public static void fmpq_get_mpq(__mpq_struct dest, fmpq src) {
    arblibJNI.fmpq_get_mpq(__mpq_struct.getCPtr(dest), dest, fmpq.getCPtr(src), src);
  }

  public static double fmpq_get_d(fmpq a) {
    return arblibJNI.fmpq_get_d(fmpq.getCPtr(a), a);
  }

  public static int fmpq_get_mpfr(__mpfr_struct r, fmpq x, mpfr_rnd_t rnd) {
    return arblibJNI.fmpq_get_mpfr(__mpfr_struct.getCPtr(r), r, fmpq.getCPtr(x), x, rnd.swigValue());
  }

  public static void fmpq_get_mpz_frac(__mpz_struct a, __mpz_struct b, fmpq c) {
    arblibJNI.fmpq_get_mpz_frac(__mpz_struct.getCPtr(a), a, __mpz_struct.getCPtr(b), b, fmpq.getCPtr(c), c);
  }

  public static void flint_mpq_init_set_readonly(__mpq_struct z, fmpq f) {
    arblibJNI.flint_mpq_init_set_readonly(__mpq_struct.getCPtr(z), z, fmpq.getCPtr(f), f);
  }

  public static void flint_mpq_clear_readonly(__mpq_struct z) {
    arblibJNI.flint_mpq_clear_readonly(__mpq_struct.getCPtr(z), z);
  }

  public static void fmpq_init_set_readonly(fmpq f, __mpq_struct z) {
    arblibJNI.fmpq_init_set_readonly(fmpq.getCPtr(f), f, __mpq_struct.getCPtr(z), z);
  }

  public static void fmpq_clear_readonly(fmpq f) {
    arblibJNI.fmpq_clear_readonly(fmpq.getCPtr(f), f);
  }

  public static void fmpq_init_set_mpz_frac_readonly(fmpq z, __mpz_struct num, __mpz_struct den) {
    arblibJNI.fmpq_init_set_mpz_frac_readonly(fmpq.getCPtr(z), z, __mpz_struct.getCPtr(num), num, __mpz_struct.getCPtr(den), den);
  }

  public static String _fmpq_get_str(String str, int b, SWIGTYPE_p_long num, SWIGTYPE_p_long den) {
    return arblibJNI._fmpq_get_str(str, b, SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den));
  }

  public static String fmpq_get_str(String str, int b, fmpq x) {
    return arblibJNI.fmpq_get_str(str, b, fmpq.getCPtr(x), x);
  }

  public static int _fmpq_fprint(_IO_FILE file, SWIGTYPE_p_long num, SWIGTYPE_p_long den) {
    return arblibJNI._fmpq_fprint(_IO_FILE.getCPtr(file), file, SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den));
  }

  public static int fmpq_fprint(_IO_FILE file, fmpq x) {
    return arblibJNI.fmpq_fprint(_IO_FILE.getCPtr(file), file, fmpq.getCPtr(x), x);
  }

  public static int _fmpq_print(SWIGTYPE_p_long num, SWIGTYPE_p_long den) {
    return arblibJNI._fmpq_print(SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den));
  }

  public static int fmpq_print(fmpq x) {
    return arblibJNI.fmpq_print(fmpq.getCPtr(x), x);
  }

  public static void _fmpq_randtest(SWIGTYPE_p_long num, SWIGTYPE_p_long den, flint_rand_s state, long bits) {
    arblibJNI._fmpq_randtest(SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den), flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpq_randtest(fmpq res, flint_rand_s state, long bits) {
    arblibJNI.fmpq_randtest(fmpq.getCPtr(res), res, flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpq_randtest_not_zero(fmpq res, flint_rand_s state, long bits) {
    arblibJNI.fmpq_randtest_not_zero(fmpq.getCPtr(res), res, flint_rand_s.getCPtr(state), state, bits);
  }

  public static void _fmpq_randbits(SWIGTYPE_p_long num, SWIGTYPE_p_long den, flint_rand_s state, long bits) {
    arblibJNI._fmpq_randbits(SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den), flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpq_randbits(fmpq res, flint_rand_s state, long bits) {
    arblibJNI.fmpq_randbits(fmpq.getCPtr(res), res, flint_rand_s.getCPtr(state), state, bits);
  }

  public static void _fmpq_add_small(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, int p1, long q1, int p2, long q2) {
    arblibJNI._fmpq_add_small(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), p1, q1, p2, q2);
  }

  public static void _fmpq_mul_small(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, int p1, long q1, int p2, long q2) {
    arblibJNI._fmpq_mul_small(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), p1, q1, p2, q2);
  }

  public static void _fmpq_add(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long op1num, SWIGTYPE_p_long op1den, SWIGTYPE_p_long op2num, SWIGTYPE_p_long op2den) {
    arblibJNI._fmpq_add(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(op1num), SWIGTYPE_p_long.getCPtr(op1den), SWIGTYPE_p_long.getCPtr(op2num), SWIGTYPE_p_long.getCPtr(op2den));
  }

  public static void fmpq_add(fmpq res, fmpq op1, fmpq op2) {
    arblibJNI.fmpq_add(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, fmpq.getCPtr(op2), op2);
  }

  public static void _fmpq_add_si(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long p, SWIGTYPE_p_long q, int r) {
    arblibJNI._fmpq_add_si(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), r);
  }

  public static void fmpq_add_si(fmpq res, fmpq op1, int c) {
    arblibJNI.fmpq_add_si(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, c);
  }

  public static void _fmpq_add_ui(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long p, SWIGTYPE_p_long q, long r) {
    arblibJNI._fmpq_add_ui(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), r);
  }

  public static void fmpq_add_ui(fmpq res, fmpq op1, long c) {
    arblibJNI.fmpq_add_ui(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, c);
  }

  public static void _fmpq_add_fmpz(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long p, SWIGTYPE_p_long q, SWIGTYPE_p_long r) {
    arblibJNI._fmpq_add_fmpz(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), SWIGTYPE_p_long.getCPtr(r));
  }

  public static void fmpq_add_fmpz(fmpq res, fmpq op1, SWIGTYPE_p_long c) {
    arblibJNI.fmpq_add_fmpz(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpq_sub(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long op1num, SWIGTYPE_p_long op1den, SWIGTYPE_p_long op2num, SWIGTYPE_p_long op2den) {
    arblibJNI._fmpq_sub(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(op1num), SWIGTYPE_p_long.getCPtr(op1den), SWIGTYPE_p_long.getCPtr(op2num), SWIGTYPE_p_long.getCPtr(op2den));
  }

  public static void fmpq_sub(fmpq res, fmpq op1, fmpq op2) {
    arblibJNI.fmpq_sub(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, fmpq.getCPtr(op2), op2);
  }

  public static void _fmpq_sub_si(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long p, SWIGTYPE_p_long q, int r) {
    arblibJNI._fmpq_sub_si(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), r);
  }

  public static void fmpq_sub_si(fmpq res, fmpq op1, int c) {
    arblibJNI.fmpq_sub_si(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, c);
  }

  public static void _fmpq_sub_ui(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long p, SWIGTYPE_p_long q, long r) {
    arblibJNI._fmpq_sub_ui(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), r);
  }

  public static void fmpq_sub_ui(fmpq res, fmpq op1, long c) {
    arblibJNI.fmpq_sub_ui(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, c);
  }

  public static void _fmpq_sub_fmpz(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long p, SWIGTYPE_p_long q, SWIGTYPE_p_long r) {
    arblibJNI._fmpq_sub_fmpz(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), SWIGTYPE_p_long.getCPtr(r));
  }

  public static void fmpq_sub_fmpz(fmpq res, fmpq op1, SWIGTYPE_p_long c) {
    arblibJNI.fmpq_sub_fmpz(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpq_mul_si(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long p, SWIGTYPE_p_long q, int r) {
    arblibJNI._fmpq_mul_si(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), r);
  }

  public static void fmpq_mul_si(fmpq res, fmpq op1, int c) {
    arblibJNI.fmpq_mul_si(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, c);
  }

  public static void _fmpq_mul_ui(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long p, SWIGTYPE_p_long q, long r) {
    arblibJNI._fmpq_mul_ui(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), r);
  }

  public static void fmpq_mul_ui(fmpq res, fmpq op1, long c) {
    arblibJNI.fmpq_mul_ui(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, c);
  }

  public static void _fmpq_mul(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long op1num, SWIGTYPE_p_long op1den, SWIGTYPE_p_long op2num, SWIGTYPE_p_long op2den) {
    arblibJNI._fmpq_mul(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(op1num), SWIGTYPE_p_long.getCPtr(op1den), SWIGTYPE_p_long.getCPtr(op2num), SWIGTYPE_p_long.getCPtr(op2den));
  }

  public static void fmpq_mul(fmpq res, fmpq op1, fmpq op2) {
    arblibJNI.fmpq_mul(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, fmpq.getCPtr(op2), op2);
  }

  public static void fmpq_mul_fmpz(fmpq res, fmpq op, SWIGTYPE_p_long x) {
    arblibJNI.fmpq_mul_fmpz(fmpq.getCPtr(res), res, fmpq.getCPtr(op), op, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void _fmpq_pow_si(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long opnum, SWIGTYPE_p_long opden, int e) {
    arblibJNI._fmpq_pow_si(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(opnum), SWIGTYPE_p_long.getCPtr(opden), e);
  }

  public static void fmpq_pow_si(fmpq rop, fmpq op, int e) {
    arblibJNI.fmpq_pow_si(fmpq.getCPtr(rop), rop, fmpq.getCPtr(op), op, e);
  }

  public static int fmpq_pow_fmpz(fmpq a, fmpq b, SWIGTYPE_p_long e) {
    return arblibJNI.fmpq_pow_fmpz(fmpq.getCPtr(a), a, fmpq.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(e));
  }

  public static void _fmpq_addmul(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long op1num, SWIGTYPE_p_long op1den, SWIGTYPE_p_long op2num, SWIGTYPE_p_long op2den) {
    arblibJNI._fmpq_addmul(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(op1num), SWIGTYPE_p_long.getCPtr(op1den), SWIGTYPE_p_long.getCPtr(op2num), SWIGTYPE_p_long.getCPtr(op2den));
  }

  public static void fmpq_addmul(fmpq res, fmpq op1, fmpq op2) {
    arblibJNI.fmpq_addmul(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, fmpq.getCPtr(op2), op2);
  }

  public static void _fmpq_submul(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long op1num, SWIGTYPE_p_long op1den, SWIGTYPE_p_long op2num, SWIGTYPE_p_long op2den) {
    arblibJNI._fmpq_submul(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(op1num), SWIGTYPE_p_long.getCPtr(op1den), SWIGTYPE_p_long.getCPtr(op2num), SWIGTYPE_p_long.getCPtr(op2den));
  }

  public static void fmpq_submul(fmpq res, fmpq op1, fmpq op2) {
    arblibJNI.fmpq_submul(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, fmpq.getCPtr(op2), op2);
  }

  public static void fmpq_inv(fmpq dest, fmpq src) {
    arblibJNI.fmpq_inv(fmpq.getCPtr(dest), dest, fmpq.getCPtr(src), src);
  }

  public static void _fmpq_div(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long op1num, SWIGTYPE_p_long op1den, SWIGTYPE_p_long op2num, SWIGTYPE_p_long op2den) {
    arblibJNI._fmpq_div(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(op1num), SWIGTYPE_p_long.getCPtr(op1den), SWIGTYPE_p_long.getCPtr(op2num), SWIGTYPE_p_long.getCPtr(op2den));
  }

  public static void fmpq_div(fmpq res, fmpq op1, fmpq op2) {
    arblibJNI.fmpq_div(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, fmpq.getCPtr(op2), op2);
  }

  public static void fmpq_div_fmpz(fmpq res, fmpq op, SWIGTYPE_p_long x) {
    arblibJNI.fmpq_div_fmpz(fmpq.getCPtr(res), res, fmpq.getCPtr(op), op, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpq_mul_2exp(fmpq res, fmpq x, long exp) {
    arblibJNI.fmpq_mul_2exp(fmpq.getCPtr(res), res, fmpq.getCPtr(x), x, exp);
  }

  public static void fmpq_div_2exp(fmpq res, fmpq x, long exp) {
    arblibJNI.fmpq_div_2exp(fmpq.getCPtr(res), res, fmpq.getCPtr(x), x, exp);
  }

  public static int _fmpq_mod_fmpz(SWIGTYPE_p_long res, SWIGTYPE_p_long num, SWIGTYPE_p_long den, SWIGTYPE_p_long mod) {
    return arblibJNI._fmpq_mod_fmpz(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(mod));
  }

  public static int fmpq_mod_fmpz(SWIGTYPE_p_long res, fmpq x, SWIGTYPE_p_long mod) {
    return arblibJNI.fmpq_mod_fmpz(SWIGTYPE_p_long.getCPtr(res), fmpq.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(mod));
  }

  public static void _fmpq_gcd(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long p, SWIGTYPE_p_long q, SWIGTYPE_p_long r, SWIGTYPE_p_long s) {
    arblibJNI._fmpq_gcd(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(q), SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(s));
  }

  public static void fmpq_gcd(fmpq res, fmpq op1, fmpq op2) {
    arblibJNI.fmpq_gcd(fmpq.getCPtr(res), res, fmpq.getCPtr(op1), op1, fmpq.getCPtr(op2), op2);
  }

  public static int _fmpq_reconstruct_fmpz(SWIGTYPE_p_long num, SWIGTYPE_p_long den, SWIGTYPE_p_long a, SWIGTYPE_p_long m) {
    return arblibJNI._fmpq_reconstruct_fmpz(SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(m));
  }

  public static int fmpq_reconstruct_fmpz(fmpq res, SWIGTYPE_p_long a, SWIGTYPE_p_long m) {
    return arblibJNI.fmpq_reconstruct_fmpz(fmpq.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(m));
  }

  public static int _fmpq_reconstruct_fmpz_2_naive(SWIGTYPE_p_long n, SWIGTYPE_p_long d, SWIGTYPE_p_long a, SWIGTYPE_p_long m, SWIGTYPE_p_long N, SWIGTYPE_p_long D) {
    return arblibJNI._fmpq_reconstruct_fmpz_2_naive(SWIGTYPE_p_long.getCPtr(n), SWIGTYPE_p_long.getCPtr(d), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(m), SWIGTYPE_p_long.getCPtr(N), SWIGTYPE_p_long.getCPtr(D));
  }

  public static int _fmpq_reconstruct_fmpz_2(SWIGTYPE_p_long n, SWIGTYPE_p_long d, SWIGTYPE_p_long a, SWIGTYPE_p_long m, SWIGTYPE_p_long N, SWIGTYPE_p_long D) {
    return arblibJNI._fmpq_reconstruct_fmpz_2(SWIGTYPE_p_long.getCPtr(n), SWIGTYPE_p_long.getCPtr(d), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(m), SWIGTYPE_p_long.getCPtr(N), SWIGTYPE_p_long.getCPtr(D));
  }

  public static int fmpq_reconstruct_fmpz_2(fmpq res, SWIGTYPE_p_long a, SWIGTYPE_p_long m, SWIGTYPE_p_long N, SWIGTYPE_p_long D) {
    return arblibJNI.fmpq_reconstruct_fmpz_2(fmpq.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(m), SWIGTYPE_p_long.getCPtr(N), SWIGTYPE_p_long.getCPtr(D));
  }

  public static long fmpq_height_bits(fmpq x) {
    return arblibJNI.fmpq_height_bits(fmpq.getCPtr(x), x);
  }

  public static void fmpq_height(SWIGTYPE_p_long height, fmpq x) {
    arblibJNI.fmpq_height(SWIGTYPE_p_long.getCPtr(height), fmpq.getCPtr(x), x);
  }

  public static void _fmpq_next_calkin_wilf(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long num, SWIGTYPE_p_long den) {
    arblibJNI._fmpq_next_calkin_wilf(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den));
  }

  public static void fmpq_next_calkin_wilf(fmpq res, fmpq x) {
    arblibJNI.fmpq_next_calkin_wilf(fmpq.getCPtr(res), res, fmpq.getCPtr(x), x);
  }

  public static void _fmpq_next_signed_calkin_wilf(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long num, SWIGTYPE_p_long den) {
    arblibJNI._fmpq_next_signed_calkin_wilf(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den));
  }

  public static void fmpq_next_signed_calkin_wilf(fmpq res, fmpq x) {
    arblibJNI.fmpq_next_signed_calkin_wilf(fmpq.getCPtr(res), res, fmpq.getCPtr(x), x);
  }

  public static void _fmpq_next_minimal(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long num, SWIGTYPE_p_long den) {
    arblibJNI._fmpq_next_minimal(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den));
  }

  public static void fmpq_next_minimal(fmpq res, fmpq x) {
    arblibJNI.fmpq_next_minimal(fmpq.getCPtr(res), res, fmpq.getCPtr(x), x);
  }

  public static void _fmpq_next_signed_minimal(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long num, SWIGTYPE_p_long den) {
    arblibJNI._fmpq_next_signed_minimal(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den));
  }

  public static void fmpq_next_signed_minimal(fmpq res, fmpq x) {
    arblibJNI.fmpq_next_signed_minimal(fmpq.getCPtr(res), res, fmpq.getCPtr(x), x);
  }

  public static void fmpq_farey_neighbors(fmpq left, fmpq right, fmpq mid, SWIGTYPE_p_long Q) {
    arblibJNI.fmpq_farey_neighbors(fmpq.getCPtr(left), left, fmpq.getCPtr(right), right, fmpq.getCPtr(mid), mid, SWIGTYPE_p_long.getCPtr(Q));
  }

  public static void fmpq_simplest_between(fmpq mid, fmpq l, fmpq r) {
    arblibJNI.fmpq_simplest_between(fmpq.getCPtr(mid), mid, fmpq.getCPtr(l), l, fmpq.getCPtr(r), r);
  }

  public static void _fmpq_simplest_between(SWIGTYPE_p_long mid_num, SWIGTYPE_p_long mid_den, SWIGTYPE_p_long l_num, SWIGTYPE_p_long l_den, SWIGTYPE_p_long r_num, SWIGTYPE_p_long r_den) {
    arblibJNI._fmpq_simplest_between(SWIGTYPE_p_long.getCPtr(mid_num), SWIGTYPE_p_long.getCPtr(mid_den), SWIGTYPE_p_long.getCPtr(l_num), SWIGTYPE_p_long.getCPtr(l_den), SWIGTYPE_p_long.getCPtr(r_num), SWIGTYPE_p_long.getCPtr(r_den));
  }

  public static int fmpq_get_cfrac_naive(SWIGTYPE_p_long c, fmpq rem, fmpq x, int n) {
    return arblibJNI.fmpq_get_cfrac_naive(SWIGTYPE_p_long.getCPtr(c), fmpq.getCPtr(rem), rem, fmpq.getCPtr(x), x, n);
  }

  public static int fmpq_get_cfrac(SWIGTYPE_p_long c, fmpq rem, fmpq x, int n) {
    return arblibJNI.fmpq_get_cfrac(SWIGTYPE_p_long.getCPtr(c), fmpq.getCPtr(rem), rem, fmpq.getCPtr(x), x, n);
  }

  public static void fmpq_set_cfrac(fmpq x, SWIGTYPE_p_long c, int n) {
    arblibJNI.fmpq_set_cfrac(fmpq.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(c), n);
  }

  public static int fmpq_cfrac_bound(fmpq x) {
    return arblibJNI.fmpq_cfrac_bound(fmpq.getCPtr(x), x);
  }

  public static void fmpq_dedekind_sum_naive(fmpq s, SWIGTYPE_p_long h, SWIGTYPE_p_long k) {
    arblibJNI.fmpq_dedekind_sum_naive(fmpq.getCPtr(s), s, SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(k));
  }

  public static void fmpq_dedekind_sum(fmpq s, SWIGTYPE_p_long h, SWIGTYPE_p_long k) {
    arblibJNI.fmpq_dedekind_sum(fmpq.getCPtr(s), s, SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(k));
  }

  public static void _fmpq_harmonic_ui(SWIGTYPE_p_long num, SWIGTYPE_p_long den, long n) {
    arblibJNI._fmpq_harmonic_ui(SWIGTYPE_p_long.getCPtr(num), SWIGTYPE_p_long.getCPtr(den), n);
  }

  public static void fmpq_harmonic_ui(fmpq x, long n) {
    arblibJNI.fmpq_harmonic_ui(fmpq.getCPtr(x), x, n);
  }

  public static fmpq _fmpq_vec_init(int len) {
    long cPtr = arblibJNI._fmpq_vec_init(len);
    return (cPtr == 0) ? null : new fmpq(cPtr, false);
  }

  public static void _fmpq_vec_clear(fmpq vec, int len) {
    arblibJNI._fmpq_vec_clear(fmpq.getCPtr(vec), vec, len);
  }

  public static void _fmpz_mat22_init(_fmpz_mat22_struct M) {
    arblibJNI._fmpz_mat22_init(_fmpz_mat22_struct.getCPtr(M), M);
  }

  public static void _fmpz_mat22_clear(_fmpz_mat22_struct M) {
    arblibJNI._fmpz_mat22_clear(_fmpz_mat22_struct.getCPtr(M), M);
  }

  public static void _fmpz_mat22_one(_fmpz_mat22_struct M) {
    arblibJNI._fmpz_mat22_one(_fmpz_mat22_struct.getCPtr(M), M);
  }

  public static int _fmpz_mat22_is_one(_fmpz_mat22_struct M) {
    return arblibJNI._fmpz_mat22_is_one(_fmpz_mat22_struct.getCPtr(M), M);
  }

  public static long _fmpz_mat22_bits(_fmpz_mat22_struct N) {
    return arblibJNI._fmpz_mat22_bits(_fmpz_mat22_struct.getCPtr(N), N);
  }

  public static void _fmpz_mat22_rmul(_fmpz_mat22_struct M, _fmpz_mat22_struct N) {
    arblibJNI._fmpz_mat22_rmul(_fmpz_mat22_struct.getCPtr(M), M, _fmpz_mat22_struct.getCPtr(N), N);
  }

  public static void _fmpz_mat22_rmul_ui(_fmpz_mat22_struct M, _ui_mat22_struct N) {
    arblibJNI._fmpz_mat22_rmul_ui(_fmpz_mat22_struct.getCPtr(M), M, _ui_mat22_struct.getCPtr(N), N);
  }

  public static void _fmpz_mat22_rmul_inv_ui(_fmpz_mat22_struct M, _ui_mat22_struct N) {
    arblibJNI._fmpz_mat22_rmul_inv_ui(_fmpz_mat22_struct.getCPtr(M), M, _ui_mat22_struct.getCPtr(N), N);
  }

  public static void _fmpz_mat22_rmul_elem(_fmpz_mat22_struct M, SWIGTYPE_p_long q) {
    arblibJNI._fmpz_mat22_rmul_elem(_fmpz_mat22_struct.getCPtr(M), M, SWIGTYPE_p_long.getCPtr(q));
  }

  public static void _fmpz_mat22_rmul_inv_elem(_fmpz_mat22_struct M, SWIGTYPE_p_long q) {
    arblibJNI._fmpz_mat22_rmul_inv_elem(_fmpz_mat22_struct.getCPtr(M), M, SWIGTYPE_p_long.getCPtr(q));
  }

  public static void _fmpz_mat22_lmul_elem(_fmpz_mat22_struct M, SWIGTYPE_p_long q) {
    arblibJNI._fmpz_mat22_lmul_elem(_fmpz_mat22_struct.getCPtr(M), M, SWIGTYPE_p_long.getCPtr(q));
  }

  public static void _fmpq_cfrac_list_init(_fmpq_cfrac_list_struct v) {
    arblibJNI._fmpq_cfrac_list_init(_fmpq_cfrac_list_struct.getCPtr(v), v);
  }

  public static void _fmpq_cfrac_list_clear(_fmpq_cfrac_list_struct v) {
    arblibJNI._fmpq_cfrac_list_clear(_fmpq_cfrac_list_struct.getCPtr(v), v);
  }

  public static void _fmpq_cfrac_list_fit_length(_fmpq_cfrac_list_struct v, int len) {
    arblibJNI._fmpq_cfrac_list_fit_length(_fmpq_cfrac_list_struct.getCPtr(v), v, len);
  }

  public static void _fmpq_cfrac_list_push_back(_fmpq_cfrac_list_struct v, SWIGTYPE_p_long a) {
    arblibJNI._fmpq_cfrac_list_push_back(_fmpq_cfrac_list_struct.getCPtr(v), v, SWIGTYPE_p_long.getCPtr(a));
  }

  public static void _fmpq_cfrac_list_push_back_zero(_fmpq_cfrac_list_struct v) {
    arblibJNI._fmpq_cfrac_list_push_back_zero(_fmpq_cfrac_list_struct.getCPtr(v), v);
  }

  public static void _fmpq_cfrac_list_append_ui(_fmpq_cfrac_list_struct v, SWIGTYPE_p_unsigned_long a, int n) {
    arblibJNI._fmpq_cfrac_list_append_ui(_fmpq_cfrac_list_struct.getCPtr(v), v, SWIGTYPE_p_unsigned_long.getCPtr(a), n);
  }

  public static void _fmpq_cfrac_list_swap(_fmpq_cfrac_list_struct a, _fmpq_cfrac_list_struct b) {
    arblibJNI._fmpq_cfrac_list_swap(_fmpq_cfrac_list_struct.getCPtr(a), a, _fmpq_cfrac_list_struct.getCPtr(b), b);
  }

  public static void _fmpq_ball_init(_fmpq_ball_struct x) {
    arblibJNI._fmpq_ball_init(_fmpq_ball_struct.getCPtr(x), x);
  }

  public static void _fmpq_ball_clear(_fmpq_ball_struct x) {
    arblibJNI._fmpq_ball_clear(_fmpq_ball_struct.getCPtr(x), x);
  }

  public static void _fmpq_ball_swap(_fmpq_ball_struct x, _fmpq_ball_struct y) {
    arblibJNI._fmpq_ball_swap(_fmpq_ball_struct.getCPtr(x), x, _fmpq_ball_struct.getCPtr(y), y);
  }

  public static int _fmpq_ball_gt_one(_fmpq_ball_struct x) {
    return arblibJNI._fmpq_ball_gt_one(_fmpq_ball_struct.getCPtr(x), x);
  }

  public static void _fmpq_hgcd(_fmpq_cfrac_list_struct s, _fmpz_mat22_struct M, SWIGTYPE_p_long x_num, SWIGTYPE_p_long x_den) {
    arblibJNI._fmpq_hgcd(_fmpq_cfrac_list_struct.getCPtr(s), s, _fmpz_mat22_struct.getCPtr(M), M, SWIGTYPE_p_long.getCPtr(x_num), SWIGTYPE_p_long.getCPtr(x_den));
  }

  public static void _fmpq_ball_get_cfrac(_fmpq_cfrac_list_struct s, _fmpz_mat22_struct M, int needM, _fmpq_ball_struct x) {
    arblibJNI._fmpq_ball_get_cfrac(_fmpq_cfrac_list_struct.getCPtr(s), s, _fmpz_mat22_struct.getCPtr(M), M, needM, _fmpq_ball_struct.getCPtr(x), x);
  }

  public static void fmpq_numerator(SWIGTYPE_p_long n, fmpq q) {
    arblibJNI.fmpq_numerator(SWIGTYPE_p_long.getCPtr(n), fmpq.getCPtr(q), q);
  }

  public static void fmpq_denominator(SWIGTYPE_p_long n, fmpq q) {
    arblibJNI.fmpq_denominator(SWIGTYPE_p_long.getCPtr(n), fmpq.getCPtr(q), q);
  }

  public static SWIGTYPE_p_long fmpq_numerator_ptr(fmpq q) {
    long cPtr = arblibJNI.fmpq_numerator_ptr(fmpq.getCPtr(q), q);
    return (cPtr == 0) ? null : new SWIGTYPE_p_long(cPtr, false);
  }

  public static SWIGTYPE_p_long fmpq_denominator_ptr(fmpq q) {
    long cPtr = arblibJNI.fmpq_denominator_ptr(fmpq.getCPtr(q), q);
    return (cPtr == 0) ? null : new SWIGTYPE_p_long(cPtr, false);
  }

  public static int fmpq_equal_fmpz(fmpq q, SWIGTYPE_p_long n) {
    return arblibJNI.fmpq_equal_fmpz(fmpq.getCPtr(q), q, SWIGTYPE_p_long.getCPtr(n));
  }

  public static double arb_test_multiplier() {
    return arblibJNI.arb_test_multiplier();
  }

  public static void fmpz_add_inline(SWIGTYPE_p_long z, SWIGTYPE_p_long x, SWIGTYPE_p_long y) {
    arblibJNI.fmpz_add_inline(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y));
  }

  public static void fmpz_add_si_inline(SWIGTYPE_p_long z, SWIGTYPE_p_long x, int y) {
    arblibJNI.fmpz_add_si_inline(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), y);
  }

  public static void fmpz_sub_si_inline(SWIGTYPE_p_long z, SWIGTYPE_p_long x, int y) {
    arblibJNI.fmpz_sub_si_inline(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), y);
  }

  public static void fmpz_add_ui_inline(SWIGTYPE_p_long z, SWIGTYPE_p_long x, long y) {
    arblibJNI.fmpz_add_ui_inline(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), y);
  }

  public static void fmpz_add2_fmpz_si_inline(SWIGTYPE_p_long z, SWIGTYPE_p_long x, SWIGTYPE_p_long y, int c) {
    arblibJNI.fmpz_add2_fmpz_si_inline(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y), c);
  }

  public static void fmpz_set_mpn_large(SWIGTYPE_p_long z, SWIGTYPE_p_unsigned_long src, int n, int negative) {
    arblibJNI.fmpz_set_mpn_large(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_unsigned_long.getCPtr(src), n, negative);
  }

  public static void fmpz_adiv_q_2exp(SWIGTYPE_p_long z, SWIGTYPE_p_long x, long exp) {
    arblibJNI.fmpz_adiv_q_2exp(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), exp);
  }

  public static void _fmpz_set_si_small(SWIGTYPE_p_long x, int v) {
    arblibJNI._fmpz_set_si_small(SWIGTYPE_p_long.getCPtr(x), v);
  }

  public static int _fmpz_sub_small_large(SWIGTYPE_p_long x, SWIGTYPE_p_long y) {
    return arblibJNI._fmpz_sub_small_large(SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y));
  }

  public static int _fmpz_sub_small(SWIGTYPE_p_long x, SWIGTYPE_p_long y) {
    return arblibJNI._fmpz_sub_small(SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y));
  }

  public static int _fmpz_size(SWIGTYPE_p_long f) {
    return arblibJNI._fmpz_size(SWIGTYPE_p_long.getCPtr(f));
  }

  public static void fmpz_ui_mul_ui(SWIGTYPE_p_long r, long a, long b) {
    arblibJNI.fmpz_ui_mul_ui(SWIGTYPE_p_long.getCPtr(r), a, b);
  }

  public static void fmpz_ui_pow_ui(SWIGTYPE_p_long x, long b, long e) {
    arblibJNI.fmpz_ui_pow_ui(SWIGTYPE_p_long.getCPtr(x), b, e);
  }

  public static void fmpz_max(SWIGTYPE_p_long z, SWIGTYPE_p_long x, SWIGTYPE_p_long y) {
    arblibJNI.fmpz_max(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y));
  }

  public static void fmpz_min(SWIGTYPE_p_long z, SWIGTYPE_p_long x, SWIGTYPE_p_long y) {
    arblibJNI.fmpz_min(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y));
  }

  public static void fmpz_lshift_mpn(SWIGTYPE_p_long z, SWIGTYPE_p_unsigned_long d, int dn, int sgnbit, long shift) {
    arblibJNI.fmpz_lshift_mpn(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_unsigned_long.getCPtr(d), dn, sgnbit, shift);
  }

  public static int fmpz_allocated_bytes(SWIGTYPE_p_long x) {
    return arblibJNI.fmpz_allocated_bytes(SWIGTYPE_p_long.getCPtr(x));
  }

  public static int rounds_up(int rnd, int negative) {
    return arblibJNI.rounds_up(rnd, negative);
  }

  public static mpfr_rnd_t rnd_to_mpfr(int rnd) {
    return mpfr_rnd_t.swigToEnum(arblibJNI.rnd_to_mpfr(rnd));
  }

  public static void fmpr_init(fmpr_struct x) {
    arblibJNI.fmpr_init(fmpr_struct.getCPtr(x), x);
  }

  public static void fmpr_clear(fmpr_struct x) {
    arblibJNI.fmpr_clear(fmpr_struct.getCPtr(x), x);
  }

  public static void fmpr_zero(fmpr_struct x) {
    arblibJNI.fmpr_zero(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_zero(fmpr_struct x) {
    return arblibJNI.fmpr_is_zero(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_special(fmpr_struct x) {
    return arblibJNI.fmpr_is_special(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_normal(fmpr_struct x) {
    return arblibJNI.fmpr_is_normal(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_inf(fmpr_struct x) {
    return arblibJNI.fmpr_is_inf(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_pos_inf(fmpr_struct x) {
    return arblibJNI.fmpr_is_pos_inf(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_neg_inf(fmpr_struct x) {
    return arblibJNI.fmpr_is_neg_inf(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_nan(fmpr_struct x) {
    return arblibJNI.fmpr_is_nan(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_finite(fmpr_struct x) {
    return arblibJNI.fmpr_is_finite(fmpr_struct.getCPtr(x), x);
  }

  public static void fmpr_pos_inf(fmpr_struct x) {
    arblibJNI.fmpr_pos_inf(fmpr_struct.getCPtr(x), x);
  }

  public static void fmpr_neg_inf(fmpr_struct x) {
    arblibJNI.fmpr_neg_inf(fmpr_struct.getCPtr(x), x);
  }

  public static void fmpr_nan(fmpr_struct x) {
    arblibJNI.fmpr_nan(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_one(fmpr_struct x) {
    return arblibJNI.fmpr_is_one(fmpr_struct.getCPtr(x), x);
  }

  public static void fmpr_one(fmpr_struct x) {
    arblibJNI.fmpr_one(fmpr_struct.getCPtr(x), x);
  }

  public static int _fmpr_normalise_naive(SWIGTYPE_p_long man, SWIGTYPE_p_long exp, int prec, int rnd) {
    return arblibJNI._fmpr_normalise_naive(SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_long.getCPtr(exp), prec, rnd);
  }

  public static void fmpr_set(fmpr_struct y, fmpr_struct x) {
    arblibJNI.fmpr_set(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x);
  }

  public static void fmpr_swap(fmpr_struct x, fmpr_struct y) {
    arblibJNI.fmpr_swap(fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y);
  }

  public static int _fmpr_set_round(SWIGTYPE_p_long rman, SWIGTYPE_p_long rexp, SWIGTYPE_p_long man, SWIGTYPE_p_long exp, int prec, int rnd) {
    return arblibJNI._fmpr_set_round(SWIGTYPE_p_long.getCPtr(rman), SWIGTYPE_p_long.getCPtr(rexp), SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_long.getCPtr(exp), prec, rnd);
  }

  public static int _fmpr_normalise(SWIGTYPE_p_long man, SWIGTYPE_p_long exp, int prec, int rnd) {
    return arblibJNI._fmpr_normalise(SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_long.getCPtr(exp), prec, rnd);
  }

  public static int fmpr_set_round_naive(fmpr_struct y, fmpr_struct x, int prec, int rnd) {
    return arblibJNI.fmpr_set_round_naive(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, prec, rnd);
  }

  public static int fmpr_set_round(fmpr_struct y, fmpr_struct x, int prec, int rnd) {
    return arblibJNI.fmpr_set_round(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, prec, rnd);
  }

  public static int fmpr_set_round_fmpz_2exp(fmpr_struct y, SWIGTYPE_p_long x, SWIGTYPE_p_long exp, int prec, int rnd) {
    return arblibJNI.fmpr_set_round_fmpz_2exp(fmpr_struct.getCPtr(y), y, SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(exp), prec, rnd);
  }

  public static int fmpr_set_round_fmpz(fmpr_struct y, SWIGTYPE_p_long x, int prec, int rnd) {
    return arblibJNI.fmpr_set_round_fmpz(fmpr_struct.getCPtr(y), y, SWIGTYPE_p_long.getCPtr(x), prec, rnd);
  }

  public static int _fmpr_set_round_mpn(SWIGTYPE_p_long shift, SWIGTYPE_p_long man, SWIGTYPE_p_unsigned_long x, int xn, int negative, int prec, int rnd) {
    return arblibJNI._fmpr_set_round_mpn(SWIGTYPE_p_long.getCPtr(shift), SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_unsigned_long.getCPtr(x), xn, negative, prec, rnd);
  }

  public static int fmpr_set_round_ui_2exp_fmpz(fmpr_struct z, long lo, SWIGTYPE_p_long exp, int negative, int prec, int rnd) {
    return arblibJNI.fmpr_set_round_ui_2exp_fmpz(fmpr_struct.getCPtr(z), z, lo, SWIGTYPE_p_long.getCPtr(exp), negative, prec, rnd);
  }

  public static int fmpr_set_round_uiui_2exp_fmpz(fmpr_struct z, long hi, long lo, SWIGTYPE_p_long exp, int negative, int prec, int rnd) {
    return arblibJNI.fmpr_set_round_uiui_2exp_fmpz(fmpr_struct.getCPtr(z), z, hi, lo, SWIGTYPE_p_long.getCPtr(exp), negative, prec, rnd);
  }

  public static void fmpr_ulp(fmpr_struct u, fmpr_struct x, int prec) {
    arblibJNI.fmpr_ulp(fmpr_struct.getCPtr(u), u, fmpr_struct.getCPtr(x), x, prec);
  }

  public static int fmpr_check_ulp(fmpr_struct result, int r, int prec) {
    return arblibJNI.fmpr_check_ulp(fmpr_struct.getCPtr(result), result, r, prec);
  }

  public static int fmpr_equal(fmpr_struct x, fmpr_struct y) {
    return arblibJNI.fmpr_equal(fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y);
  }

  public static int fmpr_sgn(fmpr_struct x) {
    return arblibJNI.fmpr_sgn(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_cmp(fmpr_struct x, fmpr_struct y) {
    return arblibJNI.fmpr_cmp(fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y);
  }

  public static int fmpr_cmpabs(fmpr_struct x, fmpr_struct y) {
    return arblibJNI.fmpr_cmpabs(fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y);
  }

  public static int fmpr_cmpabs_ui(fmpr_struct x, long y) {
    return arblibJNI.fmpr_cmpabs_ui(fmpr_struct.getCPtr(x), x, y);
  }

  public static void fmpr_randtest(fmpr_struct x, flint_rand_s state, int bits, int exp_bits) {
    arblibJNI.fmpr_randtest(fmpr_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, bits, exp_bits);
  }

  public static void fmpr_randtest_not_zero(fmpr_struct x, flint_rand_s state, int bits, int exp_bits) {
    arblibJNI.fmpr_randtest_not_zero(fmpr_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, bits, exp_bits);
  }

  public static void fmpr_randtest_special(fmpr_struct x, flint_rand_s state, int bits, int exp_bits) {
    arblibJNI.fmpr_randtest_special(fmpr_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, bits, exp_bits);
  }

  public static int fmpr_get_mpfr(__mpfr_struct x, fmpr_struct y, mpfr_rnd_t rnd) {
    return arblibJNI.fmpr_get_mpfr(__mpfr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y, rnd.swigValue());
  }

  public static void fmpr_set_mpfr(fmpr_struct x, __mpfr_struct y) {
    arblibJNI.fmpr_set_mpfr(fmpr_struct.getCPtr(x), x, __mpfr_struct.getCPtr(y), y);
  }

  public static double fmpr_get_d(fmpr_struct x, int rnd) {
    return arblibJNI.fmpr_get_d(fmpr_struct.getCPtr(x), x, rnd);
  }

  public static void fmpr_set_d(fmpr_struct x, double v) {
    arblibJNI.fmpr_set_d(fmpr_struct.getCPtr(x), x, v);
  }

  public static void fmpr_set_ui(fmpr_struct x, long c) {
    arblibJNI.fmpr_set_ui(fmpr_struct.getCPtr(x), x, c);
  }

  public static void fmpr_set_si(fmpr_struct x, int c) {
    arblibJNI.fmpr_set_si(fmpr_struct.getCPtr(x), x, c);
  }

  public static void fmpr_set_fmpz(fmpr_struct x, SWIGTYPE_p_long c) {
    arblibJNI.fmpr_set_fmpz(fmpr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(c));
  }

  public static int _fmpr_add_eps(fmpr_struct z, fmpr_struct x, int sign, int prec, int rnd) {
    return arblibJNI._fmpr_add_eps(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, sign, prec, rnd);
  }

  public static int _fmpr_add_mpn(fmpr_struct z, SWIGTYPE_p_unsigned_long xman, int xn, int xsign, SWIGTYPE_p_long xexp, SWIGTYPE_p_unsigned_long yman, int yn, int ysign, SWIGTYPE_p_long yexp, int shift, int prec, int rnd) {
    return arblibJNI._fmpr_add_mpn(fmpr_struct.getCPtr(z), z, SWIGTYPE_p_unsigned_long.getCPtr(xman), xn, xsign, SWIGTYPE_p_long.getCPtr(xexp), SWIGTYPE_p_unsigned_long.getCPtr(yman), yn, ysign, SWIGTYPE_p_long.getCPtr(yexp), shift, prec, rnd);
  }

  public static int _fmpr_add_1x1(fmpr_struct z, long x, int xsign, SWIGTYPE_p_long xexp, long y, int ysign, SWIGTYPE_p_long yexp, int shift, int prec, int rnd) {
    return arblibJNI._fmpr_add_1x1(fmpr_struct.getCPtr(z), z, x, xsign, SWIGTYPE_p_long.getCPtr(xexp), y, ysign, SWIGTYPE_p_long.getCPtr(yexp), shift, prec, rnd);
  }

  public static int fmpr_add_naive(fmpr_struct z, fmpr_struct x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_add_naive(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int _fmpr_mul_mpn(fmpr_struct z, SWIGTYPE_p_unsigned_long xman, int xn, SWIGTYPE_p_long xexp, SWIGTYPE_p_unsigned_long yman, int yn, SWIGTYPE_p_long yexp, int negative, int prec, int rnd) {
    return arblibJNI._fmpr_mul_mpn(fmpr_struct.getCPtr(z), z, SWIGTYPE_p_unsigned_long.getCPtr(xman), xn, SWIGTYPE_p_long.getCPtr(xexp), SWIGTYPE_p_unsigned_long.getCPtr(yman), yn, SWIGTYPE_p_long.getCPtr(yexp), negative, prec, rnd);
  }

  public static int _fmpr_mul_1x1(fmpr_struct z, long u, SWIGTYPE_p_long xexp, long v, SWIGTYPE_p_long yexp, int negative, int prec, int rnd) {
    return arblibJNI._fmpr_mul_1x1(fmpr_struct.getCPtr(z), z, u, SWIGTYPE_p_long.getCPtr(xexp), v, SWIGTYPE_p_long.getCPtr(yexp), negative, prec, rnd);
  }

  public static int fmpr_mul_naive(fmpr_struct z, fmpr_struct x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_mul_naive(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int fmpr_mul(fmpr_struct z, fmpr_struct x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_mul(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int fmpr_mul_ui(fmpr_struct z, fmpr_struct x, long y, int prec, int rnd) {
    return arblibJNI.fmpr_mul_ui(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_mul_si(fmpr_struct z, fmpr_struct x, int y, int prec, int rnd) {
    return arblibJNI.fmpr_mul_si(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_mul_fmpz(fmpr_struct z, fmpr_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.fmpr_mul_fmpz(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int fmpr_add(fmpr_struct z, fmpr_struct x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_add(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int fmpr_add_ui(fmpr_struct z, fmpr_struct x, long y, int prec, int rnd) {
    return arblibJNI.fmpr_add_ui(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_add_si(fmpr_struct z, fmpr_struct x, int y, int prec, int rnd) {
    return arblibJNI.fmpr_add_si(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_add_fmpz(fmpr_struct z, fmpr_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.fmpr_add_fmpz(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int fmpr_sub(fmpr_struct z, fmpr_struct x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_sub(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int fmpr_sub_ui(fmpr_struct z, fmpr_struct x, long y, int prec, int rnd) {
    return arblibJNI.fmpr_sub_ui(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_sub_si(fmpr_struct z, fmpr_struct x, int y, int prec, int rnd) {
    return arblibJNI.fmpr_sub_si(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_sub_fmpz(fmpr_struct z, fmpr_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.fmpr_sub_fmpz(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int fmpr_div(fmpr_struct z, fmpr_struct x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_div(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int fmpr_div_ui(fmpr_struct z, fmpr_struct x, long y, int prec, int rnd) {
    return arblibJNI.fmpr_div_ui(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_ui_div(fmpr_struct z, long x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_ui_div(fmpr_struct.getCPtr(z), z, x, fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int fmpr_div_si(fmpr_struct z, fmpr_struct x, int y, int prec, int rnd) {
    return arblibJNI.fmpr_div_si(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_si_div(fmpr_struct z, int x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_si_div(fmpr_struct.getCPtr(z), z, x, fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int fmpr_div_fmpz(fmpr_struct z, fmpr_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.fmpr_div_fmpz(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int fmpr_fmpz_div(fmpr_struct z, SWIGTYPE_p_long x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_fmpz_div(fmpr_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int fmpr_fmpz_div_fmpz(fmpr_struct z, SWIGTYPE_p_long x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.fmpr_fmpz_div_fmpz(fmpr_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int fmpr_addmul(fmpr_struct z, fmpr_struct x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_addmul(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int fmpr_addmul_ui(fmpr_struct z, fmpr_struct x, long y, int prec, int rnd) {
    return arblibJNI.fmpr_addmul_ui(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_addmul_si(fmpr_struct z, fmpr_struct x, int y, int prec, int rnd) {
    return arblibJNI.fmpr_addmul_si(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_addmul_fmpz(fmpr_struct z, fmpr_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.fmpr_addmul_fmpz(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int fmpr_submul(fmpr_struct z, fmpr_struct x, fmpr_struct y, int prec, int rnd) {
    return arblibJNI.fmpr_submul(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y, prec, rnd);
  }

  public static int fmpr_submul_ui(fmpr_struct z, fmpr_struct x, long y, int prec, int rnd) {
    return arblibJNI.fmpr_submul_ui(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_submul_si(fmpr_struct z, fmpr_struct x, int y, int prec, int rnd) {
    return arblibJNI.fmpr_submul_si(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int fmpr_submul_fmpz(fmpr_struct z, fmpr_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.fmpr_submul_fmpz(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int fmpr_sqrt(fmpr_struct y, fmpr_struct x, int prec, int rnd) {
    return arblibJNI.fmpr_sqrt(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, prec, rnd);
  }

  public static int fmpr_sqrt_ui(fmpr_struct z, long x, int prec, int rnd) {
    return arblibJNI.fmpr_sqrt_ui(fmpr_struct.getCPtr(z), z, x, prec, rnd);
  }

  public static int fmpr_sqrt_fmpz(fmpr_struct z, SWIGTYPE_p_long x, int prec, int rnd) {
    return arblibJNI.fmpr_sqrt_fmpz(fmpr_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), prec, rnd);
  }

  public static int fmpr_rsqrt(fmpr_struct y, fmpr_struct x, int prec, int rnd) {
    return arblibJNI.fmpr_rsqrt(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, prec, rnd);
  }

  public static int fmpr_root(fmpr_struct y, fmpr_struct x, long k, int prec, int rnd) {
    return arblibJNI.fmpr_root(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, k, prec, rnd);
  }

  public static int fmpr_log(fmpr_struct y, fmpr_struct x, int prec, int rnd) {
    return arblibJNI.fmpr_log(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, prec, rnd);
  }

  public static int fmpr_log1p(fmpr_struct y, fmpr_struct x, int prec, int rnd) {
    return arblibJNI.fmpr_log1p(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, prec, rnd);
  }

  public static int fmpr_exp(fmpr_struct y, fmpr_struct x, int prec, int rnd) {
    return arblibJNI.fmpr_exp(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, prec, rnd);
  }

  public static int fmpr_expm1(fmpr_struct y, fmpr_struct x, int prec, int rnd) {
    return arblibJNI.fmpr_expm1(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, prec, rnd);
  }

  public static void fmpr_neg(fmpr_struct y, fmpr_struct x) {
    arblibJNI.fmpr_neg(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_neg_round(fmpr_struct y, fmpr_struct x, int prec, int rnd) {
    return arblibJNI.fmpr_neg_round(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, prec, rnd);
  }

  public static void fmpr_abs(fmpr_struct y, fmpr_struct x) {
    arblibJNI.fmpr_abs(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x);
  }

  public static void fmpr_set_error_result(fmpr_struct err, fmpr_struct result, int rret) {
    arblibJNI.fmpr_set_error_result(fmpr_struct.getCPtr(err), err, fmpr_struct.getCPtr(result), result, rret);
  }

  public static void fmpr_add_error_result(fmpr_struct err, fmpr_struct err_in, fmpr_struct result, int rret, int prec, int rnd) {
    arblibJNI.fmpr_add_error_result(fmpr_struct.getCPtr(err), err, fmpr_struct.getCPtr(err_in), err_in, fmpr_struct.getCPtr(result), result, rret, prec, rnd);
  }

  public static void fmpr_print(fmpr_struct x) {
    arblibJNI.fmpr_print(fmpr_struct.getCPtr(x), x);
  }

  public static void fmpr_printd(fmpr_struct x, int digits) {
    arblibJNI.fmpr_printd(fmpr_struct.getCPtr(x), x, digits);
  }

  public static void fmpr_mul_2exp_si(fmpr_struct y, fmpr_struct x, int e) {
    arblibJNI.fmpr_mul_2exp_si(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, e);
  }

  public static void fmpr_mul_2exp_fmpz(fmpr_struct y, fmpr_struct x, SWIGTYPE_p_long e) {
    arblibJNI.fmpr_mul_2exp_fmpz(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(e));
  }

  public static void fmpr_get_fmpq(fmpq y, fmpr_struct x) {
    arblibJNI.fmpr_get_fmpq(fmpq.getCPtr(y), y, fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_set_fmpq(fmpr_struct x, fmpq y, int prec, int rnd) {
    return arblibJNI.fmpr_set_fmpq(fmpr_struct.getCPtr(x), x, fmpq.getCPtr(y), y, prec, rnd);
  }

  public static void fmpr_get_fmpz(SWIGTYPE_p_long z, fmpr_struct x, int rnd) {
    arblibJNI.fmpr_get_fmpz(SWIGTYPE_p_long.getCPtr(z), fmpr_struct.getCPtr(x), x, rnd);
  }

  public static int fmpr_get_si(fmpr_struct x, int rnd) {
    return arblibJNI.fmpr_get_si(fmpr_struct.getCPtr(x), x, rnd);
  }

  public static void fmpr_set_fmpz_2exp(fmpr_struct x, SWIGTYPE_p_long man, SWIGTYPE_p_long exp) {
    arblibJNI.fmpr_set_fmpz_2exp(fmpr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_long.getCPtr(exp));
  }

  public static void fmpr_get_fmpz_2exp(SWIGTYPE_p_long man, SWIGTYPE_p_long exp, fmpr_struct x) {
    arblibJNI.fmpr_get_fmpz_2exp(SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_long.getCPtr(exp), fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_get_fmpz_fixed_fmpz(SWIGTYPE_p_long y, fmpr_struct x, SWIGTYPE_p_long e) {
    return arblibJNI.fmpr_get_fmpz_fixed_fmpz(SWIGTYPE_p_long.getCPtr(y), fmpr_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(e));
  }

  public static int fmpr_get_fmpz_fixed_si(SWIGTYPE_p_long y, fmpr_struct x, int e) {
    return arblibJNI.fmpr_get_fmpz_fixed_si(SWIGTYPE_p_long.getCPtr(y), fmpr_struct.getCPtr(x), x, e);
  }

  public static void fmpr_set_si_2exp_si(fmpr_struct x, int man, int exp) {
    arblibJNI.fmpr_set_si_2exp_si(fmpr_struct.getCPtr(x), x, man, exp);
  }

  public static void fmpr_set_ui_2exp_si(fmpr_struct x, long man, int exp) {
    arblibJNI.fmpr_set_ui_2exp_si(fmpr_struct.getCPtr(x), x, man, exp);
  }

  public static int fmpr_cmp_2exp_si(fmpr_struct x, int e) {
    return arblibJNI.fmpr_cmp_2exp_si(fmpr_struct.getCPtr(x), x, e);
  }

  public static int fmpr_cmpabs_2exp_si(fmpr_struct x, int e) {
    return arblibJNI.fmpr_cmpabs_2exp_si(fmpr_struct.getCPtr(x), x, e);
  }

  public static void fmpr_min(fmpr_struct z, fmpr_struct a, fmpr_struct b) {
    arblibJNI.fmpr_min(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(a), a, fmpr_struct.getCPtr(b), b);
  }

  public static void fmpr_max(fmpr_struct z, fmpr_struct a, fmpr_struct b) {
    arblibJNI.fmpr_max(fmpr_struct.getCPtr(z), z, fmpr_struct.getCPtr(a), a, fmpr_struct.getCPtr(b), b);
  }

  public static int fmpr_bits(fmpr_struct x) {
    return arblibJNI.fmpr_bits(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_int(fmpr_struct x) {
    return arblibJNI.fmpr_is_int(fmpr_struct.getCPtr(x), x);
  }

  public static int fmpr_is_int_2exp_si(fmpr_struct x, int e) {
    return arblibJNI.fmpr_is_int_2exp_si(fmpr_struct.getCPtr(x), x, e);
  }

  public static void fmpr_pow_sloppy_fmpz(fmpr_struct y, fmpr_struct b, SWIGTYPE_p_long e, int prec, int rnd) {
    arblibJNI.fmpr_pow_sloppy_fmpz(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(e), prec, rnd);
  }

  public static void fmpr_pow_sloppy_ui(fmpr_struct y, fmpr_struct b, long e, int prec, int rnd) {
    arblibJNI.fmpr_pow_sloppy_ui(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(b), b, e, prec, rnd);
  }

  public static void fmpr_pow_sloppy_si(fmpr_struct y, fmpr_struct b, int e, int prec, int rnd) {
    arblibJNI.fmpr_pow_sloppy_si(fmpr_struct.getCPtr(y), y, fmpr_struct.getCPtr(b), b, e, prec, rnd);
  }

  public static fmpr_struct _fmpr_vec_init(int n) {
    long cPtr = arblibJNI._fmpr_vec_init(n);
    return (cPtr == 0) ? null : new fmpr_struct(cPtr, false);
  }

  public static void _fmpr_vec_clear(fmpr_struct v, int n) {
    arblibJNI._fmpr_vec_clear(fmpr_struct.getCPtr(v), v, n);
  }

  public static void _fmpz_set_fast(SWIGTYPE_p_long f, SWIGTYPE_p_long g) {
    arblibJNI._fmpz_set_fast(SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(g));
  }

  public static void _fmpz_add_fast(SWIGTYPE_p_long z, SWIGTYPE_p_long x, int c) {
    arblibJNI._fmpz_add_fast(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), c);
  }

  public static void _fmpz_add2_fast(SWIGTYPE_p_long z, SWIGTYPE_p_long x, SWIGTYPE_p_long y, int c) {
    arblibJNI._fmpz_add2_fast(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y), c);
  }

  public static void _fmpz_sub2_fast(SWIGTYPE_p_long z, SWIGTYPE_p_long x, SWIGTYPE_p_long y, int c) {
    arblibJNI._fmpz_sub2_fast(SWIGTYPE_p_long.getCPtr(z), SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y), c);
  }

  public static long __mag_fixmul32(long x, long y) {
    return arblibJNI.__mag_fixmul32(x, y);
  }

  public static void mag_init(mag_struct x) {
    arblibJNI.mag_init(mag_struct.getCPtr(x), x);
  }

  public static void mag_init_set(mag_struct x, mag_struct y) {
    arblibJNI.mag_init_set(mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_clear(mag_struct x) {
    arblibJNI.mag_clear(mag_struct.getCPtr(x), x);
  }

  public static void mag_swap(mag_struct x, mag_struct y) {
    arblibJNI.mag_swap(mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_set(mag_struct x, mag_struct y) {
    arblibJNI.mag_set(mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_zero(mag_struct x) {
    arblibJNI.mag_zero(mag_struct.getCPtr(x), x);
  }

  public static void mag_one(mag_struct x) {
    arblibJNI.mag_one(mag_struct.getCPtr(x), x);
  }

  public static int mag_is_special(mag_struct x) {
    return arblibJNI.mag_is_special(mag_struct.getCPtr(x), x);
  }

  public static int mag_is_zero(mag_struct x) {
    return arblibJNI.mag_is_zero(mag_struct.getCPtr(x), x);
  }

  public static void mag_inf(mag_struct x) {
    arblibJNI.mag_inf(mag_struct.getCPtr(x), x);
  }

  public static int mag_is_inf(mag_struct x) {
    return arblibJNI.mag_is_inf(mag_struct.getCPtr(x), x);
  }

  public static int mag_is_finite(mag_struct x) {
    return arblibJNI.mag_is_finite(mag_struct.getCPtr(x), x);
  }

  public static int mag_equal(mag_struct x, mag_struct y) {
    return arblibJNI.mag_equal(mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_mul(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_mul(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_mul_lower(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_mul_lower(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_addmul(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_addmul(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_add_2exp_fmpz(mag_struct z, mag_struct x, SWIGTYPE_p_long e) {
    arblibJNI.mag_add_2exp_fmpz(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(e));
  }

  public static void mag_add(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_add(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_add_lower(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_add_lower(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_add_ui(mag_struct z, mag_struct x, long y) {
    arblibJNI.mag_add_ui(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, y);
  }

  public static void mag_add_ui_lower(mag_struct res, mag_struct x, long y) {
    arblibJNI.mag_add_ui_lower(mag_struct.getCPtr(res), res, mag_struct.getCPtr(x), x, y);
  }

  public static void mag_add_ui_2exp_si(mag_struct z, mag_struct x, long y, int e) {
    arblibJNI.mag_add_ui_2exp_si(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, y, e);
  }

  public static void mag_div(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_div(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_div_lower(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_div_lower(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_inv(mag_struct res, mag_struct x) {
    arblibJNI.mag_inv(mag_struct.getCPtr(res), res, mag_struct.getCPtr(x), x);
  }

  public static void mag_inv_lower(mag_struct res, mag_struct x) {
    arblibJNI.mag_inv_lower(mag_struct.getCPtr(res), res, mag_struct.getCPtr(x), x);
  }

  public static void mag_mul_2exp_si(mag_struct z, mag_struct x, int y) {
    arblibJNI.mag_mul_2exp_si(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, y);
  }

  public static void mag_mul_2exp_fmpz(mag_struct z, mag_struct x, SWIGTYPE_p_long y) {
    arblibJNI.mag_mul_2exp_fmpz(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y));
  }

  public static void mag_sub(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_sub(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_sub_lower(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_sub_lower(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_fast_init_set(mag_struct x, mag_struct y) {
    arblibJNI.mag_fast_init_set(mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_fast_zero(mag_struct x) {
    arblibJNI.mag_fast_zero(mag_struct.getCPtr(x), x);
  }

  public static int mag_fast_is_zero(mag_struct x) {
    return arblibJNI.mag_fast_is_zero(mag_struct.getCPtr(x), x);
  }

  public static void mag_fast_mul(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_fast_mul(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_fast_mul_2exp_si(mag_struct z, mag_struct x, int y) {
    arblibJNI.mag_fast_mul_2exp_si(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, y);
  }

  public static void mag_fast_addmul(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_fast_addmul(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_fast_add_2exp_si(mag_struct z, mag_struct x, int e) {
    arblibJNI.mag_fast_add_2exp_si(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, e);
  }

  public static void mag_set_d(mag_struct z, double x) {
    arblibJNI.mag_set_d(mag_struct.getCPtr(z), z, x);
  }

  public static void mag_set_d_lower(mag_struct z, double x) {
    arblibJNI.mag_set_d_lower(mag_struct.getCPtr(z), z, x);
  }

  public static void mag_set_d_2exp_fmpz(mag_struct z, double c, SWIGTYPE_p_long exp) {
    arblibJNI.mag_set_d_2exp_fmpz(mag_struct.getCPtr(z), z, c, SWIGTYPE_p_long.getCPtr(exp));
  }

  public static void mag_set_d_2exp_fmpz_lower(mag_struct z, double c, SWIGTYPE_p_long exp) {
    arblibJNI.mag_set_d_2exp_fmpz_lower(mag_struct.getCPtr(z), z, c, SWIGTYPE_p_long.getCPtr(exp));
  }

  public static void mag_set_fmpz_2exp_fmpz(mag_struct z, SWIGTYPE_p_long man, SWIGTYPE_p_long exp) {
    arblibJNI.mag_set_fmpz_2exp_fmpz(mag_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_long.getCPtr(exp));
  }

  public static void mag_set_fmpr(mag_struct x, fmpr_struct y) {
    arblibJNI.mag_set_fmpr(mag_struct.getCPtr(x), x, fmpr_struct.getCPtr(y), y);
  }

  public static void mag_get_fmpr(fmpr_struct x, mag_struct r) {
    arblibJNI.mag_get_fmpr(fmpr_struct.getCPtr(x), x, mag_struct.getCPtr(r), r);
  }

  public static void mag_randtest_special(mag_struct x, flint_rand_s state, int expbits) {
    arblibJNI.mag_randtest_special(mag_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, expbits);
  }

  public static void mag_randtest(mag_struct x, flint_rand_s state, int expbits) {
    arblibJNI.mag_randtest(mag_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, expbits);
  }

  public static void mag_fprint(_IO_FILE file, mag_struct x) {
    arblibJNI.mag_fprint(_IO_FILE.getCPtr(file), file, mag_struct.getCPtr(x), x);
  }

  public static void mag_fprintd(_IO_FILE file, mag_struct x, int d) {
    arblibJNI.mag_fprintd(_IO_FILE.getCPtr(file), file, mag_struct.getCPtr(x), x, d);
  }

  public static void mag_print(mag_struct x) {
    arblibJNI.mag_print(mag_struct.getCPtr(x), x);
  }

  public static void mag_printd(mag_struct x, int d) {
    arblibJNI.mag_printd(mag_struct.getCPtr(x), x, d);
  }

  public static void mag_get_fmpq(fmpq y, mag_struct x) {
    arblibJNI.mag_get_fmpq(fmpq.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_get_fmpz(SWIGTYPE_p_long res, mag_struct x) {
    arblibJNI.mag_get_fmpz(SWIGTYPE_p_long.getCPtr(res), mag_struct.getCPtr(x), x);
  }

  public static void mag_get_fmpz_lower(SWIGTYPE_p_long res, mag_struct x) {
    arblibJNI.mag_get_fmpz_lower(SWIGTYPE_p_long.getCPtr(res), mag_struct.getCPtr(x), x);
  }

  public static int mag_cmp(mag_struct x, mag_struct y) {
    return arblibJNI.mag_cmp(mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static int mag_cmp_2exp_si(mag_struct x, int e) {
    return arblibJNI.mag_cmp_2exp_si(mag_struct.getCPtr(x), x, e);
  }

  public static void mag_min(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_min(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_max(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_max(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static mag_struct _mag_vec_init(int n) {
    long cPtr = arblibJNI._mag_vec_init(n);
    return (cPtr == 0) ? null : new mag_struct(cPtr, false);
  }

  public static void _mag_vec_clear(mag_struct v, int n) {
    arblibJNI._mag_vec_clear(mag_struct.getCPtr(v), v, n);
  }

  public static double mag_get_d(mag_struct z) {
    return arblibJNI.mag_get_d(mag_struct.getCPtr(z), z);
  }

  public static double mag_get_d_log2_approx(mag_struct x) {
    return arblibJNI.mag_get_d_log2_approx(mag_struct.getCPtr(x), x);
  }

  public static double mag_d_log_upper_bound(double x) {
    return arblibJNI.mag_d_log_upper_bound(x);
  }

  public static double mag_d_log_lower_bound(double x) {
    return arblibJNI.mag_d_log_lower_bound(x);
  }

  public static void mag_log1p(mag_struct z, mag_struct x) {
    arblibJNI.mag_log1p(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x);
  }

  public static void mag_log_ui(mag_struct t, long n) {
    arblibJNI.mag_log_ui(mag_struct.getCPtr(t), t, n);
  }

  public static void mag_log(mag_struct z, mag_struct x) {
    arblibJNI.mag_log(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x);
  }

  public static void mag_log_lower(mag_struct z, mag_struct x) {
    arblibJNI.mag_log_lower(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x);
  }

  public static void mag_neg_log(mag_struct z, mag_struct x) {
    arblibJNI.mag_neg_log(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x);
  }

  public static void mag_neg_log_lower(mag_struct z, mag_struct x) {
    arblibJNI.mag_neg_log_lower(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x);
  }

  public static void mag_exp(mag_struct y, mag_struct x) {
    arblibJNI.mag_exp(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_exp_lower(mag_struct y, mag_struct x) {
    arblibJNI.mag_exp_lower(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_expinv(mag_struct res, mag_struct x) {
    arblibJNI.mag_expinv(mag_struct.getCPtr(res), res, mag_struct.getCPtr(x), x);
  }

  public static void mag_expinv_lower(mag_struct y, mag_struct x) {
    arblibJNI.mag_expinv_lower(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_expm1(mag_struct y, mag_struct x) {
    arblibJNI.mag_expm1(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_exp_tail(mag_struct z, mag_struct x, long N) {
    arblibJNI.mag_exp_tail(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, N);
  }

  public static void mag_sinh(mag_struct y, mag_struct x) {
    arblibJNI.mag_sinh(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_sinh_lower(mag_struct y, mag_struct x) {
    arblibJNI.mag_sinh_lower(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_cosh(mag_struct y, mag_struct x) {
    arblibJNI.mag_cosh(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_cosh_lower(mag_struct y, mag_struct x) {
    arblibJNI.mag_cosh_lower(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_pow_ui(mag_struct z, mag_struct x, long e) {
    arblibJNI.mag_pow_ui(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, e);
  }

  public static void mag_pow_ui_lower(mag_struct z, mag_struct x, long e) {
    arblibJNI.mag_pow_ui_lower(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, e);
  }

  public static void mag_pow_fmpz(mag_struct z, mag_struct x, SWIGTYPE_p_long e) {
    arblibJNI.mag_pow_fmpz(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(e));
  }

  public static void mag_pow_fmpz_lower(mag_struct z, mag_struct x, SWIGTYPE_p_long e) {
    arblibJNI.mag_pow_fmpz_lower(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(e));
  }

  public static void mag_const_pi(mag_struct res) {
    arblibJNI.mag_const_pi(mag_struct.getCPtr(res), res);
  }

  public static void mag_const_pi_lower(mag_struct res) {
    arblibJNI.mag_const_pi_lower(mag_struct.getCPtr(res), res);
  }

  public static void mag_atan(mag_struct res, mag_struct x) {
    arblibJNI.mag_atan(mag_struct.getCPtr(res), res, mag_struct.getCPtr(x), x);
  }

  public static void mag_atan_lower(mag_struct res, mag_struct x) {
    arblibJNI.mag_atan_lower(mag_struct.getCPtr(res), res, mag_struct.getCPtr(x), x);
  }

  public static void mag_fac_ui(mag_struct z, long n) {
    arblibJNI.mag_fac_ui(mag_struct.getCPtr(z), z, n);
  }

  public static void mag_rfac_ui(mag_struct z, long n) {
    arblibJNI.mag_rfac_ui(mag_struct.getCPtr(z), z, n);
  }

  public static void mag_bin_uiui(mag_struct res, long n, long k) {
    arblibJNI.mag_bin_uiui(mag_struct.getCPtr(res), res, n, k);
  }

  public static void mag_bernoulli_div_fac_ui(mag_struct z, long n) {
    arblibJNI.mag_bernoulli_div_fac_ui(mag_struct.getCPtr(z), z, n);
  }

  public static void mag_set_fmpz_2exp_fmpz_lower(mag_struct z, SWIGTYPE_p_long man, SWIGTYPE_p_long exp) {
    arblibJNI.mag_set_fmpz_2exp_fmpz_lower(mag_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_long.getCPtr(exp));
  }

  public static void mag_sqrt(mag_struct y, mag_struct x) {
    arblibJNI.mag_sqrt(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_sqrt_lower(mag_struct y, mag_struct x) {
    arblibJNI.mag_sqrt_lower(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_rsqrt(mag_struct y, mag_struct x) {
    arblibJNI.mag_rsqrt(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_rsqrt_lower(mag_struct y, mag_struct x) {
    arblibJNI.mag_rsqrt_lower(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_root(mag_struct y, mag_struct x, long n) {
    arblibJNI.mag_root(mag_struct.getCPtr(y), y, mag_struct.getCPtr(x), x, n);
  }

  public static void mag_hypot(mag_struct z, mag_struct x, mag_struct y) {
    arblibJNI.mag_hypot(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static void mag_binpow_uiui(mag_struct b, long m, long n) {
    arblibJNI.mag_binpow_uiui(mag_struct.getCPtr(b), b, m, n);
  }

  public static void mag_polylog_tail(mag_struct u, mag_struct z, int sigma, long d, long N) {
    arblibJNI.mag_polylog_tail(mag_struct.getCPtr(u), u, mag_struct.getCPtr(z), z, sigma, d, N);
  }

  public static void mag_geom_series(mag_struct res, mag_struct x, long n) {
    arblibJNI.mag_geom_series(mag_struct.getCPtr(res), res, mag_struct.getCPtr(x), x, n);
  }

  public static void mag_hurwitz_zeta_uiui(mag_struct res, long s, long a) {
    arblibJNI.mag_hurwitz_zeta_uiui(mag_struct.getCPtr(res), res, s, a);
  }

  public static void mag_set_ui(mag_struct z, long x) {
    arblibJNI.mag_set_ui(mag_struct.getCPtr(z), z, x);
  }

  public static void mag_set_ui_lower(mag_struct z, long x) {
    arblibJNI.mag_set_ui_lower(mag_struct.getCPtr(z), z, x);
  }

  public static void mag_set_ui_2exp_si(mag_struct z, long v, int e) {
    arblibJNI.mag_set_ui_2exp_si(mag_struct.getCPtr(z), z, v, e);
  }

  public static void mag_set_fmpz(mag_struct z, SWIGTYPE_p_long x) {
    arblibJNI.mag_set_fmpz(mag_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void mag_set_fmpz_lower(mag_struct z, SWIGTYPE_p_long x) {
    arblibJNI.mag_set_fmpz_lower(mag_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void mag_mul_ui(mag_struct z, mag_struct x, long y) {
    arblibJNI.mag_mul_ui(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, y);
  }

  public static void mag_mul_ui_lower(mag_struct z, mag_struct x, long y) {
    arblibJNI.mag_mul_ui_lower(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, y);
  }

  public static void mag_mul_fmpz(mag_struct z, mag_struct x, SWIGTYPE_p_long y) {
    arblibJNI.mag_mul_fmpz(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y));
  }

  public static void mag_mul_fmpz_lower(mag_struct z, mag_struct x, SWIGTYPE_p_long y) {
    arblibJNI.mag_mul_fmpz_lower(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y));
  }

  public static void mag_div_ui(mag_struct z, mag_struct x, long y) {
    arblibJNI.mag_div_ui(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, y);
  }

  public static void mag_div_fmpz(mag_struct z, mag_struct x, SWIGTYPE_p_long y) {
    arblibJNI.mag_div_fmpz(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y));
  }

  public static int mag_allocated_bytes(mag_struct x) {
    return arblibJNI.mag_allocated_bytes(mag_struct.getCPtr(x), x);
  }

  public static int mag_load_str(mag_struct res, String data) {
    return arblibJNI.mag_load_str(mag_struct.getCPtr(res), res, data);
  }

  public static String mag_dump_str(mag_struct x) {
    return arblibJNI.mag_dump_str(mag_struct.getCPtr(x), x);
  }

  public static int mag_load_file(mag_struct res, _IO_FILE stream) {
    return arblibJNI.mag_load_file(mag_struct.getCPtr(res), res, _IO_FILE.getCPtr(stream), stream);
  }

  public static int mag_dump_file(_IO_FILE stream, mag_struct x) {
    return arblibJNI.mag_dump_file(_IO_FILE.getCPtr(stream), stream, mag_struct.getCPtr(x), x);
  }

  public static int arf_rounds_down(int rnd, int sgnbit) {
    return arblibJNI.arf_rounds_down(rnd, sgnbit);
  }

  public static int arf_rounds_up(int rnd, int sgnbit) {
    return arblibJNI.arf_rounds_up(rnd, sgnbit);
  }

  public static mpfr_rnd_t arf_rnd_to_mpfr(int rnd) {
    return mpfr_rnd_t.swigToEnum(arblibJNI.arf_rnd_to_mpfr(rnd));
  }

  public static void _arf_promote(arf_struct x, int n) {
    arblibJNI._arf_promote(arf_struct.getCPtr(x), x, n);
  }

  public static void _arf_demote(arf_struct x) {
    arblibJNI._arf_demote(arf_struct.getCPtr(x), x);
  }

  public static void arf_init(arf_struct x) {
    arblibJNI.arf_init(arf_struct.getCPtr(x), x);
  }

  public static void arf_clear(arf_struct x) {
    arblibJNI.arf_clear(arf_struct.getCPtr(x), x);
  }

  public static void arf_zero(arf_struct x) {
    arblibJNI.arf_zero(arf_struct.getCPtr(x), x);
  }

  public static void arf_pos_inf(arf_struct x) {
    arblibJNI.arf_pos_inf(arf_struct.getCPtr(x), x);
  }

  public static void arf_neg_inf(arf_struct x) {
    arblibJNI.arf_neg_inf(arf_struct.getCPtr(x), x);
  }

  public static void arf_nan(arf_struct x) {
    arblibJNI.arf_nan(arf_struct.getCPtr(x), x);
  }

  public static int arf_is_special(arf_struct x) {
    return arblibJNI.arf_is_special(arf_struct.getCPtr(x), x);
  }

  public static int arf_is_zero(arf_struct x) {
    return arblibJNI.arf_is_zero(arf_struct.getCPtr(x), x);
  }

  public static int arf_is_pos_inf(arf_struct x) {
    return arblibJNI.arf_is_pos_inf(arf_struct.getCPtr(x), x);
  }

  public static int arf_is_neg_inf(arf_struct x) {
    return arblibJNI.arf_is_neg_inf(arf_struct.getCPtr(x), x);
  }

  public static int arf_is_nan(arf_struct x) {
    return arblibJNI.arf_is_nan(arf_struct.getCPtr(x), x);
  }

  public static int arf_is_normal(arf_struct x) {
    return arblibJNI.arf_is_normal(arf_struct.getCPtr(x), x);
  }

  public static int arf_is_finite(arf_struct x) {
    return arblibJNI.arf_is_finite(arf_struct.getCPtr(x), x);
  }

  public static int arf_is_inf(arf_struct x) {
    return arblibJNI.arf_is_inf(arf_struct.getCPtr(x), x);
  }

  public static void arf_one(arf_struct x) {
    arblibJNI.arf_one(arf_struct.getCPtr(x), x);
  }

  public static int arf_is_one(arf_struct x) {
    return arblibJNI.arf_is_one(arf_struct.getCPtr(x), x);
  }

  public static int arf_sgn(arf_struct x) {
    return arblibJNI.arf_sgn(arf_struct.getCPtr(x), x);
  }

  public static int arf_cmp(arf_struct x, arf_struct y) {
    return arblibJNI.arf_cmp(arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y);
  }

  public static int arf_cmpabs(arf_struct x, arf_struct y) {
    return arblibJNI.arf_cmpabs(arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y);
  }

  public static int arf_cmpabs_ui(arf_struct x, long y) {
    return arblibJNI.arf_cmpabs_ui(arf_struct.getCPtr(x), x, y);
  }

  public static int arf_cmpabs_d(arf_struct x, double y) {
    return arblibJNI.arf_cmpabs_d(arf_struct.getCPtr(x), x, y);
  }

  public static int arf_cmp_si(arf_struct x, int y) {
    return arblibJNI.arf_cmp_si(arf_struct.getCPtr(x), x, y);
  }

  public static int arf_cmp_ui(arf_struct x, long y) {
    return arblibJNI.arf_cmp_ui(arf_struct.getCPtr(x), x, y);
  }

  public static int arf_cmp_d(arf_struct x, double y) {
    return arblibJNI.arf_cmp_d(arf_struct.getCPtr(x), x, y);
  }

  public static void arf_swap(arf_struct y, arf_struct x) {
    arblibJNI.arf_swap(arf_struct.getCPtr(y), y, arf_struct.getCPtr(x), x);
  }

  public static void arf_set(arf_struct y, arf_struct x) {
    arblibJNI.arf_set(arf_struct.getCPtr(y), y, arf_struct.getCPtr(x), x);
  }

  public static void arf_neg(arf_struct y, arf_struct x) {
    arblibJNI.arf_neg(arf_struct.getCPtr(y), y, arf_struct.getCPtr(x), x);
  }

  public static void arf_init_set_ui(arf_struct x, long v) {
    arblibJNI.arf_init_set_ui(arf_struct.getCPtr(x), x, v);
  }

  public static void arf_init_set_si(arf_struct x, int v) {
    arblibJNI.arf_init_set_si(arf_struct.getCPtr(x), x, v);
  }

  public static void arf_set_ui(arf_struct x, long v) {
    arblibJNI.arf_set_ui(arf_struct.getCPtr(x), x, v);
  }

  public static void arf_set_si(arf_struct x, int v) {
    arblibJNI.arf_set_si(arf_struct.getCPtr(x), x, v);
  }

  public static void arf_init_set_shallow(arf_struct z, arf_struct x) {
    arblibJNI.arf_init_set_shallow(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x);
  }

  public static void arf_init_neg_shallow(arf_struct z, arf_struct x) {
    arblibJNI.arf_init_neg_shallow(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x);
  }

  public static void arf_init_set_mag_shallow(arf_struct y, mag_struct x) {
    arblibJNI.arf_init_set_mag_shallow(arf_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void arf_init_neg_mag_shallow(arf_struct z, mag_struct x) {
    arblibJNI.arf_init_neg_mag_shallow(arf_struct.getCPtr(z), z, mag_struct.getCPtr(x), x);
  }

  public static int arf_cmpabs_mag(arf_struct x, mag_struct y) {
    return arblibJNI.arf_cmpabs_mag(arf_struct.getCPtr(x), x, mag_struct.getCPtr(y), y);
  }

  public static int arf_mag_cmpabs(mag_struct x, arf_struct y) {
    return arblibJNI.arf_mag_cmpabs(mag_struct.getCPtr(x), x, arf_struct.getCPtr(y), y);
  }

  public static void arf_set_mpn(arf_struct y, SWIGTYPE_p_unsigned_long x, int xn, int sgnbit) {
    arblibJNI.arf_set_mpn(arf_struct.getCPtr(y), y, SWIGTYPE_p_unsigned_long.getCPtr(x), xn, sgnbit);
  }

  public static void arf_set_mpz(arf_struct y, __mpz_struct x) {
    arblibJNI.arf_set_mpz(arf_struct.getCPtr(y), y, __mpz_struct.getCPtr(x), x);
  }

  public static void arf_set_fmpz(arf_struct y, SWIGTYPE_p_long x) {
    arblibJNI.arf_set_fmpz(arf_struct.getCPtr(y), y, SWIGTYPE_p_long.getCPtr(x));
  }

  public static int _arf_set_round_ui(arf_struct x, long v, int sgnbit, int prec, int rnd) {
    return arblibJNI._arf_set_round_ui(arf_struct.getCPtr(x), x, v, sgnbit, prec, rnd);
  }

  public static int _arf_set_round_uiui(arf_struct z, SWIGTYPE_p_long fix, long hi, long lo, int sgnbit, int prec, int rnd) {
    return arblibJNI._arf_set_round_uiui(arf_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(fix), hi, lo, sgnbit, prec, rnd);
  }

  public static int _arf_set_round_mpn(arf_struct y, SWIGTYPE_p_long exp_shift, SWIGTYPE_p_unsigned_long x, int xn, int sgnbit, int prec, int rnd) {
    return arblibJNI._arf_set_round_mpn(arf_struct.getCPtr(y), y, SWIGTYPE_p_long.getCPtr(exp_shift), SWIGTYPE_p_unsigned_long.getCPtr(x), xn, sgnbit, prec, rnd);
  }

  public static int arf_set_round_ui(arf_struct x, long v, int prec, int rnd) {
    return arblibJNI.arf_set_round_ui(arf_struct.getCPtr(x), x, v, prec, rnd);
  }

  public static int arf_set_round_si(arf_struct x, int v, int prec, int rnd) {
    return arblibJNI.arf_set_round_si(arf_struct.getCPtr(x), x, v, prec, rnd);
  }

  public static int arf_set_round_mpz(arf_struct y, __mpz_struct x, int prec, int rnd) {
    return arblibJNI.arf_set_round_mpz(arf_struct.getCPtr(y), y, __mpz_struct.getCPtr(x), x, prec, rnd);
  }

  public static int arf_set_round_fmpz(arf_struct y, SWIGTYPE_p_long x, int prec, int rnd) {
    return arblibJNI.arf_set_round_fmpz(arf_struct.getCPtr(y), y, SWIGTYPE_p_long.getCPtr(x), prec, rnd);
  }

  public static int arf_set_round(arf_struct y, arf_struct x, int prec, int rnd) {
    return arblibJNI.arf_set_round(arf_struct.getCPtr(y), y, arf_struct.getCPtr(x), x, prec, rnd);
  }

  public static int arf_neg_round(arf_struct y, arf_struct x, int prec, int rnd) {
    return arblibJNI.arf_neg_round(arf_struct.getCPtr(y), y, arf_struct.getCPtr(x), x, prec, rnd);
  }

  public static void arf_get_fmpr(fmpr_struct y, arf_struct x) {
    arblibJNI.arf_get_fmpr(fmpr_struct.getCPtr(y), y, arf_struct.getCPtr(x), x);
  }

  public static void arf_set_fmpr(arf_struct y, fmpr_struct x) {
    arblibJNI.arf_set_fmpr(arf_struct.getCPtr(y), y, fmpr_struct.getCPtr(x), x);
  }

  public static int arf_get_mpfr(__mpfr_struct x, arf_struct y, mpfr_rnd_t rnd) {
    return arblibJNI.arf_get_mpfr(__mpfr_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, rnd.swigValue());
  }

  public static void arf_set_mpfr(arf_struct x, __mpfr_struct y) {
    arblibJNI.arf_set_mpfr(arf_struct.getCPtr(x), x, __mpfr_struct.getCPtr(y), y);
  }

  public static int arf_equal(arf_struct x, arf_struct y) {
    return arblibJNI.arf_equal(arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y);
  }

  public static int arf_equal_si(arf_struct x, int y) {
    return arblibJNI.arf_equal_si(arf_struct.getCPtr(x), x, y);
  }

  public static void arf_min(arf_struct z, arf_struct a, arf_struct b) {
    arblibJNI.arf_min(arf_struct.getCPtr(z), z, arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b);
  }

  public static void arf_max(arf_struct z, arf_struct a, arf_struct b) {
    arblibJNI.arf_max(arf_struct.getCPtr(z), z, arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b);
  }

  public static void arf_abs(arf_struct y, arf_struct x) {
    arblibJNI.arf_abs(arf_struct.getCPtr(y), y, arf_struct.getCPtr(x), x);
  }

  public static int arf_bits(arf_struct x) {
    return arblibJNI.arf_bits(arf_struct.getCPtr(x), x);
  }

  public static void arf_bot(SWIGTYPE_p_long e, arf_struct x) {
    arblibJNI.arf_bot(SWIGTYPE_p_long.getCPtr(e), arf_struct.getCPtr(x), x);
  }

  public static int arf_is_int(arf_struct x) {
    return arblibJNI.arf_is_int(arf_struct.getCPtr(x), x);
  }

  public static int arf_is_int_2exp_si(arf_struct x, int e) {
    return arblibJNI.arf_is_int_2exp_si(arf_struct.getCPtr(x), x, e);
  }

  public static int arf_cmp_2exp_si(arf_struct x, int e) {
    return arblibJNI.arf_cmp_2exp_si(arf_struct.getCPtr(x), x, e);
  }

  public static int arf_cmpabs_2exp_si(arf_struct x, int e) {
    return arblibJNI.arf_cmpabs_2exp_si(arf_struct.getCPtr(x), x, e);
  }

  public static void arf_set_si_2exp_si(arf_struct x, int man, int exp) {
    arblibJNI.arf_set_si_2exp_si(arf_struct.getCPtr(x), x, man, exp);
  }

  public static void arf_set_ui_2exp_si(arf_struct x, long man, int exp) {
    arblibJNI.arf_set_ui_2exp_si(arf_struct.getCPtr(x), x, man, exp);
  }

  public static void arf_mul_2exp_si(arf_struct y, arf_struct x, int e) {
    arblibJNI.arf_mul_2exp_si(arf_struct.getCPtr(y), y, arf_struct.getCPtr(x), x, e);
  }

  public static void arf_mul_2exp_fmpz(arf_struct y, arf_struct x, SWIGTYPE_p_long e) {
    arblibJNI.arf_mul_2exp_fmpz(arf_struct.getCPtr(y), y, arf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(e));
  }

  public static int arf_set_round_fmpz_2exp(arf_struct y, SWIGTYPE_p_long x, SWIGTYPE_p_long exp, int prec, int rnd) {
    return arblibJNI.arf_set_round_fmpz_2exp(arf_struct.getCPtr(y), y, SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(exp), prec, rnd);
  }

  public static void arf_abs_bound_lt_2exp_fmpz(SWIGTYPE_p_long b, arf_struct x) {
    arblibJNI.arf_abs_bound_lt_2exp_fmpz(SWIGTYPE_p_long.getCPtr(b), arf_struct.getCPtr(x), x);
  }

  public static void arf_abs_bound_le_2exp_fmpz(SWIGTYPE_p_long b, arf_struct x) {
    arblibJNI.arf_abs_bound_le_2exp_fmpz(SWIGTYPE_p_long.getCPtr(b), arf_struct.getCPtr(x), x);
  }

  public static int arf_abs_bound_lt_2exp_si(arf_struct x) {
    return arblibJNI.arf_abs_bound_lt_2exp_si(arf_struct.getCPtr(x), x);
  }

  public static void arf_frexp(arf_struct man, SWIGTYPE_p_long exp, arf_struct x) {
    arblibJNI.arf_frexp(arf_struct.getCPtr(man), man, SWIGTYPE_p_long.getCPtr(exp), arf_struct.getCPtr(x), x);
  }

  public static void arf_get_fmpz_2exp(SWIGTYPE_p_long man, SWIGTYPE_p_long exp, arf_struct x) {
    arblibJNI.arf_get_fmpz_2exp(SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_long.getCPtr(exp), arf_struct.getCPtr(x), x);
  }

  public static int _arf_get_integer_mpn(SWIGTYPE_p_unsigned_long y, SWIGTYPE_p_unsigned_long x, int xn, int exp) {
    return arblibJNI._arf_get_integer_mpn(SWIGTYPE_p_unsigned_long.getCPtr(y), SWIGTYPE_p_unsigned_long.getCPtr(x), xn, exp);
  }

  public static int _arf_set_mpn_fixed(arf_struct z, SWIGTYPE_p_unsigned_long xp, int xn, int fixn, int negative, int prec, int rnd) {
    return arblibJNI._arf_set_mpn_fixed(arf_struct.getCPtr(z), z, SWIGTYPE_p_unsigned_long.getCPtr(xp), xn, fixn, negative, prec, rnd);
  }

  public static int arf_get_fmpz(SWIGTYPE_p_long z, arf_struct x, int rnd) {
    return arblibJNI.arf_get_fmpz(SWIGTYPE_p_long.getCPtr(z), arf_struct.getCPtr(x), x, rnd);
  }

  public static int arf_get_si(arf_struct x, int rnd) {
    return arblibJNI.arf_get_si(arf_struct.getCPtr(x), x, rnd);
  }

  public static int arf_get_fmpz_fixed_fmpz(SWIGTYPE_p_long y, arf_struct x, SWIGTYPE_p_long e) {
    return arblibJNI.arf_get_fmpz_fixed_fmpz(SWIGTYPE_p_long.getCPtr(y), arf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(e));
  }

  public static int arf_get_fmpz_fixed_si(SWIGTYPE_p_long y, arf_struct x, int e) {
    return arblibJNI.arf_get_fmpz_fixed_si(SWIGTYPE_p_long.getCPtr(y), arf_struct.getCPtr(x), x, e);
  }

  public static void arf_set_fmpz_2exp(arf_struct x, SWIGTYPE_p_long man, SWIGTYPE_p_long exp) {
    arblibJNI.arf_set_fmpz_2exp(arf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_long.getCPtr(exp));
  }

  public static void arf_floor(arf_struct z, arf_struct x) {
    arblibJNI.arf_floor(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x);
  }

  public static void arf_ceil(arf_struct z, arf_struct x) {
    arblibJNI.arf_ceil(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x);
  }

  public static void arf_debug(arf_struct x) {
    arblibJNI.arf_debug(arf_struct.getCPtr(x), x);
  }

  public static void arf_fprint(_IO_FILE file, arf_struct x) {
    arblibJNI.arf_fprint(_IO_FILE.getCPtr(file), file, arf_struct.getCPtr(x), x);
  }

  public static void arf_fprintd(_IO_FILE file, arf_struct y, int d) {
    arblibJNI.arf_fprintd(_IO_FILE.getCPtr(file), file, arf_struct.getCPtr(y), y, d);
  }

  public static void arf_print(arf_struct x) {
    arblibJNI.arf_print(arf_struct.getCPtr(x), x);
  }

  public static void arf_printd(arf_struct y, int d) {
    arblibJNI.arf_printd(arf_struct.getCPtr(y), y, d);
  }

  public static void arf_randtest(arf_struct x, flint_rand_s state, int bits, int mag_bits) {
    arblibJNI.arf_randtest(arf_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, bits, mag_bits);
  }

  public static void arf_randtest_not_zero(arf_struct x, flint_rand_s state, int bits, int mag_bits) {
    arblibJNI.arf_randtest_not_zero(arf_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, bits, mag_bits);
  }

  public static void arf_randtest_special(arf_struct x, flint_rand_s state, int bits, int mag_bits) {
    arblibJNI.arf_randtest_special(arf_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, bits, mag_bits);
  }

  public static void set__arf_mul_tmp(SWIGTYPE_p_unsigned_long value) {
    arblibJNI.__arf_mul_tmp_set(SWIGTYPE_p_unsigned_long.getCPtr(value));
  }

  public static SWIGTYPE_p_unsigned_long get__arf_mul_tmp() {
    long cPtr = arblibJNI.__arf_mul_tmp_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static void set__arf_mul_alloc(int value) {
    arblibJNI.__arf_mul_alloc_set(value);
  }

  public static int get__arf_mul_alloc() {
    return arblibJNI.__arf_mul_alloc_get();
  }

  public static void _arf_mul_tmp_cleanup() {
    arblibJNI._arf_mul_tmp_cleanup();
  }

  public static void arf_mul_special(arf_struct z, arf_struct x, arf_struct y) {
    arblibJNI.arf_mul_special(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y);
  }

  public static int arf_mul_via_mpfr(arf_struct z, arf_struct x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_mul_via_mpfr(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_mul_rnd_any(arf_struct z, arf_struct x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_mul_rnd_any(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_mul_rnd_down(arf_struct z, arf_struct x, arf_struct y, int prec) {
    return arblibJNI.arf_mul_rnd_down(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec);
  }

  public static int arf_neg_mul(arf_struct z, arf_struct x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_neg_mul(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_mul_ui(arf_struct z, arf_struct x, long y, int prec, int rnd) {
    return arblibJNI.arf_mul_ui(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_mul_si(arf_struct z, arf_struct x, int y, int prec, int rnd) {
    return arblibJNI.arf_mul_si(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_mul_mpz(arf_struct z, arf_struct x, __mpz_struct y, int prec, int rnd) {
    return arblibJNI.arf_mul_mpz(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, __mpz_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_mul_fmpz(arf_struct z, arf_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.arf_mul_fmpz(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static void set__arf_add_tmp(SWIGTYPE_p_unsigned_long value) {
    arblibJNI.__arf_add_tmp_set(SWIGTYPE_p_unsigned_long.getCPtr(value));
  }

  public static SWIGTYPE_p_unsigned_long get__arf_add_tmp() {
    long cPtr = arblibJNI.__arf_add_tmp_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static void set__arf_add_alloc(int value) {
    arblibJNI.__arf_add_alloc_set(value);
  }

  public static int get__arf_add_alloc() {
    return arblibJNI.__arf_add_alloc_get();
  }

  public static void _arf_add_tmp_cleanup() {
    arblibJNI._arf_add_tmp_cleanup();
  }

  public static int _arf_add_mpn(arf_struct z, SWIGTYPE_p_unsigned_long xp, int xn, int xsgnbit, SWIGTYPE_p_long xexp, SWIGTYPE_p_unsigned_long yp, int yn, int ysgnbit, long shift, int prec, int rnd) {
    return arblibJNI._arf_add_mpn(arf_struct.getCPtr(z), z, SWIGTYPE_p_unsigned_long.getCPtr(xp), xn, xsgnbit, SWIGTYPE_p_long.getCPtr(xexp), SWIGTYPE_p_unsigned_long.getCPtr(yp), yn, ysgnbit, shift, prec, rnd);
  }

  public static int arf_add(arf_struct z, arf_struct x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_add(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_add_si(arf_struct z, arf_struct x, int y, int prec, int rnd) {
    return arblibJNI.arf_add_si(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_add_ui(arf_struct z, arf_struct x, long y, int prec, int rnd) {
    return arblibJNI.arf_add_ui(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_add_fmpz(arf_struct z, arf_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.arf_add_fmpz(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int arf_add_fmpz_2exp(arf_struct z, arf_struct x, SWIGTYPE_p_long y, SWIGTYPE_p_long exp, int prec, int rnd) {
    return arblibJNI.arf_add_fmpz_2exp(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), SWIGTYPE_p_long.getCPtr(exp), prec, rnd);
  }

  public static int arf_sub(arf_struct z, arf_struct x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_sub(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_sub_si(arf_struct z, arf_struct x, int y, int prec, int rnd) {
    return arblibJNI.arf_sub_si(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_sub_ui(arf_struct z, arf_struct x, long y, int prec, int rnd) {
    return arblibJNI.arf_sub_ui(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_sub_fmpz(arf_struct z, arf_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.arf_sub_fmpz(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int arf_addmul(arf_struct z, arf_struct x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_addmul(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_addmul_ui(arf_struct z, arf_struct x, long y, int prec, int rnd) {
    return arblibJNI.arf_addmul_ui(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_addmul_si(arf_struct z, arf_struct x, int y, int prec, int rnd) {
    return arblibJNI.arf_addmul_si(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_addmul_mpz(arf_struct z, arf_struct x, __mpz_struct y, int prec, int rnd) {
    return arblibJNI.arf_addmul_mpz(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, __mpz_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_addmul_fmpz(arf_struct z, arf_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.arf_addmul_fmpz(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int arf_submul(arf_struct z, arf_struct x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_submul(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_submul_ui(arf_struct z, arf_struct x, long y, int prec, int rnd) {
    return arblibJNI.arf_submul_ui(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_submul_si(arf_struct z, arf_struct x, int y, int prec, int rnd) {
    return arblibJNI.arf_submul_si(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_submul_mpz(arf_struct z, arf_struct x, __mpz_struct y, int prec, int rnd) {
    return arblibJNI.arf_submul_mpz(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, __mpz_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_submul_fmpz(arf_struct z, arf_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.arf_submul_fmpz(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int arf_sosq(arf_struct z, arf_struct x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_sosq(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_div(arf_struct z, arf_struct x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_div(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_div_ui(arf_struct z, arf_struct x, long y, int prec, int rnd) {
    return arblibJNI.arf_div_ui(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_ui_div(arf_struct z, long x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_ui_div(arf_struct.getCPtr(z), z, x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_div_si(arf_struct z, arf_struct x, int y, int prec, int rnd) {
    return arblibJNI.arf_div_si(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_si_div(arf_struct z, int x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_si_div(arf_struct.getCPtr(z), z, x, arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_div_fmpz(arf_struct z, arf_struct x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.arf_div_fmpz(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int arf_fmpz_div(arf_struct z, SWIGTYPE_p_long x, arf_struct y, int prec, int rnd) {
    return arblibJNI.arf_fmpz_div(arf_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), arf_struct.getCPtr(y), y, prec, rnd);
  }

  public static int arf_fmpz_div_fmpz(arf_struct z, SWIGTYPE_p_long x, SWIGTYPE_p_long y, int prec, int rnd) {
    return arblibJNI.arf_fmpz_div_fmpz(arf_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y), prec, rnd);
  }

  public static int arf_sqrt(arf_struct z, arf_struct x, int prec, int rnd) {
    return arblibJNI.arf_sqrt(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, prec, rnd);
  }

  public static int arf_sqrt_ui(arf_struct z, long x, int prec, int rnd) {
    return arblibJNI.arf_sqrt_ui(arf_struct.getCPtr(z), z, x, prec, rnd);
  }

  public static int arf_sqrt_fmpz(arf_struct z, SWIGTYPE_p_long x, int prec, int rnd) {
    return arblibJNI.arf_sqrt_fmpz(arf_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), prec, rnd);
  }

  public static int arf_rsqrt(arf_struct z, arf_struct x, int prec, int rnd) {
    return arblibJNI.arf_rsqrt(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, prec, rnd);
  }

  public static int arf_root(arf_struct z, arf_struct x, long k, int prec, int rnd) {
    return arblibJNI.arf_root(arf_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, k, prec, rnd);
  }

  public static void arf_get_mag(mag_struct y, arf_struct x) {
    arblibJNI.arf_get_mag(mag_struct.getCPtr(y), y, arf_struct.getCPtr(x), x);
  }

  public static void arf_get_mag_lower(mag_struct y, arf_struct x) {
    arblibJNI.arf_get_mag_lower(mag_struct.getCPtr(y), y, arf_struct.getCPtr(x), x);
  }

  public static void arf_set_mag(arf_struct y, mag_struct x) {
    arblibJNI.arf_set_mag(arf_struct.getCPtr(y), y, mag_struct.getCPtr(x), x);
  }

  public static void mag_init_set_arf(mag_struct y, arf_struct x) {
    arblibJNI.mag_init_set_arf(mag_struct.getCPtr(y), y, arf_struct.getCPtr(x), x);
  }

  public static void mag_fast_init_set_arf(mag_struct y, arf_struct x) {
    arblibJNI.mag_fast_init_set_arf(mag_struct.getCPtr(y), y, arf_struct.getCPtr(x), x);
  }

  public static void arf_mag_fast_add_ulp(mag_struct z, mag_struct x, arf_struct y, int prec) {
    arblibJNI.arf_mag_fast_add_ulp(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec);
  }

  public static void arf_mag_add_ulp(mag_struct z, mag_struct x, arf_struct y, int prec) {
    arblibJNI.arf_mag_add_ulp(mag_struct.getCPtr(z), z, mag_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec);
  }

  public static void arf_mag_set_ulp(mag_struct z, arf_struct y, int prec) {
    arblibJNI.arf_mag_set_ulp(mag_struct.getCPtr(z), z, arf_struct.getCPtr(y), y, prec);
  }

  public static void arf_get_fmpq(fmpq y, arf_struct x) {
    arblibJNI.arf_get_fmpq(fmpq.getCPtr(y), y, arf_struct.getCPtr(x), x);
  }

  public static int arf_set_fmpq(arf_struct y, fmpq x, int prec, int rnd) {
    return arblibJNI.arf_set_fmpq(arf_struct.getCPtr(y), y, fmpq.getCPtr(x), x, prec, rnd);
  }

  public static int arf_complex_mul(arf_struct e, arf_struct f, arf_struct a, arf_struct b, arf_struct c, arf_struct d, int prec, int rnd) {
    return arblibJNI.arf_complex_mul(arf_struct.getCPtr(e), e, arf_struct.getCPtr(f), f, arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b, arf_struct.getCPtr(c), c, arf_struct.getCPtr(d), d, prec, rnd);
  }

  public static int arf_complex_mul_fallback(arf_struct e, arf_struct f, arf_struct a, arf_struct b, arf_struct c, arf_struct d, int prec, int rnd) {
    return arblibJNI.arf_complex_mul_fallback(arf_struct.getCPtr(e), e, arf_struct.getCPtr(f), f, arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b, arf_struct.getCPtr(c), c, arf_struct.getCPtr(d), d, prec, rnd);
  }

  public static int arf_complex_sqr(arf_struct e, arf_struct f, arf_struct a, arf_struct b, int prec, int rnd) {
    return arblibJNI.arf_complex_sqr(arf_struct.getCPtr(e), e, arf_struct.getCPtr(f), f, arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b, prec, rnd);
  }

  public static int arf_sum(arf_struct s, arf_struct terms, int len, int prec, int rnd) {
    return arblibJNI.arf_sum(arf_struct.getCPtr(s), s, arf_struct.getCPtr(terms), terms, len, prec, rnd);
  }

  public static double arf_get_d(arf_struct x, int rnd) {
    return arblibJNI.arf_get_d(arf_struct.getCPtr(x), x, rnd);
  }

  public static void arf_set_d(arf_struct x, double v) {
    arblibJNI.arf_set_d(arf_struct.getCPtr(x), x, v);
  }

  public static int arf_allocated_bytes(arf_struct x) {
    return arblibJNI.arf_allocated_bytes(arf_struct.getCPtr(x), x);
  }

  public static int arf_load_str(arf_struct res, String data) {
    return arblibJNI.arf_load_str(arf_struct.getCPtr(res), res, data);
  }

  public static String arf_dump_str(arf_struct x) {
    return arblibJNI.arf_dump_str(arf_struct.getCPtr(x), x);
  }

  public static int arf_load_file(arf_struct res, _IO_FILE stream) {
    return arblibJNI.arf_load_file(arf_struct.getCPtr(res), res, _IO_FILE.getCPtr(stream), stream);
  }

  public static int arf_dump_file(_IO_FILE stream, arf_struct x) {
    return arblibJNI.arf_dump_file(_IO_FILE.getCPtr(stream), stream, arf_struct.getCPtr(x), x);
  }

  public static void setArb_version(String value) {
    arblibJNI.arb_version_set(value);
  }

  public static String getArb_version() {
    return arblibJNI.arb_version_get();
  }

  public static void arb_init(arb_struct x) {
    arblibJNI.arb_init(arb_struct.getCPtr(x), x);
  }

  public static void arb_clear(arb_struct x) {
    arblibJNI.arb_clear(arb_struct.getCPtr(x), x);
  }

  public static arb_struct _arb_vec_init(int n) {
    long cPtr = arblibJNI._arb_vec_init(n);
    return (cPtr == 0) ? null : new arb_struct(cPtr, false);
  }

  public static void _arb_vec_clear(arb_struct v, int n) {
    arblibJNI._arb_vec_clear(arb_struct.getCPtr(v), v, n);
  }

  public static arf_struct arb_mid_ptr(arb_struct z) {
    long cPtr = arblibJNI.arb_mid_ptr(arb_struct.getCPtr(z), z);
    return (cPtr == 0) ? null : new arf_struct(cPtr, false);
  }

  public static mag_struct arb_rad_ptr(arb_struct z) {
    long cPtr = arblibJNI.arb_rad_ptr(arb_struct.getCPtr(z), z);
    return (cPtr == 0) ? null : new mag_struct(cPtr, false);
  }

  public static int arb_is_exact(arb_struct x) {
    return arblibJNI.arb_is_exact(arb_struct.getCPtr(x), x);
  }

  public static int arb_equal(arb_struct x, arb_struct y) {
    return arblibJNI.arb_equal(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static int arb_equal_si(arb_struct x, int y) {
    return arblibJNI.arb_equal_si(arb_struct.getCPtr(x), x, y);
  }

  public static int arb_eq(arb_struct x, arb_struct y) {
    return arblibJNI.arb_eq(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static int arb_ne(arb_struct x, arb_struct y) {
    return arblibJNI.arb_ne(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static int arb_lt(arb_struct x, arb_struct y) {
    return arblibJNI.arb_lt(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static int arb_le(arb_struct x, arb_struct y) {
    return arblibJNI.arb_le(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static int arb_gt(arb_struct x, arb_struct y) {
    return arblibJNI.arb_gt(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static int arb_ge(arb_struct x, arb_struct y) {
    return arblibJNI.arb_ge(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static void arb_zero(arb_struct x) {
    arblibJNI.arb_zero(arb_struct.getCPtr(x), x);
  }

  public static int arb_is_zero(arb_struct x) {
    return arblibJNI.arb_is_zero(arb_struct.getCPtr(x), x);
  }

  public static void arb_pos_inf(arb_struct x) {
    arblibJNI.arb_pos_inf(arb_struct.getCPtr(x), x);
  }

  public static void arb_neg_inf(arb_struct x) {
    arblibJNI.arb_neg_inf(arb_struct.getCPtr(x), x);
  }

  public static void arb_zero_pm_inf(arb_struct x) {
    arblibJNI.arb_zero_pm_inf(arb_struct.getCPtr(x), x);
  }

  public static void arb_zero_pm_one(arb_struct x) {
    arblibJNI.arb_zero_pm_one(arb_struct.getCPtr(x), x);
  }

  public static void arb_unit_interval(arb_struct x) {
    arblibJNI.arb_unit_interval(arb_struct.getCPtr(x), x);
  }

  public static void arb_indeterminate(arb_struct x) {
    arblibJNI.arb_indeterminate(arb_struct.getCPtr(x), x);
  }

  public static int arb_is_finite(arb_struct x) {
    return arblibJNI.arb_is_finite(arb_struct.getCPtr(x), x);
  }

  public static void arb_set(arb_struct x, arb_struct y) {
    arblibJNI.arb_set(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static void arb_swap(arb_struct x, arb_struct y) {
    arblibJNI.arb_swap(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static void arb_set_round(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_set_round(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_trim(arb_struct y, arb_struct x) {
    arblibJNI.arb_trim(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x);
  }

  public static void arb_neg(arb_struct y, arb_struct x) {
    arblibJNI.arb_neg(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x);
  }

  public static void arb_neg_round(arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_neg_round(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_abs(arb_struct y, arb_struct x) {
    arblibJNI.arb_abs(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x);
  }

  public static void arb_sgn(arb_struct res, arb_struct x) {
    arblibJNI.arb_sgn(arb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x);
  }

  public static int arb_sgn_nonzero(arb_struct x) {
    return arblibJNI.arb_sgn_nonzero(arb_struct.getCPtr(x), x);
  }

  public static void _arb_digits_round_inplace(String s, SWIGTYPE_p_unsigned_long shift, SWIGTYPE_p_long error, int n, int rnd) {
    arblibJNI._arb_digits_round_inplace(s, SWIGTYPE_p_unsigned_long.getCPtr(shift), SWIGTYPE_p_long.getCPtr(error), n, rnd);
  }

  public static int arb_set_str(arb_struct res, String inp, int prec) {
    return arblibJNI.arb_set_str(arb_struct.getCPtr(res), res, inp, prec);
  }

  public static String arb_get_str(arb_struct x, int n, long flags) {
    return arblibJNI.arb_get_str(arb_struct.getCPtr(x), x, n, flags);
  }

  public static void arb_set_arf(arb_struct x, arf_struct y) {
    arblibJNI.arb_set_arf(arb_struct.getCPtr(x), x, arf_struct.getCPtr(y), y);
  }

  public static void arb_set_si(arb_struct x, int y) {
    arblibJNI.arb_set_si(arb_struct.getCPtr(x), x, y);
  }

  public static void arb_set_ui(arb_struct x, long y) {
    arblibJNI.arb_set_ui(arb_struct.getCPtr(x), x, y);
  }

  public static void arb_set_d(arb_struct x, double y) {
    arblibJNI.arb_set_d(arb_struct.getCPtr(x), x, y);
  }

  public static void arb_set_fmpz(arb_struct x, SWIGTYPE_p_long y) {
    arblibJNI.arb_set_fmpz(arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y));
  }

  public static void arb_set_fmpz_2exp(arb_struct x, SWIGTYPE_p_long y, SWIGTYPE_p_long exp) {
    arblibJNI.arb_set_fmpz_2exp(arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), SWIGTYPE_p_long.getCPtr(exp));
  }

  public static void arb_set_round_fmpz_2exp(arb_struct y, SWIGTYPE_p_long x, SWIGTYPE_p_long exp, int prec) {
    arblibJNI.arb_set_round_fmpz_2exp(arb_struct.getCPtr(y), y, SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(exp), prec);
  }

  public static void arb_set_round_fmpz(arb_struct y, SWIGTYPE_p_long x, int prec) {
    arblibJNI.arb_set_round_fmpz(arb_struct.getCPtr(y), y, SWIGTYPE_p_long.getCPtr(x), prec);
  }

  public static int arb_is_one(arb_struct f) {
    return arblibJNI.arb_is_one(arb_struct.getCPtr(f), f);
  }

  public static void arb_one(arb_struct f) {
    arblibJNI.arb_one(arb_struct.getCPtr(f), f);
  }

  public static void arb_fprint(_IO_FILE file, arb_struct x) {
    arblibJNI.arb_fprint(_IO_FILE.getCPtr(file), file, arb_struct.getCPtr(x), x);
  }

  public static void arb_fprintd(_IO_FILE file, arb_struct x, int digits) {
    arblibJNI.arb_fprintd(_IO_FILE.getCPtr(file), file, arb_struct.getCPtr(x), x, digits);
  }

  public static void arb_fprintn(_IO_FILE file, arb_struct x, int digits, long flags) {
    arblibJNI.arb_fprintn(_IO_FILE.getCPtr(file), file, arb_struct.getCPtr(x), x, digits, flags);
  }

  public static void arb_print(arb_struct x) {
    arblibJNI.arb_print(arb_struct.getCPtr(x), x);
  }

  public static void arb_printd(arb_struct x, int digits) {
    arblibJNI.arb_printd(arb_struct.getCPtr(x), x, digits);
  }

  public static void arb_printn(arb_struct x, int digits, long flags) {
    arblibJNI.arb_printn(arb_struct.getCPtr(x), x, digits, flags);
  }

  public static void arb_mul_2exp_si(arb_struct y, arb_struct x, int e) {
    arblibJNI.arb_mul_2exp_si(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, e);
  }

  public static void arb_mul_2exp_fmpz(arb_struct y, arb_struct x, SWIGTYPE_p_long e) {
    arblibJNI.arb_mul_2exp_fmpz(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(e));
  }

  public static int arb_is_int(arb_struct x) {
    return arblibJNI.arb_is_int(arb_struct.getCPtr(x), x);
  }

  public static int arb_is_int_2exp_si(arb_struct x, int e) {
    return arblibJNI.arb_is_int_2exp_si(arb_struct.getCPtr(x), x, e);
  }

  public static int arb_contains_zero(arb_struct x) {
    return arblibJNI.arb_contains_zero(arb_struct.getCPtr(x), x);
  }

  public static int arb_is_nonzero(arb_struct x) {
    return arblibJNI.arb_is_nonzero(arb_struct.getCPtr(x), x);
  }

  public static int arb_is_positive(arb_struct x) {
    return arblibJNI.arb_is_positive(arb_struct.getCPtr(x), x);
  }

  public static int arb_is_nonnegative(arb_struct x) {
    return arblibJNI.arb_is_nonnegative(arb_struct.getCPtr(x), x);
  }

  public static int arb_is_negative(arb_struct x) {
    return arblibJNI.arb_is_negative(arb_struct.getCPtr(x), x);
  }

  public static int arb_is_nonpositive(arb_struct x) {
    return arblibJNI.arb_is_nonpositive(arb_struct.getCPtr(x), x);
  }

  public static int arb_contains_negative(arb_struct x) {
    return arblibJNI.arb_contains_negative(arb_struct.getCPtr(x), x);
  }

  public static int arb_contains_nonpositive(arb_struct x) {
    return arblibJNI.arb_contains_nonpositive(arb_struct.getCPtr(x), x);
  }

  public static int arb_contains_positive(arb_struct x) {
    return arblibJNI.arb_contains_positive(arb_struct.getCPtr(x), x);
  }

  public static int arb_contains_nonnegative(arb_struct x) {
    return arblibJNI.arb_contains_nonnegative(arb_struct.getCPtr(x), x);
  }

  public static void arb_get_mag_lower(mag_struct z, arb_struct x) {
    arblibJNI.arb_get_mag_lower(mag_struct.getCPtr(z), z, arb_struct.getCPtr(x), x);
  }

  public static void arb_get_mag_lower_nonnegative(mag_struct z, arb_struct x) {
    arblibJNI.arb_get_mag_lower_nonnegative(mag_struct.getCPtr(z), z, arb_struct.getCPtr(x), x);
  }

  public static void arb_get_mag(mag_struct z, arb_struct x) {
    arblibJNI.arb_get_mag(mag_struct.getCPtr(z), z, arb_struct.getCPtr(x), x);
  }

  public static void arb_get_mid_arb(arb_struct z, arb_struct x) {
    arblibJNI.arb_get_mid_arb(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x);
  }

  public static void arb_get_rad_arb(arb_struct z, arb_struct x) {
    arblibJNI.arb_get_rad_arb(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x);
  }

  public static void arb_get_abs_ubound_arf(arf_struct u, arb_struct x, int prec) {
    arblibJNI.arb_get_abs_ubound_arf(arf_struct.getCPtr(u), u, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_get_abs_lbound_arf(arf_struct u, arb_struct x, int prec) {
    arblibJNI.arb_get_abs_lbound_arf(arf_struct.getCPtr(u), u, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_get_ubound_arf(arf_struct u, arb_struct x, int prec) {
    arblibJNI.arb_get_ubound_arf(arf_struct.getCPtr(u), u, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_get_lbound_arf(arf_struct u, arb_struct x, int prec) {
    arblibJNI.arb_get_lbound_arf(arf_struct.getCPtr(u), u, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_nonnegative_part(arb_struct res, arb_struct x) {
    arblibJNI.arb_nonnegative_part(arb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x);
  }

  public static int arb_rel_error_bits(arb_struct x) {
    return arblibJNI.arb_rel_error_bits(arb_struct.getCPtr(x), x);
  }

  public static int arb_rel_accuracy_bits(arb_struct x) {
    return arblibJNI.arb_rel_accuracy_bits(arb_struct.getCPtr(x), x);
  }

  public static int arb_rel_one_accuracy_bits(arb_struct x) {
    return arblibJNI.arb_rel_one_accuracy_bits(arb_struct.getCPtr(x), x);
  }

  public static int arb_bits(arb_struct x) {
    return arblibJNI.arb_bits(arb_struct.getCPtr(x), x);
  }

  public static void arb_randtest_exact(arb_struct x, flint_rand_s state, int prec, int mag_bits) {
    arblibJNI.arb_randtest_exact(arb_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, prec, mag_bits);
  }

  public static void arb_randtest_wide(arb_struct x, flint_rand_s state, int prec, int mag_bits) {
    arblibJNI.arb_randtest_wide(arb_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, prec, mag_bits);
  }

  public static void arb_randtest_precise(arb_struct x, flint_rand_s state, int prec, int mag_bits) {
    arblibJNI.arb_randtest_precise(arb_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, prec, mag_bits);
  }

  public static void arb_randtest(arb_struct x, flint_rand_s state, int prec, int mag_bits) {
    arblibJNI.arb_randtest(arb_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, prec, mag_bits);
  }

  public static void arb_randtest_special(arb_struct x, flint_rand_s state, int prec, int mag_bits) {
    arblibJNI.arb_randtest_special(arb_struct.getCPtr(x), x, flint_rand_s.getCPtr(state), state, prec, mag_bits);
  }

  public static void arb_add_error_arf(arb_struct x, arf_struct err) {
    arblibJNI.arb_add_error_arf(arb_struct.getCPtr(x), x, arf_struct.getCPtr(err), err);
  }

  public static void arb_add_error_2exp_si(arb_struct x, int err) {
    arblibJNI.arb_add_error_2exp_si(arb_struct.getCPtr(x), x, err);
  }

  public static void arb_add_error_2exp_fmpz(arb_struct x, SWIGTYPE_p_long err) {
    arblibJNI.arb_add_error_2exp_fmpz(arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(err));
  }

  public static void arb_add_error(arb_struct x, arb_struct error) {
    arblibJNI.arb_add_error(arb_struct.getCPtr(x), x, arb_struct.getCPtr(error), error);
  }

  public static void arb_add_error_mag(arb_struct x, mag_struct err) {
    arblibJNI.arb_add_error_mag(arb_struct.getCPtr(x), x, mag_struct.getCPtr(err), err);
  }

  public static int arb_contains_arf(arb_struct x, arf_struct y) {
    return arblibJNI.arb_contains_arf(arb_struct.getCPtr(x), x, arf_struct.getCPtr(y), y);
  }

  public static int arb_contains_fmpq(arb_struct x, fmpq y) {
    return arblibJNI.arb_contains_fmpq(arb_struct.getCPtr(x), x, fmpq.getCPtr(y), y);
  }

  public static int arb_contains_fmpz(arb_struct x, SWIGTYPE_p_long y) {
    return arblibJNI.arb_contains_fmpz(arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y));
  }

  public static int arb_contains_si(arb_struct x, int y) {
    return arblibJNI.arb_contains_si(arb_struct.getCPtr(x), x, y);
  }

  public static int arb_contains_mpfr(arb_struct x, __mpfr_struct y) {
    return arblibJNI.arb_contains_mpfr(arb_struct.getCPtr(x), x, __mpfr_struct.getCPtr(y), y);
  }

  public static int arb_overlaps(arb_struct x, arb_struct y) {
    return arblibJNI.arb_overlaps(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static int arb_contains(arb_struct x, arb_struct y) {
    return arblibJNI.arb_contains(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static int arb_contains_interior(arb_struct x, arb_struct y) {
    return arblibJNI.arb_contains_interior(arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static int arb_contains_int(arb_struct x) {
    return arblibJNI.arb_contains_int(arb_struct.getCPtr(x), x);
  }

  public static void arb_get_interval_fmpz_2exp(SWIGTYPE_p_long a, SWIGTYPE_p_long b, SWIGTYPE_p_long exp, arb_struct x) {
    arblibJNI.arb_get_interval_fmpz_2exp(SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b), SWIGTYPE_p_long.getCPtr(exp), arb_struct.getCPtr(x), x);
  }

  public static int arb_get_unique_fmpz(SWIGTYPE_p_long z, arb_struct x) {
    return arblibJNI.arb_get_unique_fmpz(SWIGTYPE_p_long.getCPtr(z), arb_struct.getCPtr(x), x);
  }

  public static void arb_get_fmpz_mid_rad_10exp(SWIGTYPE_p_long mid, SWIGTYPE_p_long rad, SWIGTYPE_p_long exp, arb_struct x, int n) {
    arblibJNI.arb_get_fmpz_mid_rad_10exp(SWIGTYPE_p_long.getCPtr(mid), SWIGTYPE_p_long.getCPtr(rad), SWIGTYPE_p_long.getCPtr(exp), arb_struct.getCPtr(x), x, n);
  }

  public static void arb_floor(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_floor(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_ceil(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_ceil(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_set_interval_arf(arb_struct x, arf_struct a, arf_struct b, int prec) {
    arblibJNI.arb_set_interval_arf(arb_struct.getCPtr(x), x, arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b, prec);
  }

  public static void arb_set_interval_mpfr(arb_struct x, __mpfr_struct a, __mpfr_struct b, int prec) {
    arblibJNI.arb_set_interval_mpfr(arb_struct.getCPtr(x), x, __mpfr_struct.getCPtr(a), a, __mpfr_struct.getCPtr(b), b, prec);
  }

  public static void arb_get_interval_arf(arf_struct a, arf_struct b, arb_struct x, int prec) {
    arblibJNI.arb_get_interval_arf(arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_get_interval_mpfr(__mpfr_struct a, __mpfr_struct b, arb_struct x) {
    arblibJNI.arb_get_interval_mpfr(__mpfr_struct.getCPtr(a), a, __mpfr_struct.getCPtr(b), b, arb_struct.getCPtr(x), x);
  }

  public static void arb_set_interval_mag(arb_struct res, mag_struct a, mag_struct b, int prec) {
    arblibJNI.arb_set_interval_mag(arb_struct.getCPtr(res), res, mag_struct.getCPtr(a), a, mag_struct.getCPtr(b), b, prec);
  }

  public static void arb_set_interval_neg_pos_mag(arb_struct res, mag_struct a, mag_struct b, int prec) {
    arblibJNI.arb_set_interval_neg_pos_mag(arb_struct.getCPtr(res), res, mag_struct.getCPtr(a), a, mag_struct.getCPtr(b), b, prec);
  }

  public static void arb_union(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_union(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static int arb_intersection(arb_struct z, arb_struct x, arb_struct y, int prec) {
    return arblibJNI.arb_intersection(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_get_rand_fmpq(fmpq q, flint_rand_s state, arb_struct x, int bits) {
    arblibJNI.arb_get_rand_fmpq(fmpq.getCPtr(q), q, flint_rand_s.getCPtr(state), state, arb_struct.getCPtr(x), x, bits);
  }

  public static void arb_min(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_min(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_max(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_max(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static int arb_can_round_arf(arb_struct x, int prec, int rnd) {
    return arblibJNI.arb_can_round_arf(arb_struct.getCPtr(x), x, prec, rnd);
  }

  public static int arb_can_round_mpfr(arb_struct x, int prec, mpfr_rnd_t rnd) {
    return arblibJNI.arb_can_round_mpfr(arb_struct.getCPtr(x), x, prec, rnd.swigValue());
  }

  public static void arb_add(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_add(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_add_arf(arb_struct z, arb_struct x, arf_struct y, int prec) {
    arblibJNI.arb_add_arf(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec);
  }

  public static void arb_add_ui(arb_struct z, arb_struct x, long y, int prec) {
    arblibJNI.arb_add_ui(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_add_si(arb_struct z, arb_struct x, int y, int prec) {
    arblibJNI.arb_add_si(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_add_fmpz(arb_struct z, arb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.arb_add_fmpz(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void arb_add_fmpz_2exp(arb_struct z, arb_struct x, SWIGTYPE_p_long man, SWIGTYPE_p_long exp, int prec) {
    arblibJNI.arb_add_fmpz_2exp(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(man), SWIGTYPE_p_long.getCPtr(exp), prec);
  }

  public static void arb_sub(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_sub(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_sub_arf(arb_struct z, arb_struct x, arf_struct y, int prec) {
    arblibJNI.arb_sub_arf(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec);
  }

  public static void arb_sub_ui(arb_struct z, arb_struct x, long y, int prec) {
    arblibJNI.arb_sub_ui(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_sub_si(arb_struct z, arb_struct x, int y, int prec) {
    arblibJNI.arb_sub_si(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_sub_fmpz(arb_struct z, arb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.arb_sub_fmpz(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void arb_mul(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_mul(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_mul_arf(arb_struct z, arb_struct x, arf_struct y, int prec) {
    arblibJNI.arb_mul_arf(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec);
  }

  public static void arb_mul_si(arb_struct z, arb_struct x, int y, int prec) {
    arblibJNI.arb_mul_si(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_mul_ui(arb_struct z, arb_struct x, long y, int prec) {
    arblibJNI.arb_mul_ui(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_mul_fmpz(arb_struct z, arb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.arb_mul_fmpz(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void arb_addmul(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_addmul(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_addmul_arf(arb_struct z, arb_struct x, arf_struct y, int prec) {
    arblibJNI.arb_addmul_arf(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec);
  }

  public static void arb_addmul_si(arb_struct z, arb_struct x, int y, int prec) {
    arblibJNI.arb_addmul_si(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_addmul_ui(arb_struct z, arb_struct x, long y, int prec) {
    arblibJNI.arb_addmul_ui(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_addmul_fmpz(arb_struct z, arb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.arb_addmul_fmpz(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void arb_submul(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_submul(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_submul_arf(arb_struct z, arb_struct x, arf_struct y, int prec) {
    arblibJNI.arb_submul_arf(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec);
  }

  public static void arb_submul_si(arb_struct z, arb_struct x, int y, int prec) {
    arblibJNI.arb_submul_si(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_submul_ui(arb_struct z, arb_struct x, long y, int prec) {
    arblibJNI.arb_submul_ui(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_submul_fmpz(arb_struct z, arb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.arb_submul_fmpz(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void arb_dot_simple(arb_struct res, arb_struct initial, int subtract, arb_struct x, int xstep, arb_struct y, int ystep, int len, int prec) {
    arblibJNI.arb_dot_simple(arb_struct.getCPtr(res), res, arb_struct.getCPtr(initial), initial, subtract, arb_struct.getCPtr(x), x, xstep, arb_struct.getCPtr(y), y, ystep, len, prec);
  }

  public static void arb_dot_precise(arb_struct res, arb_struct initial, int subtract, arb_struct x, int xstep, arb_struct y, int ystep, int len, int prec) {
    arblibJNI.arb_dot_precise(arb_struct.getCPtr(res), res, arb_struct.getCPtr(initial), initial, subtract, arb_struct.getCPtr(x), x, xstep, arb_struct.getCPtr(y), y, ystep, len, prec);
  }

  public static void arb_dot(arb_struct res, arb_struct initial, int subtract, arb_struct x, int xstep, arb_struct y, int ystep, int len, int prec) {
    arblibJNI.arb_dot(arb_struct.getCPtr(res), res, arb_struct.getCPtr(initial), initial, subtract, arb_struct.getCPtr(x), x, xstep, arb_struct.getCPtr(y), y, ystep, len, prec);
  }

  public static void arb_approx_dot(arb_struct res, arb_struct initial, int subtract, arb_struct x, int xstep, arb_struct y, int ystep, int len, int prec) {
    arblibJNI.arb_approx_dot(arb_struct.getCPtr(res), res, arb_struct.getCPtr(initial), initial, subtract, arb_struct.getCPtr(x), x, xstep, arb_struct.getCPtr(y), y, ystep, len, prec);
  }

  public static void arb_div(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_div(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_div_arf(arb_struct z, arb_struct x, arf_struct y, int prec) {
    arblibJNI.arb_div_arf(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arf_struct.getCPtr(y), y, prec);
  }

  public static void arb_div_si(arb_struct z, arb_struct x, int y, int prec) {
    arblibJNI.arb_div_si(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_div_ui(arb_struct z, arb_struct x, long y, int prec) {
    arblibJNI.arb_div_ui(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, y, prec);
  }

  public static void arb_div_fmpz(arb_struct z, arb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.arb_div_fmpz(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void arb_fmpz_div_fmpz(arb_struct z, SWIGTYPE_p_long x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.arb_fmpz_div_fmpz(arb_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void arb_ui_div(arb_struct z, long x, arb_struct y, int prec) {
    arblibJNI.arb_ui_div(arb_struct.getCPtr(z), z, x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_inv(arb_struct y, arb_struct x, int prec) {
    arblibJNI.arb_inv(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_set_fmpq(arb_struct y, fmpq x, int prec) {
    arblibJNI.arb_set_fmpq(arb_struct.getCPtr(y), y, fmpq.getCPtr(x), x, prec);
  }

  public static void arb_sqrt(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_sqrt(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_sqrt_arf(arb_struct z, arf_struct x, int prec) {
    arblibJNI.arb_sqrt_arf(arb_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, prec);
  }

  public static void arb_sqrt_fmpz(arb_struct z, SWIGTYPE_p_long x, int prec) {
    arblibJNI.arb_sqrt_fmpz(arb_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), prec);
  }

  public static void arb_sqrt_ui(arb_struct z, long x, int prec) {
    arblibJNI.arb_sqrt_ui(arb_struct.getCPtr(z), z, x, prec);
  }

  public static void arb_sqrtpos(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_sqrtpos(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_hypot(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_hypot(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_rsqrt(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_rsqrt(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_rsqrt_ui(arb_struct z, long x, int prec) {
    arblibJNI.arb_rsqrt_ui(arb_struct.getCPtr(z), z, x, prec);
  }

  public static void arb_sqrt1pm1(arb_struct r, arb_struct z, int prec) {
    arblibJNI.arb_sqrt1pm1(arb_struct.getCPtr(r), r, arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_pow_fmpz_binexp(arb_struct y, arb_struct b, SWIGTYPE_p_long e, int prec) {
    arblibJNI.arb_pow_fmpz_binexp(arb_struct.getCPtr(y), y, arb_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(e), prec);
  }

  public static void arb_pow_fmpz(arb_struct y, arb_struct b, SWIGTYPE_p_long e, int prec) {
    arblibJNI.arb_pow_fmpz(arb_struct.getCPtr(y), y, arb_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(e), prec);
  }

  public static void arb_pow_ui(arb_struct y, arb_struct b, long e, int prec) {
    arblibJNI.arb_pow_ui(arb_struct.getCPtr(y), y, arb_struct.getCPtr(b), b, e, prec);
  }

  public static void arb_ui_pow_ui(arb_struct y, long b, long e, int prec) {
    arblibJNI.arb_ui_pow_ui(arb_struct.getCPtr(y), y, b, e, prec);
  }

  public static void arb_si_pow_ui(arb_struct y, int b, long e, int prec) {
    arblibJNI.arb_si_pow_ui(arb_struct.getCPtr(y), y, b, e, prec);
  }

  public static void arb_pow_fmpq(arb_struct y, arb_struct x, fmpq a, int prec) {
    arblibJNI.arb_pow_fmpq(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, fmpq.getCPtr(a), a, prec);
  }

  public static void arb_div_2expm1_ui(arb_struct z, arb_struct x, long n, int prec) {
    arblibJNI.arb_div_2expm1_ui(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, n, prec);
  }

  public static void arb_pow(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_pow(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_root_ui(arb_struct z, arb_struct x, long k, int prec) {
    arblibJNI.arb_root_ui(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, k, prec);
  }

  public static void arb_root(arb_struct z, arb_struct x, long k, int prec) {
    arblibJNI.arb_root(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, k, prec);
  }

  public static void arb_log(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_log(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_log_arf(arb_struct z, arf_struct x, int prec) {
    arblibJNI.arb_log_arf(arb_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, prec);
  }

  public static void arb_log_ui(arb_struct z, long x, int prec) {
    arblibJNI.arb_log_ui(arb_struct.getCPtr(z), z, x, prec);
  }

  public static void arb_log_fmpz(arb_struct z, SWIGTYPE_p_long x, int prec) {
    arblibJNI.arb_log_fmpz(arb_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), prec);
  }

  public static void arb_log1p(arb_struct r, arb_struct z, int prec) {
    arblibJNI.arb_log1p(arb_struct.getCPtr(r), r, arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_log_base_ui(arb_struct res, arb_struct x, long b, int prec) {
    arblibJNI.arb_log_base_ui(arb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x, b, prec);
  }

  public static void arb_log_hypot(arb_struct res, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_log_hypot(arb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_exp(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_exp(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_expm1(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_expm1(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_exp_invexp(arb_struct z, arb_struct w, arb_struct x, int prec) {
    arblibJNI.arb_exp_invexp(arb_struct.getCPtr(z), z, arb_struct.getCPtr(w), w, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_sin(arb_struct s, arb_struct x, int prec) {
    arblibJNI.arb_sin(arb_struct.getCPtr(s), s, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_cos(arb_struct c, arb_struct x, int prec) {
    arblibJNI.arb_cos(arb_struct.getCPtr(c), c, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_sin_cos(arb_struct s, arb_struct c, arb_struct x, int prec) {
    arblibJNI.arb_sin_cos(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_sin_pi(arb_struct s, arb_struct x, int prec) {
    arblibJNI.arb_sin_pi(arb_struct.getCPtr(s), s, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_cos_pi(arb_struct c, arb_struct x, int prec) {
    arblibJNI.arb_cos_pi(arb_struct.getCPtr(c), c, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_sin_cos_pi(arb_struct s, arb_struct c, arb_struct x, int prec) {
    arblibJNI.arb_sin_cos_pi(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_tan(arb_struct y, arb_struct x, int prec) {
    arblibJNI.arb_tan(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_cot(arb_struct y, arb_struct x, int prec) {
    arblibJNI.arb_cot(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_tan_pi(arb_struct y, arb_struct x, int prec) {
    arblibJNI.arb_tan_pi(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_cot_pi(arb_struct y, arb_struct x, int prec) {
    arblibJNI.arb_cot_pi(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, prec);
  }

  public static void _arb_sin_pi_fmpq_algebraic(arb_struct s, long p, long q, int prec) {
    arblibJNI._arb_sin_pi_fmpq_algebraic(arb_struct.getCPtr(s), s, p, q, prec);
  }

  public static void _arb_cos_pi_fmpq_algebraic(arb_struct c, long p, long q, int prec) {
    arblibJNI._arb_cos_pi_fmpq_algebraic(arb_struct.getCPtr(c), c, p, q, prec);
  }

  public static void _arb_sin_cos_pi_fmpq_algebraic(arb_struct s, arb_struct c, long p, long q, int prec) {
    arblibJNI._arb_sin_cos_pi_fmpq_algebraic(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, p, q, prec);
  }

  public static void arb_sin_cos_pi_fmpq(arb_struct s, arb_struct c, fmpq x, int prec) {
    arblibJNI.arb_sin_cos_pi_fmpq(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, fmpq.getCPtr(x), x, prec);
  }

  public static void arb_sin_pi_fmpq(arb_struct s, fmpq x, int prec) {
    arblibJNI.arb_sin_pi_fmpq(arb_struct.getCPtr(s), s, fmpq.getCPtr(x), x, prec);
  }

  public static void arb_cos_pi_fmpq(arb_struct c, fmpq x, int prec) {
    arblibJNI.arb_cos_pi_fmpq(arb_struct.getCPtr(c), c, fmpq.getCPtr(x), x, prec);
  }

  public static void arb_sinc(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_sinc(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_sinc_pi(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_sinc_pi(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_sinh(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_sinh(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_cosh(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_cosh(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_sinh_cosh(arb_struct s, arb_struct c, arb_struct x, int prec) {
    arblibJNI.arb_sinh_cosh(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_tanh(arb_struct y, arb_struct x, int prec) {
    arblibJNI.arb_tanh(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_coth(arb_struct y, arb_struct x, int prec) {
    arblibJNI.arb_coth(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_atan_arf(arb_struct z, arf_struct x, int prec) {
    arblibJNI.arb_atan_arf(arb_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, prec);
  }

  public static void arb_atan(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_atan(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_atan2(arb_struct z, arb_struct b, arb_struct a, int prec) {
    arblibJNI.arb_atan2(arb_struct.getCPtr(z), z, arb_struct.getCPtr(b), b, arb_struct.getCPtr(a), a, prec);
  }

  public static void arb_asin(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_asin(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_acos(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_acos(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_atanh(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_atanh(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_asinh(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_asinh(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_acosh(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_acosh(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_sec(arb_struct res, arb_struct x, int prec) {
    arblibJNI.arb_sec(arb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_csc(arb_struct res, arb_struct x, int prec) {
    arblibJNI.arb_csc(arb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_sech(arb_struct res, arb_struct x, int prec) {
    arblibJNI.arb_sech(arb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_csch(arb_struct res, arb_struct x, int prec) {
    arblibJNI.arb_csch(arb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_fac_ui(arb_struct z, long n, int prec) {
    arblibJNI.arb_fac_ui(arb_struct.getCPtr(z), z, n, prec);
  }

  public static void arb_doublefac_ui(arb_struct z, long n, int prec) {
    arblibJNI.arb_doublefac_ui(arb_struct.getCPtr(z), z, n, prec);
  }

  public static void arb_bin_ui(arb_struct z, arb_struct n, long k, int prec) {
    arblibJNI.arb_bin_ui(arb_struct.getCPtr(z), z, arb_struct.getCPtr(n), n, k, prec);
  }

  public static void arb_bin_uiui(arb_struct z, long n, long k, int prec) {
    arblibJNI.arb_bin_uiui(arb_struct.getCPtr(z), z, n, k, prec);
  }

  public static void arb_fib_fmpz(arb_struct z, SWIGTYPE_p_long n, int prec) {
    arblibJNI.arb_fib_fmpz(arb_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(n), prec);
  }

  public static void arb_fib_ui(arb_struct z, long n, int prec) {
    arblibJNI.arb_fib_ui(arb_struct.getCPtr(z), z, n, prec);
  }

  public static void arb_const_pi(arb_struct z, int prec) {
    arblibJNI.arb_const_pi(arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_const_sqrt_pi(arb_struct z, int prec) {
    arblibJNI.arb_const_sqrt_pi(arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_const_log_sqrt2pi(arb_struct z, int prec) {
    arblibJNI.arb_const_log_sqrt2pi(arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_const_log2(arb_struct z, int prec) {
    arblibJNI.arb_const_log2(arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_const_log10(arb_struct z, int prec) {
    arblibJNI.arb_const_log10(arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_const_euler(arb_struct z, int prec) {
    arblibJNI.arb_const_euler(arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_const_catalan(arb_struct z, int prec) {
    arblibJNI.arb_const_catalan(arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_const_e(arb_struct z, int prec) {
    arblibJNI.arb_const_e(arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_const_khinchin(arb_struct z, int prec) {
    arblibJNI.arb_const_khinchin(arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_const_glaisher(arb_struct z, int prec) {
    arblibJNI.arb_const_glaisher(arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_agm(arb_struct z, arb_struct x, arb_struct y, int prec) {
    arblibJNI.arb_agm(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void arb_lgamma(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_lgamma(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_rgamma(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_rgamma(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_gamma(arb_struct z, arb_struct x, int prec) {
    arblibJNI.arb_gamma(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_gamma_fmpq(arb_struct z, fmpq x, int prec) {
    arblibJNI.arb_gamma_fmpq(arb_struct.getCPtr(z), z, fmpq.getCPtr(x), x, prec);
  }

  public static void arb_gamma_fmpz(arb_struct z, SWIGTYPE_p_long x, int prec) {
    arblibJNI.arb_gamma_fmpz(arb_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), prec);
  }

  public static void arb_digamma(arb_struct y, arb_struct x, int prec) {
    arblibJNI.arb_digamma(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_zeta(arb_struct z, arb_struct s, int prec) {
    arblibJNI.arb_zeta(arb_struct.getCPtr(z), z, arb_struct.getCPtr(s), s, prec);
  }

  public static void arb_hurwitz_zeta(arb_struct z, arb_struct s, arb_struct a, int prec) {
    arblibJNI.arb_hurwitz_zeta(arb_struct.getCPtr(z), z, arb_struct.getCPtr(s), s, arb_struct.getCPtr(a), a, prec);
  }

  public static void arb_rising_ui_bs(arb_struct y, arb_struct x, long n, int prec) {
    arblibJNI.arb_rising_ui_bs(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, n, prec);
  }

  public static void arb_rising_ui_rs(arb_struct y, arb_struct x, long n, long m, int prec) {
    arblibJNI.arb_rising_ui_rs(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, n, m, prec);
  }

  public static void arb_rising_ui_rec(arb_struct y, arb_struct x, long n, int prec) {
    arblibJNI.arb_rising_ui_rec(arb_struct.getCPtr(y), y, arb_struct.getCPtr(x), x, n, prec);
  }

  public static void arb_rising_ui(arb_struct z, arb_struct x, long n, int prec) {
    arblibJNI.arb_rising_ui(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, n, prec);
  }

  public static void arb_rising_fmpq_ui(arb_struct y, fmpq x, long n, int prec) {
    arblibJNI.arb_rising_fmpq_ui(arb_struct.getCPtr(y), y, fmpq.getCPtr(x), x, n, prec);
  }

  public static void arb_rising(arb_struct z, arb_struct x, arb_struct n, int prec) {
    arblibJNI.arb_rising(arb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(n), n, prec);
  }

  public static void arb_rising2_ui_rs(arb_struct u, arb_struct v, arb_struct x, long n, long m, int prec) {
    arblibJNI.arb_rising2_ui_rs(arb_struct.getCPtr(u), u, arb_struct.getCPtr(v), v, arb_struct.getCPtr(x), x, n, m, prec);
  }

  public static void arb_rising2_ui_bs(arb_struct u, arb_struct v, arb_struct x, long n, int prec) {
    arblibJNI.arb_rising2_ui_bs(arb_struct.getCPtr(u), u, arb_struct.getCPtr(v), v, arb_struct.getCPtr(x), x, n, prec);
  }

  public static void arb_rising2_ui(arb_struct u, arb_struct v, arb_struct x, long n, int prec) {
    arblibJNI.arb_rising2_ui(arb_struct.getCPtr(u), u, arb_struct.getCPtr(v), v, arb_struct.getCPtr(x), x, n, prec);
  }

  public static void arb_log_ui_from_prev(arb_struct s, long k, arb_struct log_prev, long prev, int prec) {
    arblibJNI.arb_log_ui_from_prev(arb_struct.getCPtr(s), s, k, arb_struct.getCPtr(log_prev), log_prev, prev, prec);
  }

  public static void arb_const_apery(arb_struct s, int prec) {
    arblibJNI.arb_const_apery(arb_struct.getCPtr(s), s, prec);
  }

  public static void arb_zeta_ui_asymp(arb_struct x, long s, int prec) {
    arblibJNI.arb_zeta_ui_asymp(arb_struct.getCPtr(x), x, s, prec);
  }

  public static void arb_zeta_ui_borwein_bsplit(arb_struct x, long s, int prec) {
    arblibJNI.arb_zeta_ui_borwein_bsplit(arb_struct.getCPtr(x), x, s, prec);
  }

  public static void arb_zeta_ui_euler_product(arb_struct z, long s, int prec) {
    arblibJNI.arb_zeta_ui_euler_product(arb_struct.getCPtr(z), z, s, prec);
  }

  public static void arb_zeta_ui_bernoulli(arb_struct x, long n, int prec) {
    arblibJNI.arb_zeta_ui_bernoulli(arb_struct.getCPtr(x), x, n, prec);
  }

  public static void arb_zeta_ui_vec_borwein(arb_struct z, long start, int num, long step, int prec) {
    arblibJNI.arb_zeta_ui_vec_borwein(arb_struct.getCPtr(z), z, start, num, step, prec);
  }

  public static void arb_zeta_ui(arb_struct x, long n, int prec) {
    arblibJNI.arb_zeta_ui(arb_struct.getCPtr(x), x, n, prec);
  }

  public static void arb_zeta_ui_vec_even(arb_struct x, long start, int num, int prec) {
    arblibJNI.arb_zeta_ui_vec_even(arb_struct.getCPtr(x), x, start, num, prec);
  }

  public static void arb_zeta_ui_vec_odd(arb_struct x, long start, int num, int prec) {
    arblibJNI.arb_zeta_ui_vec_odd(arb_struct.getCPtr(x), x, start, num, prec);
  }

  public static void arb_zeta_ui_vec(arb_struct x, long start, int num, int prec) {
    arblibJNI.arb_zeta_ui_vec(arb_struct.getCPtr(x), x, start, num, prec);
  }

  public static void arb_bernoulli_ui(arb_struct b, long n, int prec) {
    arblibJNI.arb_bernoulli_ui(arb_struct.getCPtr(b), b, n, prec);
  }

  public static void arb_bernoulli_ui_zeta(arb_struct b, long n, int prec) {
    arblibJNI.arb_bernoulli_ui_zeta(arb_struct.getCPtr(b), b, n, prec);
  }

  public static void arb_bernoulli_fmpz(arb_struct b, SWIGTYPE_p_long n, int prec) {
    arblibJNI.arb_bernoulli_fmpz(arb_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(n), prec);
  }

  public static void arb_bernoulli_poly_ui(arb_struct res, long n, arb_struct x, int prec) {
    arblibJNI.arb_bernoulli_poly_ui(arb_struct.getCPtr(res), res, n, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_polylog(arb_struct w, arb_struct s, arb_struct z, int prec) {
    arblibJNI.arb_polylog(arb_struct.getCPtr(w), w, arb_struct.getCPtr(s), s, arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_polylog_si(arb_struct w, int s, arb_struct z, int prec) {
    arblibJNI.arb_polylog_si(arb_struct.getCPtr(w), w, s, arb_struct.getCPtr(z), z, prec);
  }

  public static void arb_chebyshev_t_ui(arb_struct a, long n, arb_struct x, int prec) {
    arblibJNI.arb_chebyshev_t_ui(arb_struct.getCPtr(a), a, n, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_chebyshev_t2_ui(arb_struct a, arb_struct b, long n, arb_struct x, int prec) {
    arblibJNI.arb_chebyshev_t2_ui(arb_struct.getCPtr(a), a, arb_struct.getCPtr(b), b, n, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_chebyshev_u_ui(arb_struct a, long n, arb_struct x, int prec) {
    arblibJNI.arb_chebyshev_u_ui(arb_struct.getCPtr(a), a, n, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_chebyshev_u2_ui(arb_struct a, arb_struct b, long n, arb_struct x, int prec) {
    arblibJNI.arb_chebyshev_u2_ui(arb_struct.getCPtr(a), a, arb_struct.getCPtr(b), b, n, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_power_sum_vec(arb_struct res, arb_struct a, arb_struct b, int len, int prec) {
    arblibJNI.arb_power_sum_vec(arb_struct.getCPtr(res), res, arb_struct.getCPtr(a), a, arb_struct.getCPtr(b), b, len, prec);
  }

  public static void arb_bell_sum_taylor(arb_struct res, SWIGTYPE_p_long n, SWIGTYPE_p_long a, SWIGTYPE_p_long b, SWIGTYPE_p_long mmag, int prec) {
    arblibJNI.arb_bell_sum_taylor(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b), SWIGTYPE_p_long.getCPtr(mmag), prec);
  }

  public static void arb_bell_sum_bsplit(arb_struct res, SWIGTYPE_p_long n, SWIGTYPE_p_long a, SWIGTYPE_p_long b, SWIGTYPE_p_long mmag, int prec) {
    arblibJNI.arb_bell_sum_bsplit(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b), SWIGTYPE_p_long.getCPtr(mmag), prec);
  }

  public static void arb_bell_fmpz(arb_struct res, SWIGTYPE_p_long n, int prec) {
    arblibJNI.arb_bell_fmpz(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), prec);
  }

  public static void arb_bell_ui(arb_struct res, long n, int prec) {
    arblibJNI.arb_bell_ui(arb_struct.getCPtr(res), res, n, prec);
  }

  public static void arb_euler_number_fmpz(arb_struct res, SWIGTYPE_p_long n, int prec) {
    arblibJNI.arb_euler_number_fmpz(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), prec);
  }

  public static void arb_euler_number_ui(arb_struct res, long n, int prec) {
    arblibJNI.arb_euler_number_ui(arb_struct.getCPtr(res), res, n, prec);
  }

  public static void arb_partitions_fmpz(arb_struct res, SWIGTYPE_p_long n, int prec) {
    arblibJNI.arb_partitions_fmpz(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), prec);
  }

  public static void arb_partitions_ui(arb_struct res, long n, int prec) {
    arblibJNI.arb_partitions_ui(arb_struct.getCPtr(res), res, n, prec);
  }

  public static void arb_lambertw(arb_struct res, arb_struct x, int flags, int prec) {
    arblibJNI.arb_lambertw(arb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x, flags, prec);
  }

  public static void arb_sqr(arb_struct res, arb_struct val, int prec) {
    arblibJNI.arb_sqr(arb_struct.getCPtr(res), res, arb_struct.getCPtr(val), val, prec);
  }

  public static arb_struct _arb_vec_entry_ptr(arb_struct vec, int i) {
    long cPtr = arblibJNI._arb_vec_entry_ptr(arb_struct.getCPtr(vec), vec, i);
    return (cPtr == 0) ? null : new arb_struct(cPtr, false);
  }

  public static void _arb_vec_zero(arb_struct A, int n) {
    arblibJNI._arb_vec_zero(arb_struct.getCPtr(A), A, n);
  }

  public static int _arb_vec_is_zero(arb_struct vec, int len) {
    return arblibJNI._arb_vec_is_zero(arb_struct.getCPtr(vec), vec, len);
  }

  public static int _arb_vec_is_finite(arb_struct x, int len) {
    return arblibJNI._arb_vec_is_finite(arb_struct.getCPtr(x), x, len);
  }

  public static void _arb_vec_set(arb_struct res, arb_struct vec, int len) {
    arblibJNI._arb_vec_set(arb_struct.getCPtr(res), res, arb_struct.getCPtr(vec), vec, len);
  }

  public static void _arb_vec_set_round(arb_struct res, arb_struct vec, int len, int prec) {
    arblibJNI._arb_vec_set_round(arb_struct.getCPtr(res), res, arb_struct.getCPtr(vec), vec, len, prec);
  }

  public static void _arb_vec_swap(arb_struct res, arb_struct vec, int len) {
    arblibJNI._arb_vec_swap(arb_struct.getCPtr(res), res, arb_struct.getCPtr(vec), vec, len);
  }

  public static void _arb_vec_neg(arb_struct B, arb_struct A, int n) {
    arblibJNI._arb_vec_neg(arb_struct.getCPtr(B), B, arb_struct.getCPtr(A), A, n);
  }

  public static void _arb_vec_sub(arb_struct C, arb_struct A, arb_struct B, int n, int prec) {
    arblibJNI._arb_vec_sub(arb_struct.getCPtr(C), C, arb_struct.getCPtr(A), A, arb_struct.getCPtr(B), B, n, prec);
  }

  public static void _arb_vec_add(arb_struct C, arb_struct A, arb_struct B, int n, int prec) {
    arblibJNI._arb_vec_add(arb_struct.getCPtr(C), C, arb_struct.getCPtr(A), A, arb_struct.getCPtr(B), B, n, prec);
  }

  public static void _arb_vec_scalar_mul(arb_struct res, arb_struct vec, int len, arb_struct c, int prec) {
    arblibJNI._arb_vec_scalar_mul(arb_struct.getCPtr(res), res, arb_struct.getCPtr(vec), vec, len, arb_struct.getCPtr(c), c, prec);
  }

  public static void _arb_vec_scalar_div(arb_struct res, arb_struct vec, int len, arb_struct c, int prec) {
    arblibJNI._arb_vec_scalar_div(arb_struct.getCPtr(res), res, arb_struct.getCPtr(vec), vec, len, arb_struct.getCPtr(c), c, prec);
  }

  public static void _arb_vec_scalar_mul_fmpz(arb_struct res, arb_struct vec, int len, SWIGTYPE_p_long c, int prec) {
    arblibJNI._arb_vec_scalar_mul_fmpz(arb_struct.getCPtr(res), res, arb_struct.getCPtr(vec), vec, len, SWIGTYPE_p_long.getCPtr(c), prec);
  }

  public static void _arb_vec_scalar_mul_2exp_si(arb_struct res, arb_struct src, int len, int c) {
    arblibJNI._arb_vec_scalar_mul_2exp_si(arb_struct.getCPtr(res), res, arb_struct.getCPtr(src), src, len, c);
  }

  public static void _arb_vec_scalar_addmul(arb_struct res, arb_struct vec, int len, arb_struct c, int prec) {
    arblibJNI._arb_vec_scalar_addmul(arb_struct.getCPtr(res), res, arb_struct.getCPtr(vec), vec, len, arb_struct.getCPtr(c), c, prec);
  }

  public static void _arb_vec_get_mag(mag_struct bound, arb_struct vec, int len) {
    arblibJNI._arb_vec_get_mag(mag_struct.getCPtr(bound), bound, arb_struct.getCPtr(vec), vec, len);
  }

  public static int _arb_vec_bits(arb_struct x, int len) {
    return arblibJNI._arb_vec_bits(arb_struct.getCPtr(x), x, len);
  }

  public static void _arb_vec_set_powers(arb_struct xs, arb_struct x, int len, int prec) {
    arblibJNI._arb_vec_set_powers(arb_struct.getCPtr(xs), xs, arb_struct.getCPtr(x), x, len, prec);
  }

  public static void _arb_vec_add_error_arf_vec(arb_struct res, arf_struct err, int len) {
    arblibJNI._arb_vec_add_error_arf_vec(arb_struct.getCPtr(res), res, arf_struct.getCPtr(err), err, len);
  }

  public static void _arb_vec_add_error_mag_vec(arb_struct res, mag_struct err, int len) {
    arblibJNI._arb_vec_add_error_mag_vec(arb_struct.getCPtr(res), res, mag_struct.getCPtr(err), err, len);
  }

  public static void _arb_vec_indeterminate(arb_struct vec, int len) {
    arblibJNI._arb_vec_indeterminate(arb_struct.getCPtr(vec), vec, len);
  }

  public static void _arb_vec_trim(arb_struct res, arb_struct vec, int len) {
    arblibJNI._arb_vec_trim(arb_struct.getCPtr(res), res, arb_struct.getCPtr(vec), vec, len);
  }

  public static int _arb_vec_get_unique_fmpz_vec(SWIGTYPE_p_long res, arb_struct vec, int len) {
    return arblibJNI._arb_vec_get_unique_fmpz_vec(SWIGTYPE_p_long.getCPtr(res), arb_struct.getCPtr(vec), vec, len);
  }

  public static SWIGTYPE_p_a__512_64___unsigned_long getArb_atan_tab1() {
    long cPtr = arblibJNI.arb_atan_tab1_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__512_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_a__4608_64___unsigned_long getArb_atan_tab21() {
    long cPtr = arblibJNI.arb_atan_tab21_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__4608_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_a__4608_64___unsigned_long getArb_atan_tab22() {
    long cPtr = arblibJNI.arb_atan_tab22_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__4608_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_long getArb_atan_pi2_minus_one() {
    long cPtr = arblibJNI.arb_atan_pi2_minus_one_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static void _arb_atan_taylor_naive(SWIGTYPE_p_unsigned_long y, SWIGTYPE_p_unsigned_long error, SWIGTYPE_p_unsigned_long x, int xn, long N, int alternating) {
    arblibJNI._arb_atan_taylor_naive(SWIGTYPE_p_unsigned_long.getCPtr(y), SWIGTYPE_p_unsigned_long.getCPtr(error), SWIGTYPE_p_unsigned_long.getCPtr(x), xn, N, alternating);
  }

  public static void _arb_atan_taylor_rs(SWIGTYPE_p_unsigned_long y, SWIGTYPE_p_unsigned_long error, SWIGTYPE_p_unsigned_long x, int xn, long N, int alternating) {
    arblibJNI._arb_atan_taylor_rs(SWIGTYPE_p_unsigned_long.getCPtr(y), SWIGTYPE_p_unsigned_long.getCPtr(error), SWIGTYPE_p_unsigned_long.getCPtr(x), xn, N, alternating);
  }

  public static SWIGTYPE_p_a__512_64___unsigned_long getArb_log_tab11() {
    long cPtr = arblibJNI.arb_log_tab11_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__512_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_a__512_64___unsigned_long getArb_log_tab12() {
    long cPtr = arblibJNI.arb_log_tab12_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__512_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_a__4608_64___unsigned_long getArb_log_tab21() {
    long cPtr = arblibJNI.arb_log_tab21_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__4608_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_a__4608_64___unsigned_long getArb_log_tab22() {
    long cPtr = arblibJNI.arb_log_tab22_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__4608_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_long getArb_log_log2_tab() {
    long cPtr = arblibJNI.arb_log_log2_tab_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_a__512_64___unsigned_long getArb_exp_tab1() {
    long cPtr = arblibJNI.arb_exp_tab1_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__512_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_a__4608_64___unsigned_long getArb_exp_tab21() {
    long cPtr = arblibJNI.arb_exp_tab21_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__4608_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_a__4608_64___unsigned_long getArb_exp_tab22() {
    long cPtr = arblibJNI.arb_exp_tab22_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__4608_64___unsigned_long(cPtr, false);
  }

  public static void _arb_exp_taylor_naive(SWIGTYPE_p_unsigned_long y, SWIGTYPE_p_unsigned_long error, SWIGTYPE_p_unsigned_long x, int xn, long N) {
    arblibJNI._arb_exp_taylor_naive(SWIGTYPE_p_unsigned_long.getCPtr(y), SWIGTYPE_p_unsigned_long.getCPtr(error), SWIGTYPE_p_unsigned_long.getCPtr(x), xn, N);
  }

  public static void _arb_exp_taylor_rs(SWIGTYPE_p_unsigned_long y, SWIGTYPE_p_unsigned_long error, SWIGTYPE_p_unsigned_long x, int xn, long N) {
    arblibJNI._arb_exp_taylor_rs(SWIGTYPE_p_unsigned_long.getCPtr(y), SWIGTYPE_p_unsigned_long.getCPtr(error), SWIGTYPE_p_unsigned_long.getCPtr(x), xn, N);
  }

  public static void arb_exp_arf_bb(arb_struct z, arf_struct x, int prec, int minus_one) {
    arblibJNI.arb_exp_arf_bb(arb_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, prec, minus_one);
  }

  public static void arb_exp_arf_rs_generic(arb_struct res, arf_struct x, int prec, int minus_one) {
    arblibJNI.arb_exp_arf_rs_generic(arb_struct.getCPtr(res), res, arf_struct.getCPtr(x), x, prec, minus_one);
  }

  public static int _arb_get_mpn_fixed_mod_log2(SWIGTYPE_p_unsigned_long w, SWIGTYPE_p_long q, SWIGTYPE_p_unsigned_long error, arf_struct x, int wn) {
    return arblibJNI._arb_get_mpn_fixed_mod_log2(SWIGTYPE_p_unsigned_long.getCPtr(w), SWIGTYPE_p_long.getCPtr(q), SWIGTYPE_p_unsigned_long.getCPtr(error), arf_struct.getCPtr(x), x, wn);
  }

  public static int _arb_exp_taylor_bound(int mag, int prec) {
    return arblibJNI._arb_exp_taylor_bound(mag, prec);
  }

  public static void _arb_exp_sum_bs_powtab(SWIGTYPE_p_long T, SWIGTYPE_p_long Q, SWIGTYPE_p_unsigned_long Qexp, SWIGTYPE_p_long x, long r, int N) {
    arblibJNI._arb_exp_sum_bs_powtab(SWIGTYPE_p_long.getCPtr(T), SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(Qexp), SWIGTYPE_p_long.getCPtr(x), r, N);
  }

  public static void _arb_exp_sum_bs_simple(SWIGTYPE_p_long T, SWIGTYPE_p_long Q, SWIGTYPE_p_unsigned_long Qexp, SWIGTYPE_p_long x, long r, int N) {
    arblibJNI._arb_exp_sum_bs_simple(SWIGTYPE_p_long.getCPtr(T), SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(Qexp), SWIGTYPE_p_long.getCPtr(x), r, N);
  }

  public static SWIGTYPE_p_a__512_64___unsigned_long getArb_sin_cos_tab1() {
    long cPtr = arblibJNI.arb_sin_cos_tab1_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__512_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_a__4608_64___unsigned_long getArb_sin_cos_tab21() {
    long cPtr = arblibJNI.arb_sin_cos_tab21_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__4608_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_a__4608_64___unsigned_long getArb_sin_cos_tab22() {
    long cPtr = arblibJNI.arb_sin_cos_tab22_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a__4608_64___unsigned_long(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_long getArb_pi4_tab() {
    long cPtr = arblibJNI.arb_pi4_tab_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static void _arb_sin_cos_taylor_naive(SWIGTYPE_p_unsigned_long ysin, SWIGTYPE_p_unsigned_long ycos, SWIGTYPE_p_unsigned_long error, SWIGTYPE_p_unsigned_long x, int xn, long N) {
    arblibJNI._arb_sin_cos_taylor_naive(SWIGTYPE_p_unsigned_long.getCPtr(ysin), SWIGTYPE_p_unsigned_long.getCPtr(ycos), SWIGTYPE_p_unsigned_long.getCPtr(error), SWIGTYPE_p_unsigned_long.getCPtr(x), xn, N);
  }

  public static void _arb_sin_cos_taylor_rs(SWIGTYPE_p_unsigned_long ysin, SWIGTYPE_p_unsigned_long ycos, SWIGTYPE_p_unsigned_long error, SWIGTYPE_p_unsigned_long x, int xn, long N, int sinonly, int alternating) {
    arblibJNI._arb_sin_cos_taylor_rs(SWIGTYPE_p_unsigned_long.getCPtr(ysin), SWIGTYPE_p_unsigned_long.getCPtr(ycos), SWIGTYPE_p_unsigned_long.getCPtr(error), SWIGTYPE_p_unsigned_long.getCPtr(x), xn, N, sinonly, alternating);
  }

  public static int _arb_get_mpn_fixed_mod_pi4(SWIGTYPE_p_unsigned_long w, SWIGTYPE_p_long q, SWIGTYPE_p_int octant, SWIGTYPE_p_unsigned_long error, arf_struct x, int wn) {
    return arblibJNI._arb_get_mpn_fixed_mod_pi4(SWIGTYPE_p_unsigned_long.getCPtr(w), SWIGTYPE_p_long.getCPtr(q), SWIGTYPE_p_int.getCPtr(octant), SWIGTYPE_p_unsigned_long.getCPtr(error), arf_struct.getCPtr(x), x, wn);
  }

  public static void arb_sin_cos_arf_bb(arb_struct zsin, arb_struct zcos, arf_struct x, int prec) {
    arblibJNI.arb_sin_cos_arf_bb(arb_struct.getCPtr(zsin), zsin, arb_struct.getCPtr(zcos), zcos, arf_struct.getCPtr(x), x, prec);
  }

  public static void arb_sin_cos_arf_rs_generic(arb_struct res_sin, arb_struct res_cos, arf_struct x, int prec) {
    arblibJNI.arb_sin_cos_arf_rs_generic(arb_struct.getCPtr(res_sin), res_sin, arb_struct.getCPtr(res_cos), res_cos, arf_struct.getCPtr(x), x, prec);
  }

  public static void arb_sin_cos_arf_generic(arb_struct res_sin, arb_struct res_cos, arf_struct x, int prec) {
    arblibJNI.arb_sin_cos_arf_generic(arb_struct.getCPtr(res_sin), res_sin, arb_struct.getCPtr(res_cos), res_cos, arf_struct.getCPtr(x), x, prec);
  }

  public static void _arb_sin_cos_wide(arb_struct s, arb_struct c, arf_struct x, mag_struct r, int prec) {
    arblibJNI._arb_sin_cos_wide(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arf_struct.getCPtr(x), x, mag_struct.getCPtr(r), r, prec);
  }

  public static void arb_sin_cos_wide(arb_struct s, arb_struct c, arb_struct x, int prec) {
    arblibJNI.arb_sin_cos_wide(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(x), x, prec);
  }

  public static void _arb_sin_cos_generic(arb_struct s, arb_struct c, arf_struct x, mag_struct xrad, int prec) {
    arblibJNI._arb_sin_cos_generic(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arf_struct.getCPtr(x), x, mag_struct.getCPtr(xrad), xrad, prec);
  }

  public static void arb_sin_cos_generic(arb_struct s, arb_struct c, arb_struct x, int prec) {
    arblibJNI.arb_sin_cos_generic(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(x), x, prec);
  }

  public static long _arb_mpn_leading_zeros(SWIGTYPE_p_unsigned_long d, int n) {
    return arblibJNI._arb_mpn_leading_zeros(SWIGTYPE_p_unsigned_long.getCPtr(d), n);
  }

  public static void _arb_atan_sum_bs_simple(SWIGTYPE_p_long T, SWIGTYPE_p_long Q, SWIGTYPE_p_unsigned_long Qexp, SWIGTYPE_p_long x, long r, int N) {
    arblibJNI._arb_atan_sum_bs_simple(SWIGTYPE_p_long.getCPtr(T), SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(Qexp), SWIGTYPE_p_long.getCPtr(x), r, N);
  }

  public static void _arb_atan_sum_bs_powtab(SWIGTYPE_p_long T, SWIGTYPE_p_long Q, SWIGTYPE_p_unsigned_long Qexp, SWIGTYPE_p_long x, long r, int N) {
    arblibJNI._arb_atan_sum_bs_powtab(SWIGTYPE_p_long.getCPtr(T), SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(Qexp), SWIGTYPE_p_long.getCPtr(x), r, N);
  }

  public static void arb_atan_arf_bb(arb_struct z, arf_struct x, int prec) {
    arblibJNI.arb_atan_arf_bb(arb_struct.getCPtr(z), z, arf_struct.getCPtr(x), x, prec);
  }

  public static int arb_allocated_bytes(arb_struct x) {
    return arblibJNI.arb_allocated_bytes(arb_struct.getCPtr(x), x);
  }

  public static int _arb_vec_allocated_bytes(arb_struct vec, int len) {
    return arblibJNI._arb_vec_allocated_bytes(arb_struct.getCPtr(vec), vec, len);
  }

  public static double _arb_vec_estimate_allocated_bytes(int len, int prec) {
    return arblibJNI._arb_vec_estimate_allocated_bytes(len, prec);
  }

  public static int arb_load_str(arb_struct res, String data) {
    return arblibJNI.arb_load_str(arb_struct.getCPtr(res), res, data);
  }

  public static String arb_dump_str(arb_struct x) {
    return arblibJNI.arb_dump_str(arb_struct.getCPtr(x), x);
  }

  public static int arb_load_file(arb_struct res, _IO_FILE stream) {
    return arblibJNI.arb_load_file(arb_struct.getCPtr(res), res, _IO_FILE.getCPtr(stream), stream);
  }

  public static int arb_dump_file(_IO_FILE stream, arb_struct x) {
    return arblibJNI.arb_dump_file(_IO_FILE.getCPtr(stream), stream, arb_struct.getCPtr(x), x);
  }

  public static void acb_init(acb_struct x) {
    arblibJNI.acb_init(acb_struct.getCPtr(x), x);
  }

  public static void acb_clear(acb_struct x) {
    arblibJNI.acb_clear(acb_struct.getCPtr(x), x);
  }

  public static acb_struct _acb_vec_init(int n) {
    long cPtr = arblibJNI._acb_vec_init(n);
    return (cPtr == 0) ? null : new acb_struct(cPtr, false);
  }

  public static void _acb_vec_clear(acb_struct v, int n) {
    arblibJNI._acb_vec_clear(acb_struct.getCPtr(v), v, n);
  }

  public static arb_struct acb_real_ptr(acb_struct z) {
    long cPtr = arblibJNI.acb_real_ptr(acb_struct.getCPtr(z), z);
    return (cPtr == 0) ? null : new arb_struct(cPtr, false);
  }

  public static arb_struct acb_imag_ptr(acb_struct z) {
    long cPtr = arblibJNI.acb_imag_ptr(acb_struct.getCPtr(z), z);
    return (cPtr == 0) ? null : new arb_struct(cPtr, false);
  }

  public static void acb_get_real(arb_struct re, acb_struct z) {
    arblibJNI.acb_get_real(arb_struct.getCPtr(re), re, acb_struct.getCPtr(z), z);
  }

  public static void acb_get_imag(arb_struct im, acb_struct z) {
    arblibJNI.acb_get_imag(arb_struct.getCPtr(im), im, acb_struct.getCPtr(z), z);
  }

  public static void acb_get_mid(acb_struct res, acb_struct x) {
    arblibJNI.acb_get_mid(acb_struct.getCPtr(res), res, acb_struct.getCPtr(x), x);
  }

  public static int acb_is_zero(acb_struct z) {
    return arblibJNI.acb_is_zero(acb_struct.getCPtr(z), z);
  }

  public static int acb_is_one(acb_struct z) {
    return arblibJNI.acb_is_one(acb_struct.getCPtr(z), z);
  }

  public static int acb_is_exact(acb_struct z) {
    return arblibJNI.acb_is_exact(acb_struct.getCPtr(z), z);
  }

  public static int acb_is_int(acb_struct z) {
    return arblibJNI.acb_is_int(acb_struct.getCPtr(z), z);
  }

  public static int acb_is_int_2exp_si(acb_struct z, int e) {
    return arblibJNI.acb_is_int_2exp_si(acb_struct.getCPtr(z), z, e);
  }

  public static void acb_zero(acb_struct z) {
    arblibJNI.acb_zero(acb_struct.getCPtr(z), z);
  }

  public static void acb_one(acb_struct z) {
    arblibJNI.acb_one(acb_struct.getCPtr(z), z);
  }

  public static void acb_onei(acb_struct z) {
    arblibJNI.acb_onei(acb_struct.getCPtr(z), z);
  }

  public static void acb_set(acb_struct z, acb_struct x) {
    arblibJNI.acb_set(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x);
  }

  public static void acb_set_round(acb_struct z, acb_struct x, int prec) {
    arblibJNI.acb_set_round(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_neg_round(acb_struct z, acb_struct x, int prec) {
    arblibJNI.acb_neg_round(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_swap(acb_struct z, acb_struct x) {
    arblibJNI.acb_swap(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x);
  }

  public static int acb_equal(acb_struct x, acb_struct y) {
    return arblibJNI.acb_equal(acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y);
  }

  public static int acb_equal_si(acb_struct x, int y) {
    return arblibJNI.acb_equal_si(acb_struct.getCPtr(x), x, y);
  }

  public static int acb_eq(acb_struct x, acb_struct y) {
    return arblibJNI.acb_eq(acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y);
  }

  public static int acb_ne(acb_struct x, acb_struct y) {
    return arblibJNI.acb_ne(acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y);
  }

  public static int acb_overlaps(acb_struct x, acb_struct y) {
    return arblibJNI.acb_overlaps(acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y);
  }

  public static int acb_contains_zero(acb_struct x) {
    return arblibJNI.acb_contains_zero(acb_struct.getCPtr(x), x);
  }

  public static int acb_contains_fmpq(acb_struct x, fmpq y) {
    return arblibJNI.acb_contains_fmpq(acb_struct.getCPtr(x), x, fmpq.getCPtr(y), y);
  }

  public static int acb_contains_fmpz(acb_struct x, SWIGTYPE_p_long y) {
    return arblibJNI.acb_contains_fmpz(acb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y));
  }

  public static int acb_contains(acb_struct x, acb_struct y) {
    return arblibJNI.acb_contains(acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y);
  }

  public static int acb_contains_interior(acb_struct x, acb_struct y) {
    return arblibJNI.acb_contains_interior(acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y);
  }

  public static void acb_set_ui(acb_struct z, long c) {
    arblibJNI.acb_set_ui(acb_struct.getCPtr(z), z, c);
  }

  public static void acb_set_d(acb_struct z, double c) {
    arblibJNI.acb_set_d(acb_struct.getCPtr(z), z, c);
  }

  public static void acb_set_si(acb_struct z, int c) {
    arblibJNI.acb_set_si(acb_struct.getCPtr(z), z, c);
  }

  public static void acb_set_si_si(acb_struct z, int x, int y) {
    arblibJNI.acb_set_si_si(acb_struct.getCPtr(z), z, x, y);
  }

  public static void acb_set_d_d(acb_struct z, double x, double y) {
    arblibJNI.acb_set_d_d(acb_struct.getCPtr(z), z, x, y);
  }

  public static void acb_set_fmpz(acb_struct z, SWIGTYPE_p_long c) {
    arblibJNI.acb_set_fmpz(acb_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void acb_set_fmpz_fmpz(acb_struct z, SWIGTYPE_p_long x, SWIGTYPE_p_long y) {
    arblibJNI.acb_set_fmpz_fmpz(acb_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y));
  }

  public static void acb_set_round_fmpz(acb_struct z, SWIGTYPE_p_long y, int prec) {
    arblibJNI.acb_set_round_fmpz(acb_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static int acb_contains_int(acb_struct x) {
    return arblibJNI.acb_contains_int(acb_struct.getCPtr(x), x);
  }

  public static int acb_get_unique_fmpz(SWIGTYPE_p_long z, acb_struct x) {
    return arblibJNI.acb_get_unique_fmpz(SWIGTYPE_p_long.getCPtr(z), acb_struct.getCPtr(x), x);
  }

  public static void acb_set_fmpq(acb_struct z, fmpq c, int prec) {
    arblibJNI.acb_set_fmpq(acb_struct.getCPtr(z), z, fmpq.getCPtr(c), c, prec);
  }

  public static void acb_set_arb(acb_struct z, arb_struct c) {
    arblibJNI.acb_set_arb(acb_struct.getCPtr(z), z, arb_struct.getCPtr(c), c);
  }

  public static void acb_set_arb_arb(acb_struct z, arb_struct x, arb_struct y) {
    arblibJNI.acb_set_arb_arb(acb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y);
  }

  public static void acb_set_round_arb(acb_struct z, arb_struct x, int prec) {
    arblibJNI.acb_set_round_arb(acb_struct.getCPtr(z), z, arb_struct.getCPtr(x), x, prec);
  }

  public static void acb_trim(acb_struct z, acb_struct x) {
    arblibJNI.acb_trim(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x);
  }

  public static void acb_add_error_arf(acb_struct x, arf_struct err) {
    arblibJNI.acb_add_error_arf(acb_struct.getCPtr(x), x, arf_struct.getCPtr(err), err);
  }

  public static void acb_add_error_mag(acb_struct x, mag_struct err) {
    arblibJNI.acb_add_error_mag(acb_struct.getCPtr(x), x, mag_struct.getCPtr(err), err);
  }

  public static void acb_get_mag(mag_struct z, acb_struct x) {
    arblibJNI.acb_get_mag(mag_struct.getCPtr(z), z, acb_struct.getCPtr(x), x);
  }

  public static void acb_get_mag_lower(mag_struct z, acb_struct x) {
    arblibJNI.acb_get_mag_lower(mag_struct.getCPtr(z), z, acb_struct.getCPtr(x), x);
  }

  public static void acb_get_abs_ubound_arf(arf_struct u, acb_struct z, int prec) {
    arblibJNI.acb_get_abs_ubound_arf(arf_struct.getCPtr(u), u, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_get_abs_lbound_arf(arf_struct u, acb_struct z, int prec) {
    arblibJNI.acb_get_abs_lbound_arf(arf_struct.getCPtr(u), u, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_get_rad_ubound_arf(arf_struct u, acb_struct z, int prec) {
    arblibJNI.acb_get_rad_ubound_arf(arf_struct.getCPtr(u), u, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_union(acb_struct res, acb_struct x, acb_struct y, int prec) {
    arblibJNI.acb_union(acb_struct.getCPtr(res), res, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, prec);
  }

  public static void acb_arg(arb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_arg(arb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_sgn(acb_struct res, acb_struct z, int prec) {
    arblibJNI.acb_sgn(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_csgn(arb_struct res, acb_struct z) {
    arblibJNI.acb_csgn(arb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z);
  }

  public static void acb_real_abs(acb_struct res, acb_struct z, int analytic, int prec) {
    arblibJNI.acb_real_abs(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, analytic, prec);
  }

  public static void acb_real_sgn(acb_struct res, acb_struct z, int analytic, int prec) {
    arblibJNI.acb_real_sgn(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, analytic, prec);
  }

  public static void acb_real_heaviside(acb_struct res, acb_struct z, int analytic, int prec) {
    arblibJNI.acb_real_heaviside(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, analytic, prec);
  }

  public static void acb_real_floor(acb_struct res, acb_struct z, int analytic, int prec) {
    arblibJNI.acb_real_floor(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, analytic, prec);
  }

  public static void acb_real_ceil(acb_struct res, acb_struct z, int analytic, int prec) {
    arblibJNI.acb_real_ceil(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, analytic, prec);
  }

  public static void acb_real_max(acb_struct res, acb_struct x, acb_struct y, int analytic, int prec) {
    arblibJNI.acb_real_max(acb_struct.getCPtr(res), res, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, analytic, prec);
  }

  public static void acb_real_min(acb_struct res, acb_struct x, acb_struct y, int analytic, int prec) {
    arblibJNI.acb_real_min(acb_struct.getCPtr(res), res, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, analytic, prec);
  }

  public static void acb_real_sqrtpos(acb_struct res, acb_struct z, int analytic, int prec) {
    arblibJNI.acb_real_sqrtpos(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, analytic, prec);
  }

  public static void acb_sqrt_analytic(acb_struct res, acb_struct z, int analytic, int prec) {
    arblibJNI.acb_sqrt_analytic(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, analytic, prec);
  }

  public static void acb_rsqrt_analytic(acb_struct res, acb_struct z, int analytic, int prec) {
    arblibJNI.acb_rsqrt_analytic(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, analytic, prec);
  }

  public static void acb_log_analytic(acb_struct res, acb_struct z, int analytic, int prec) {
    arblibJNI.acb_log_analytic(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, analytic, prec);
  }

  public static void acb_pow_analytic(acb_struct res, acb_struct z, acb_struct w, int analytic, int prec) {
    arblibJNI.acb_pow_analytic(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, acb_struct.getCPtr(w), w, analytic, prec);
  }

  public static void acb_add(acb_struct z, acb_struct x, acb_struct y, int prec) {
    arblibJNI.acb_add(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, prec);
  }

  public static void acb_sub(acb_struct z, acb_struct x, acb_struct y, int prec) {
    arblibJNI.acb_sub(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, prec);
  }

  public static void acb_add_si(acb_struct z, acb_struct x, long c, int prec) {
    arblibJNI.acb_add_si(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, c, prec);
  }

  public static void acb_add_ui(acb_struct z, acb_struct x, long c, int prec) {
    arblibJNI.acb_add_ui(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, c, prec);
  }

  public static void acb_sub_si(acb_struct z, acb_struct x, long c, int prec) {
    arblibJNI.acb_sub_si(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, c, prec);
  }

  public static void acb_sub_ui(acb_struct z, acb_struct x, long c, int prec) {
    arblibJNI.acb_sub_ui(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, c, prec);
  }

  public static void acb_add_fmpz(acb_struct z, acb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.acb_add_fmpz(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void acb_add_arb(acb_struct z, acb_struct x, arb_struct y, int prec) {
    arblibJNI.acb_add_arb(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void acb_sub_fmpz(acb_struct z, acb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.acb_sub_fmpz(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void acb_sub_arb(acb_struct z, acb_struct x, arb_struct y, int prec) {
    arblibJNI.acb_sub_arb(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void acb_neg(acb_struct z, acb_struct x) {
    arblibJNI.acb_neg(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x);
  }

  public static void acb_conj(acb_struct z, acb_struct x) {
    arblibJNI.acb_conj(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x);
  }

  public static void acb_abs(arb_struct u, acb_struct z, int prec) {
    arblibJNI.acb_abs(arb_struct.getCPtr(u), u, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_mul_ui(acb_struct z, acb_struct x, long y, int prec) {
    arblibJNI.acb_mul_ui(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, y, prec);
  }

  public static void acb_mul_si(acb_struct z, acb_struct x, int y, int prec) {
    arblibJNI.acb_mul_si(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, y, prec);
  }

  public static void acb_mul_fmpz(acb_struct z, acb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.acb_mul_fmpz(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void acb_mul_arb(acb_struct z, acb_struct x, arb_struct y, int prec) {
    arblibJNI.acb_mul_arb(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void acb_mul_onei(acb_struct z, acb_struct x) {
    arblibJNI.acb_mul_onei(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x);
  }

  public static void acb_div_onei(acb_struct z, acb_struct x) {
    arblibJNI.acb_div_onei(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x);
  }

  public static void acb_mul(acb_struct z, acb_struct x, acb_struct y, int prec) {
    arblibJNI.acb_mul(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, prec);
  }

  public static void acb_mul_naive(acb_struct z, acb_struct x, acb_struct y, int prec) {
    arblibJNI.acb_mul_naive(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, prec);
  }

  public static void acb_mul_2exp_si(acb_struct z, acb_struct x, int e) {
    arblibJNI.acb_mul_2exp_si(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, e);
  }

  public static void acb_mul_2exp_fmpz(acb_struct z, acb_struct x, SWIGTYPE_p_long c) {
    arblibJNI.acb_mul_2exp_fmpz(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void acb_addmul(acb_struct z, acb_struct x, acb_struct y, int prec) {
    arblibJNI.acb_addmul(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, prec);
  }

  public static void acb_submul(acb_struct z, acb_struct x, acb_struct y, int prec) {
    arblibJNI.acb_submul(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, prec);
  }

  public static void acb_addmul_ui(acb_struct z, acb_struct x, long y, int prec) {
    arblibJNI.acb_addmul_ui(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, y, prec);
  }

  public static void acb_addmul_si(acb_struct z, acb_struct x, int y, int prec) {
    arblibJNI.acb_addmul_si(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, y, prec);
  }

  public static void acb_submul_ui(acb_struct z, acb_struct x, long y, int prec) {
    arblibJNI.acb_submul_ui(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, y, prec);
  }

  public static void acb_submul_si(acb_struct z, acb_struct x, int y, int prec) {
    arblibJNI.acb_submul_si(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, y, prec);
  }

  public static void acb_addmul_fmpz(acb_struct z, acb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.acb_addmul_fmpz(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void acb_submul_fmpz(acb_struct z, acb_struct x, SWIGTYPE_p_long y, int prec) {
    arblibJNI.acb_submul_fmpz(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(y), prec);
  }

  public static void acb_addmul_arb(acb_struct z, acb_struct x, arb_struct y, int prec) {
    arblibJNI.acb_addmul_arb(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void acb_submul_arb(acb_struct z, acb_struct x, arb_struct y, int prec) {
    arblibJNI.acb_submul_arb(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void acb_dot_simple(acb_struct res, acb_struct initial, int subtract, acb_struct x, int xstep, acb_struct y, int ystep, int len, int prec) {
    arblibJNI.acb_dot_simple(acb_struct.getCPtr(res), res, acb_struct.getCPtr(initial), initial, subtract, acb_struct.getCPtr(x), x, xstep, acb_struct.getCPtr(y), y, ystep, len, prec);
  }

  public static void acb_dot_precise(acb_struct res, acb_struct initial, int subtract, acb_struct x, int xstep, acb_struct y, int ystep, int len, int prec) {
    arblibJNI.acb_dot_precise(acb_struct.getCPtr(res), res, acb_struct.getCPtr(initial), initial, subtract, acb_struct.getCPtr(x), x, xstep, acb_struct.getCPtr(y), y, ystep, len, prec);
  }

  public static void acb_dot(acb_struct res, acb_struct initial, int subtract, acb_struct x, int xstep, acb_struct y, int ystep, int len, int prec) {
    arblibJNI.acb_dot(acb_struct.getCPtr(res), res, acb_struct.getCPtr(initial), initial, subtract, acb_struct.getCPtr(x), x, xstep, acb_struct.getCPtr(y), y, ystep, len, prec);
  }

  public static void acb_approx_dot(acb_struct res, acb_struct initial, int subtract, acb_struct x, int xstep, acb_struct y, int ystep, int len, int prec) {
    arblibJNI.acb_approx_dot(acb_struct.getCPtr(res), res, acb_struct.getCPtr(initial), initial, subtract, acb_struct.getCPtr(x), x, xstep, acb_struct.getCPtr(y), y, ystep, len, prec);
  }

  public static void acb_inv(acb_struct z, acb_struct x, int prec) {
    arblibJNI.acb_inv(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_div(acb_struct z, acb_struct x, acb_struct y, int prec) {
    arblibJNI.acb_div(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, prec);
  }

  public static void acb_div_ui(acb_struct z, acb_struct x, long c, int prec) {
    arblibJNI.acb_div_ui(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, c, prec);
  }

  public static void acb_div_si(acb_struct z, acb_struct x, int c, int prec) {
    arblibJNI.acb_div_si(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, c, prec);
  }

  public static void acb_div_arb(acb_struct z, acb_struct x, arb_struct c, int prec) {
    arblibJNI.acb_div_arb(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, arb_struct.getCPtr(c), c, prec);
  }

  public static void acb_div_fmpz(acb_struct z, acb_struct x, SWIGTYPE_p_long c, int prec) {
    arblibJNI.acb_div_fmpz(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, SWIGTYPE_p_long.getCPtr(c), prec);
  }

  public static void acb_cube(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_cube(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_pow_fmpz(acb_struct y, acb_struct b, SWIGTYPE_p_long e, int prec) {
    arblibJNI.acb_pow_fmpz(acb_struct.getCPtr(y), y, acb_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(e), prec);
  }

  public static void acb_pow_ui(acb_struct y, acb_struct b, long e, int prec) {
    arblibJNI.acb_pow_ui(acb_struct.getCPtr(y), y, acb_struct.getCPtr(b), b, e, prec);
  }

  public static void acb_pow_si(acb_struct y, acb_struct b, int e, int prec) {
    arblibJNI.acb_pow_si(acb_struct.getCPtr(y), y, acb_struct.getCPtr(b), b, e, prec);
  }

  public static void acb_const_pi(acb_struct x, int prec) {
    arblibJNI.acb_const_pi(acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_log(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_log(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_log1p(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_log1p(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_exp(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_exp(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_exp_pi_i(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_exp_pi_i(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_exp_invexp(acb_struct r, acb_struct s, acb_struct z, int prec) {
    arblibJNI.acb_exp_invexp(acb_struct.getCPtr(r), r, acb_struct.getCPtr(s), s, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_expm1(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_expm1(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_sin(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_sin(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_cos(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_cos(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_sin_cos(acb_struct s, acb_struct c, acb_struct z, int prec) {
    arblibJNI.acb_sin_cos(acb_struct.getCPtr(s), s, acb_struct.getCPtr(c), c, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_tan(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_tan(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_cot(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_cot(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_asin(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_asin(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_acos(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_acos(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_atan(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_atan(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_asinh(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_asinh(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_acosh(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_acosh(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_atanh(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_atanh(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_sinh(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_sinh(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_cosh(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_cosh(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_sinh_cosh(acb_struct y, acb_struct z, acb_struct x, int prec) {
    arblibJNI.acb_sinh_cosh(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_tanh(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_tanh(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_coth(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_coth(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_sech(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_sech(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_csch(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_csch(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_sec(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_sec(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_csc(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_csc(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_sin_pi(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_sin_pi(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_cos_pi(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_cos_pi(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_sin_cos_pi(acb_struct s, acb_struct c, acb_struct z, int prec) {
    arblibJNI.acb_sin_cos_pi(acb_struct.getCPtr(s), s, acb_struct.getCPtr(c), c, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_tan_pi(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_tan_pi(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_cot_pi(acb_struct r, acb_struct z, int prec) {
    arblibJNI.acb_cot_pi(acb_struct.getCPtr(r), r, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_sinc(acb_struct res, acb_struct z, int prec) {
    arblibJNI.acb_sinc(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_sinc_pi(acb_struct res, acb_struct z, int prec) {
    arblibJNI.acb_sinc_pi(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_pow_arb(acb_struct z, acb_struct x, arb_struct y, int prec) {
    arblibJNI.acb_pow_arb(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, arb_struct.getCPtr(y), y, prec);
  }

  public static void acb_pow(acb_struct r, acb_struct x, acb_struct y, int prec) {
    arblibJNI.acb_pow(acb_struct.getCPtr(r), r, acb_struct.getCPtr(x), x, acb_struct.getCPtr(y), y, prec);
  }

  public static void acb_sqrt(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_sqrt(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_rsqrt(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_rsqrt(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_root_ui(acb_struct y, acb_struct x, long k, int prec) {
    arblibJNI.acb_root_ui(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, k, prec);
  }

  public static void acb_quadratic_roots_fmpz(acb_struct r1, acb_struct r2, SWIGTYPE_p_long a, SWIGTYPE_p_long b, SWIGTYPE_p_long c, int prec) {
    arblibJNI.acb_quadratic_roots_fmpz(acb_struct.getCPtr(r1), r1, acb_struct.getCPtr(r2), r2, SWIGTYPE_p_long.getCPtr(a), SWIGTYPE_p_long.getCPtr(b), SWIGTYPE_p_long.getCPtr(c), prec);
  }

  public static void acb_chebyshev_t_ui(acb_struct a, long n, acb_struct x, int prec) {
    arblibJNI.acb_chebyshev_t_ui(acb_struct.getCPtr(a), a, n, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_chebyshev_t2_ui(acb_struct a, acb_struct b, long n, acb_struct x, int prec) {
    arblibJNI.acb_chebyshev_t2_ui(acb_struct.getCPtr(a), a, acb_struct.getCPtr(b), b, n, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_chebyshev_u_ui(acb_struct a, long n, acb_struct x, int prec) {
    arblibJNI.acb_chebyshev_u_ui(acb_struct.getCPtr(a), a, n, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_chebyshev_u2_ui(acb_struct a, acb_struct b, long n, acb_struct x, int prec) {
    arblibJNI.acb_chebyshev_u2_ui(acb_struct.getCPtr(a), a, acb_struct.getCPtr(b), b, n, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_rising_ui_bs(acb_struct y, acb_struct x, long n, int prec) {
    arblibJNI.acb_rising_ui_bs(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, n, prec);
  }

  public static void acb_rising_ui_rs(acb_struct y, acb_struct x, long n, long m, int prec) {
    arblibJNI.acb_rising_ui_rs(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, n, m, prec);
  }

  public static void acb_rising_ui_rec(acb_struct y, acb_struct x, long n, int prec) {
    arblibJNI.acb_rising_ui_rec(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, n, prec);
  }

  public static void acb_rising_ui(acb_struct z, acb_struct x, long n, int prec) {
    arblibJNI.acb_rising_ui(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, n, prec);
  }

  public static void acb_rising(acb_struct z, acb_struct x, acb_struct n, int prec) {
    arblibJNI.acb_rising(acb_struct.getCPtr(z), z, acb_struct.getCPtr(x), x, acb_struct.getCPtr(n), n, prec);
  }

  public static void acb_rising2_ui_bs(acb_struct u, acb_struct v, acb_struct x, long n, int prec) {
    arblibJNI.acb_rising2_ui_bs(acb_struct.getCPtr(u), u, acb_struct.getCPtr(v), v, acb_struct.getCPtr(x), x, n, prec);
  }

  public static void acb_rising2_ui_rs(acb_struct u, acb_struct v, acb_struct x, long n, long m, int prec) {
    arblibJNI.acb_rising2_ui_rs(acb_struct.getCPtr(u), u, acb_struct.getCPtr(v), v, acb_struct.getCPtr(x), x, n, m, prec);
  }

  public static void acb_rising2_ui(acb_struct u, acb_struct v, acb_struct x, long n, int prec) {
    arblibJNI.acb_rising2_ui(acb_struct.getCPtr(u), u, acb_struct.getCPtr(v), v, acb_struct.getCPtr(x), x, n, prec);
  }

  public static void acb_rising_ui_get_mag(mag_struct bound, acb_struct s, long n) {
    arblibJNI.acb_rising_ui_get_mag(mag_struct.getCPtr(bound), bound, acb_struct.getCPtr(s), s, n);
  }

  public static void acb_gamma(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_gamma(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_rgamma(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_rgamma(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_lgamma(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_lgamma(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_log_sin_pi(acb_struct res, acb_struct z, int prec) {
    arblibJNI.acb_log_sin_pi(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_digamma(acb_struct y, acb_struct x, int prec) {
    arblibJNI.acb_digamma(acb_struct.getCPtr(y), y, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_zeta(acb_struct z, acb_struct s, int prec) {
    arblibJNI.acb_zeta(acb_struct.getCPtr(z), z, acb_struct.getCPtr(s), s, prec);
  }

  public static void acb_hurwitz_zeta(acb_struct z, acb_struct s, acb_struct a, int prec) {
    arblibJNI.acb_hurwitz_zeta(acb_struct.getCPtr(z), z, acb_struct.getCPtr(s), s, acb_struct.getCPtr(a), a, prec);
  }

  public static void acb_polygamma(acb_struct res, acb_struct s, acb_struct z, int prec) {
    arblibJNI.acb_polygamma(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_bernoulli_poly_ui(acb_struct res, long n, acb_struct x, int prec) {
    arblibJNI.acb_bernoulli_poly_ui(acb_struct.getCPtr(res), res, n, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_log_barnes_g(acb_struct res, acb_struct z, int prec) {
    arblibJNI.acb_log_barnes_g(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_barnes_g(acb_struct res, acb_struct z, int prec) {
    arblibJNI.acb_barnes_g(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_polylog(acb_struct w, acb_struct s, acb_struct z, int prec) {
    arblibJNI.acb_polylog(acb_struct.getCPtr(w), w, acb_struct.getCPtr(s), s, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_polylog_si(acb_struct w, int s, acb_struct z, int prec) {
    arblibJNI.acb_polylog_si(acb_struct.getCPtr(w), w, s, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_agm1(acb_struct m, acb_struct z, int prec) {
    arblibJNI.acb_agm1(acb_struct.getCPtr(m), m, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_agm1_cpx(acb_struct m, acb_struct z, int len, int prec) {
    arblibJNI.acb_agm1_cpx(acb_struct.getCPtr(m), m, acb_struct.getCPtr(z), z, len, prec);
  }

  public static void acb_agm(acb_struct res, acb_struct a, acb_struct b, int prec) {
    arblibJNI.acb_agm(acb_struct.getCPtr(res), res, acb_struct.getCPtr(a), a, acb_struct.getCPtr(b), b, prec);
  }

  public static void acb_lambertw_asymp(acb_struct res, acb_struct z, SWIGTYPE_p_long k, int L, int M, int prec) {
    arblibJNI.acb_lambertw_asymp(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(k), L, M, prec);
  }

  public static int acb_lambertw_check_branch(acb_struct w, SWIGTYPE_p_long k, int prec) {
    return arblibJNI.acb_lambertw_check_branch(acb_struct.getCPtr(w), w, SWIGTYPE_p_long.getCPtr(k), prec);
  }

  public static void acb_lambertw_bound_deriv(mag_struct res, acb_struct z, acb_struct ez1, SWIGTYPE_p_long k) {
    arblibJNI.acb_lambertw_bound_deriv(mag_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, acb_struct.getCPtr(ez1), ez1, SWIGTYPE_p_long.getCPtr(k));
  }

  public static void acb_lambertw(acb_struct res, acb_struct z, SWIGTYPE_p_long k, int flags, int prec) {
    arblibJNI.acb_lambertw(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(k), flags, prec);
  }

  public static void acb_sqr(acb_struct res, acb_struct val, int prec) {
    arblibJNI.acb_sqr(acb_struct.getCPtr(res), res, acb_struct.getCPtr(val), val, prec);
  }

  public static int acb_is_finite(acb_struct x) {
    return arblibJNI.acb_is_finite(acb_struct.getCPtr(x), x);
  }

  public static void acb_indeterminate(acb_struct x) {
    arblibJNI.acb_indeterminate(acb_struct.getCPtr(x), x);
  }

  public static acb_struct _acb_vec_entry_ptr(acb_struct vec, int i) {
    long cPtr = arblibJNI._acb_vec_entry_ptr(acb_struct.getCPtr(vec), vec, i);
    return (cPtr == 0) ? null : new acb_struct(cPtr, false);
  }

  public static void _acb_vec_zero(acb_struct A, int n) {
    arblibJNI._acb_vec_zero(acb_struct.getCPtr(A), A, n);
  }

  public static int _acb_vec_is_zero(acb_struct vec, int len) {
    return arblibJNI._acb_vec_is_zero(acb_struct.getCPtr(vec), vec, len);
  }

  public static void _acb_vec_set(acb_struct res, acb_struct vec, int len) {
    arblibJNI._acb_vec_set(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len);
  }

  public static void _acb_vec_set_round(acb_struct res, acb_struct vec, int len, int prec) {
    arblibJNI._acb_vec_set_round(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, prec);
  }

  public static void _acb_vec_neg(acb_struct res, acb_struct vec, int len) {
    arblibJNI._acb_vec_neg(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len);
  }

  public static void _acb_vec_add(acb_struct res, acb_struct vec1, acb_struct vec2, int len, int prec) {
    arblibJNI._acb_vec_add(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec1), vec1, acb_struct.getCPtr(vec2), vec2, len, prec);
  }

  public static void _acb_vec_sub(acb_struct res, acb_struct vec1, acb_struct vec2, int len, int prec) {
    arblibJNI._acb_vec_sub(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec1), vec1, acb_struct.getCPtr(vec2), vec2, len, prec);
  }

  public static void _acb_vec_scalar_submul(acb_struct res, acb_struct vec, int len, acb_struct c, int prec) {
    arblibJNI._acb_vec_scalar_submul(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, acb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_vec_scalar_addmul(acb_struct res, acb_struct vec, int len, acb_struct c, int prec) {
    arblibJNI._acb_vec_scalar_addmul(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, acb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_vec_scalar_mul(acb_struct res, acb_struct vec, int len, acb_struct c, int prec) {
    arblibJNI._acb_vec_scalar_mul(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, acb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_vec_scalar_mul_ui(acb_struct res, acb_struct vec, int len, long c, int prec) {
    arblibJNI._acb_vec_scalar_mul_ui(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, c, prec);
  }

  public static void _acb_vec_scalar_mul_2exp_si(acb_struct res, acb_struct vec, int len, int c) {
    arblibJNI._acb_vec_scalar_mul_2exp_si(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, c);
  }

  public static void _acb_vec_scalar_mul_onei(acb_struct res, acb_struct vec, int len) {
    arblibJNI._acb_vec_scalar_mul_onei(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len);
  }

  public static void _acb_vec_scalar_div_ui(acb_struct res, acb_struct vec, int len, long c, int prec) {
    arblibJNI._acb_vec_scalar_div_ui(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, c, prec);
  }

  public static void _acb_vec_scalar_div(acb_struct res, acb_struct vec, int len, acb_struct c, int prec) {
    arblibJNI._acb_vec_scalar_div(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, acb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_vec_scalar_mul_arb(acb_struct res, acb_struct vec, int len, arb_struct c, int prec) {
    arblibJNI._acb_vec_scalar_mul_arb(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, arb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_vec_scalar_div_arb(acb_struct res, acb_struct vec, int len, arb_struct c, int prec) {
    arblibJNI._acb_vec_scalar_div_arb(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, arb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_vec_scalar_mul_fmpz(acb_struct res, acb_struct vec, int len, SWIGTYPE_p_long c, int prec) {
    arblibJNI._acb_vec_scalar_mul_fmpz(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, SWIGTYPE_p_long.getCPtr(c), prec);
  }

  public static void _acb_vec_scalar_div_fmpz(acb_struct res, acb_struct vec, int len, SWIGTYPE_p_long c, int prec) {
    arblibJNI._acb_vec_scalar_div_fmpz(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, SWIGTYPE_p_long.getCPtr(c), prec);
  }

  public static void acb_fprint(_IO_FILE file, acb_struct x) {
    arblibJNI.acb_fprint(_IO_FILE.getCPtr(file), file, acb_struct.getCPtr(x), x);
  }

  public static void acb_print(acb_struct x) {
    arblibJNI.acb_print(acb_struct.getCPtr(x), x);
  }

  public static void acb_fprintd(_IO_FILE file, acb_struct z, int digits) {
    arblibJNI.acb_fprintd(_IO_FILE.getCPtr(file), file, acb_struct.getCPtr(z), z, digits);
  }

  public static void acb_printd(acb_struct z, int digits) {
    arblibJNI.acb_printd(acb_struct.getCPtr(z), z, digits);
  }

  public static void acb_fprintn(_IO_FILE fp, acb_struct z, int digits, long flags) {
    arblibJNI.acb_fprintn(_IO_FILE.getCPtr(fp), fp, acb_struct.getCPtr(z), z, digits, flags);
  }

  public static void acb_printn(acb_struct x, int digits, long flags) {
    arblibJNI.acb_printn(acb_struct.getCPtr(x), x, digits, flags);
  }

  public static void acb_randtest(acb_struct z, flint_rand_s state, int prec, int mag_bits) {
    arblibJNI.acb_randtest(acb_struct.getCPtr(z), z, flint_rand_s.getCPtr(state), state, prec, mag_bits);
  }

  public static void acb_randtest_special(acb_struct z, flint_rand_s state, int prec, int mag_bits) {
    arblibJNI.acb_randtest_special(acb_struct.getCPtr(z), z, flint_rand_s.getCPtr(state), state, prec, mag_bits);
  }

  public static void acb_randtest_precise(acb_struct z, flint_rand_s state, int prec, int mag_bits) {
    arblibJNI.acb_randtest_precise(acb_struct.getCPtr(z), z, flint_rand_s.getCPtr(state), state, prec, mag_bits);
  }

  public static void acb_randtest_param(acb_struct z, flint_rand_s state, int prec, int mag_bits) {
    arblibJNI.acb_randtest_param(acb_struct.getCPtr(z), z, flint_rand_s.getCPtr(state), state, prec, mag_bits);
  }

  public static int acb_rel_error_bits(acb_struct x) {
    return arblibJNI.acb_rel_error_bits(acb_struct.getCPtr(x), x);
  }

  public static int acb_rel_accuracy_bits(acb_struct x) {
    return arblibJNI.acb_rel_accuracy_bits(acb_struct.getCPtr(x), x);
  }

  public static int acb_rel_one_accuracy_bits(acb_struct x) {
    return arblibJNI.acb_rel_one_accuracy_bits(acb_struct.getCPtr(x), x);
  }

  public static int acb_bits(acb_struct x) {
    return arblibJNI.acb_bits(acb_struct.getCPtr(x), x);
  }

  public static int acb_is_real(acb_struct x) {
    return arblibJNI.acb_is_real(acb_struct.getCPtr(x), x);
  }

  public static int _acb_vec_is_real(acb_struct v, int len) {
    return arblibJNI._acb_vec_is_real(acb_struct.getCPtr(v), v, len);
  }

  public static int _acb_vec_bits(acb_struct vec, int len) {
    return arblibJNI._acb_vec_bits(acb_struct.getCPtr(vec), vec, len);
  }

  public static void _acb_vec_set_powers(acb_struct xs, acb_struct x, int len, int prec) {
    arblibJNI._acb_vec_set_powers(acb_struct.getCPtr(xs), xs, acb_struct.getCPtr(x), x, len, prec);
  }

  public static void _acb_vec_add_error_arf_vec(acb_struct res, arf_struct err, int len) {
    arblibJNI._acb_vec_add_error_arf_vec(acb_struct.getCPtr(res), res, arf_struct.getCPtr(err), err, len);
  }

  public static void _acb_vec_add_error_mag_vec(acb_struct res, mag_struct err, int len) {
    arblibJNI._acb_vec_add_error_mag_vec(acb_struct.getCPtr(res), res, mag_struct.getCPtr(err), err, len);
  }

  public static void _acb_vec_indeterminate(acb_struct vec, int len) {
    arblibJNI._acb_vec_indeterminate(acb_struct.getCPtr(vec), vec, len);
  }

  public static void _acb_vec_trim(acb_struct res, acb_struct vec, int len) {
    arblibJNI._acb_vec_trim(acb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len);
  }

  public static int _acb_vec_get_unique_fmpz_vec(SWIGTYPE_p_long res, acb_struct vec, int len) {
    return arblibJNI._acb_vec_get_unique_fmpz_vec(SWIGTYPE_p_long.getCPtr(res), acb_struct.getCPtr(vec), vec, len);
  }

  public static void _acb_vec_sort_pretty(acb_struct vec, int len) {
    arblibJNI._acb_vec_sort_pretty(acb_struct.getCPtr(vec), vec, len);
  }

  public static void acb_unit_root(acb_struct res, long order, int prec) {
    arblibJNI.acb_unit_root(acb_struct.getCPtr(res), res, order, prec);
  }

  public static void _acb_vec_unit_roots(acb_struct z, int order, int len, int prec) {
    arblibJNI._acb_vec_unit_roots(acb_struct.getCPtr(z), z, order, len, prec);
  }

  public static int acb_allocated_bytes(acb_struct x) {
    return arblibJNI.acb_allocated_bytes(acb_struct.getCPtr(x), x);
  }

  public static int _acb_vec_allocated_bytes(acb_struct vec, int len) {
    return arblibJNI._acb_vec_allocated_bytes(acb_struct.getCPtr(vec), vec, len);
  }

  public static double _acb_vec_estimate_allocated_bytes(int len, int prec) {
    return arblibJNI._acb_vec_estimate_allocated_bytes(len, prec);
  }

  public static void setGlobal_thread_pool(thread_pool_struct value) {
    arblibJNI.global_thread_pool_set(thread_pool_struct.getCPtr(value), value);
  }

  public static thread_pool_struct getGlobal_thread_pool() {
    long cPtr = arblibJNI.global_thread_pool_get();
    return (cPtr == 0) ? null : new thread_pool_struct(cPtr, false);
  }

  public static void setGlobal_thread_pool_initialized(int value) {
    arblibJNI.global_thread_pool_initialized_set(value);
  }

  public static int getGlobal_thread_pool_initialized() {
    return arblibJNI.global_thread_pool_initialized_get();
  }

  public static SWIGTYPE_p_void thread_pool_idle_loop(SWIGTYPE_p_void varg) {
    long cPtr = arblibJNI.thread_pool_idle_loop(SWIGTYPE_p_void.getCPtr(varg));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void thread_pool_init(thread_pool_struct T, int l) {
    arblibJNI.thread_pool_init(thread_pool_struct.getCPtr(T), T, l);
  }

  public static int thread_pool_set_affinity(thread_pool_struct T, SWIGTYPE_p_int cpus, int length) {
    return arblibJNI.thread_pool_set_affinity(thread_pool_struct.getCPtr(T), T, SWIGTYPE_p_int.getCPtr(cpus), length);
  }

  public static int thread_pool_restore_affinity(thread_pool_struct T) {
    return arblibJNI.thread_pool_restore_affinity(thread_pool_struct.getCPtr(T), T);
  }

  public static int thread_pool_get_size(thread_pool_struct T) {
    return arblibJNI.thread_pool_get_size(thread_pool_struct.getCPtr(T), T);
  }

  public static int thread_pool_set_size(thread_pool_struct T, int new_size) {
    return arblibJNI.thread_pool_set_size(thread_pool_struct.getCPtr(T), T, new_size);
  }

  public static int thread_pool_request(thread_pool_struct T, SWIGTYPE_p_int out, int requested) {
    return arblibJNI.thread_pool_request(thread_pool_struct.getCPtr(T), T, SWIGTYPE_p_int.getCPtr(out), requested);
  }

  public static void thread_pool_wake(thread_pool_struct T, int i, int max_workers, SWIGTYPE_p_f_p_void__void f, SWIGTYPE_p_void a) {
    arblibJNI.thread_pool_wake(thread_pool_struct.getCPtr(T), T, i, max_workers, SWIGTYPE_p_f_p_void__void.getCPtr(f), SWIGTYPE_p_void.getCPtr(a));
  }

  public static void thread_pool_wait(thread_pool_struct T, int i) {
    arblibJNI.thread_pool_wait(thread_pool_struct.getCPtr(T), T, i);
  }

  public static void thread_pool_give_back(thread_pool_struct T, int i) {
    arblibJNI.thread_pool_give_back(thread_pool_struct.getCPtr(T), T, i);
  }

  public static void thread_pool_clear(thread_pool_struct T) {
    arblibJNI.thread_pool_clear(thread_pool_struct.getCPtr(T), T);
  }

  public static int flint_request_threads(SWIGTYPE_p_p_int handles, int thread_limit) {
    return arblibJNI.flint_request_threads(SWIGTYPE_p_p_int.getCPtr(handles), thread_limit);
  }

  public static void flint_give_back_threads(SWIGTYPE_p_int handles, int num_handles) {
    arblibJNI.flint_give_back_threads(SWIGTYPE_p_int.getCPtr(handles), num_handles);
  }

  public static long nmod_mat_get_entry(nmod_mat_struct mat, int i, int j) {
    return arblibJNI.nmod_mat_get_entry(nmod_mat_struct.getCPtr(mat), mat, i, j);
  }

  public static SWIGTYPE_p_unsigned_long nmod_mat_entry_ptr(nmod_mat_struct mat, int i, int j) {
    long cPtr = arblibJNI.nmod_mat_entry_ptr(nmod_mat_struct.getCPtr(mat), mat, i, j);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static void nmod_mat_set_entry(nmod_mat_struct mat, int i, int j, long x) {
    arblibJNI.nmod_mat_set_entry(nmod_mat_struct.getCPtr(mat), mat, i, j, x);
  }

  public static int nmod_mat_nrows(nmod_mat_struct mat) {
    return arblibJNI.nmod_mat_nrows(nmod_mat_struct.getCPtr(mat), mat);
  }

  public static int nmod_mat_ncols(nmod_mat_struct mat) {
    return arblibJNI.nmod_mat_ncols(nmod_mat_struct.getCPtr(mat), mat);
  }

  public static void _nmod_mat_set_mod(nmod_mat_struct mat, long n) {
    arblibJNI._nmod_mat_set_mod(nmod_mat_struct.getCPtr(mat), mat, n);
  }

  public static void nmod_mat_init(nmod_mat_struct mat, int rows, int cols, long n) {
    arblibJNI.nmod_mat_init(nmod_mat_struct.getCPtr(mat), mat, rows, cols, n);
  }

  public static void nmod_mat_init_set(nmod_mat_struct mat, nmod_mat_struct src) {
    arblibJNI.nmod_mat_init_set(nmod_mat_struct.getCPtr(mat), mat, nmod_mat_struct.getCPtr(src), src);
  }

  public static void nmod_mat_clear(nmod_mat_struct mat) {
    arblibJNI.nmod_mat_clear(nmod_mat_struct.getCPtr(mat), mat);
  }

  public static void nmod_mat_one(nmod_mat_struct mat) {
    arblibJNI.nmod_mat_one(nmod_mat_struct.getCPtr(mat), mat);
  }

  public static void nmod_mat_swap(nmod_mat_struct mat1, nmod_mat_struct mat2) {
    arblibJNI.nmod_mat_swap(nmod_mat_struct.getCPtr(mat1), mat1, nmod_mat_struct.getCPtr(mat2), mat2);
  }

  public static void nmod_mat_window_init(nmod_mat_struct window, nmod_mat_struct mat, int r1, int c1, int r2, int c2) {
    arblibJNI.nmod_mat_window_init(nmod_mat_struct.getCPtr(window), window, nmod_mat_struct.getCPtr(mat), mat, r1, c1, r2, c2);
  }

  public static void nmod_mat_window_clear(nmod_mat_struct window) {
    arblibJNI.nmod_mat_window_clear(nmod_mat_struct.getCPtr(window), window);
  }

  public static void nmod_mat_concat_horizontal(nmod_mat_struct res, nmod_mat_struct mat1, nmod_mat_struct mat2) {
    arblibJNI.nmod_mat_concat_horizontal(nmod_mat_struct.getCPtr(res), res, nmod_mat_struct.getCPtr(mat1), mat1, nmod_mat_struct.getCPtr(mat2), mat2);
  }

  public static void nmod_mat_concat_vertical(nmod_mat_struct res, nmod_mat_struct mat1, nmod_mat_struct mat2) {
    arblibJNI.nmod_mat_concat_vertical(nmod_mat_struct.getCPtr(res), res, nmod_mat_struct.getCPtr(mat1), mat1, nmod_mat_struct.getCPtr(mat2), mat2);
  }

  public static void nmod_mat_randtest(nmod_mat_struct mat, flint_rand_s state) {
    arblibJNI.nmod_mat_randtest(nmod_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state);
  }

  public static void nmod_mat_randfull(nmod_mat_struct mat, flint_rand_s state) {
    arblibJNI.nmod_mat_randfull(nmod_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state);
  }

  public static int nmod_mat_randpermdiag(nmod_mat_struct mat, flint_rand_s state, SWIGTYPE_p_unsigned_long diag, int n) {
    return arblibJNI.nmod_mat_randpermdiag(nmod_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, SWIGTYPE_p_unsigned_long.getCPtr(diag), n);
  }

  public static void nmod_mat_randrank(nmod_mat_struct arg0, flint_rand_s state, int rank) {
    arblibJNI.nmod_mat_randrank(nmod_mat_struct.getCPtr(arg0), arg0, flint_rand_s.getCPtr(state), state, rank);
  }

  public static void nmod_mat_randops(nmod_mat_struct mat, int count, flint_rand_s state) {
    arblibJNI.nmod_mat_randops(nmod_mat_struct.getCPtr(mat), mat, count, flint_rand_s.getCPtr(state), state);
  }

  public static void nmod_mat_randtril(nmod_mat_struct mat, flint_rand_s state, int unit) {
    arblibJNI.nmod_mat_randtril(nmod_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, unit);
  }

  public static void nmod_mat_randtriu(nmod_mat_struct mat, flint_rand_s state, int unit) {
    arblibJNI.nmod_mat_randtriu(nmod_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, unit);
  }

  public static void nmod_mat_print_pretty(nmod_mat_struct mat) {
    arblibJNI.nmod_mat_print_pretty(nmod_mat_struct.getCPtr(mat), mat);
  }

  public static int nmod_mat_equal(nmod_mat_struct mat1, nmod_mat_struct mat2) {
    return arblibJNI.nmod_mat_equal(nmod_mat_struct.getCPtr(mat1), mat1, nmod_mat_struct.getCPtr(mat2), mat2);
  }

  public static void nmod_mat_zero(nmod_mat_struct mat) {
    arblibJNI.nmod_mat_zero(nmod_mat_struct.getCPtr(mat), mat);
  }

  public static int nmod_mat_is_zero(nmod_mat_struct mat) {
    return arblibJNI.nmod_mat_is_zero(nmod_mat_struct.getCPtr(mat), mat);
  }

  public static int nmod_mat_is_zero_row(nmod_mat_struct mat, int i) {
    return arblibJNI.nmod_mat_is_zero_row(nmod_mat_struct.getCPtr(mat), mat, i);
  }

  public static int nmod_mat_is_empty(nmod_mat_struct mat) {
    return arblibJNI.nmod_mat_is_empty(nmod_mat_struct.getCPtr(mat), mat);
  }

  public static int nmod_mat_is_square(nmod_mat_struct mat) {
    return arblibJNI.nmod_mat_is_square(nmod_mat_struct.getCPtr(mat), mat);
  }

  public static void nmod_mat_set(nmod_mat_struct B, nmod_mat_struct A) {
    arblibJNI.nmod_mat_set(nmod_mat_struct.getCPtr(B), B, nmod_mat_struct.getCPtr(A), A);
  }

  public static void nmod_mat_transpose(nmod_mat_struct B, nmod_mat_struct A) {
    arblibJNI.nmod_mat_transpose(nmod_mat_struct.getCPtr(B), B, nmod_mat_struct.getCPtr(A), A);
  }

  public static void nmod_mat_add(nmod_mat_struct C, nmod_mat_struct A, nmod_mat_struct B) {
    arblibJNI.nmod_mat_add(nmod_mat_struct.getCPtr(C), C, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B);
  }

  public static void nmod_mat_sub(nmod_mat_struct C, nmod_mat_struct A, nmod_mat_struct B) {
    arblibJNI.nmod_mat_sub(nmod_mat_struct.getCPtr(C), C, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B);
  }

  public static void nmod_mat_neg(nmod_mat_struct B, nmod_mat_struct A) {
    arblibJNI.nmod_mat_neg(nmod_mat_struct.getCPtr(B), B, nmod_mat_struct.getCPtr(A), A);
  }

  public static void nmod_mat_scalar_mul(nmod_mat_struct B, nmod_mat_struct A, long c) {
    arblibJNI.nmod_mat_scalar_mul(nmod_mat_struct.getCPtr(B), B, nmod_mat_struct.getCPtr(A), A, c);
  }

  public static void nmod_mat_scalar_mul_add(nmod_mat_struct dest, nmod_mat_struct X, long b, nmod_mat_struct Y) {
    arblibJNI.nmod_mat_scalar_mul_add(nmod_mat_struct.getCPtr(dest), dest, nmod_mat_struct.getCPtr(X), X, b, nmod_mat_struct.getCPtr(Y), Y);
  }

  public static void nmod_mat_scalar_mul_fmpz(nmod_mat_struct res, nmod_mat_struct M, SWIGTYPE_p_long c) {
    arblibJNI.nmod_mat_scalar_mul_fmpz(nmod_mat_struct.getCPtr(res), res, nmod_mat_struct.getCPtr(M), M, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void nmod_mat_mul(nmod_mat_struct C, nmod_mat_struct A, nmod_mat_struct B) {
    arblibJNI.nmod_mat_mul(nmod_mat_struct.getCPtr(C), C, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B);
  }

  public static void nmod_mat_mul_classical(nmod_mat_struct C, nmod_mat_struct A, nmod_mat_struct B) {
    arblibJNI.nmod_mat_mul_classical(nmod_mat_struct.getCPtr(C), C, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B);
  }

  public static void _nmod_mat_mul_classical_threaded_pool_op(nmod_mat_struct D, nmod_mat_struct C, nmod_mat_struct A, nmod_mat_struct B, int op, SWIGTYPE_p_int threads, int num_threads) {
    arblibJNI._nmod_mat_mul_classical_threaded_pool_op(nmod_mat_struct.getCPtr(D), D, nmod_mat_struct.getCPtr(C), C, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B, op, SWIGTYPE_p_int.getCPtr(threads), num_threads);
  }

  public static void nmod_mat_mul_classical_threaded(nmod_mat_struct C, nmod_mat_struct A, nmod_mat_struct B) {
    arblibJNI.nmod_mat_mul_classical_threaded(nmod_mat_struct.getCPtr(C), C, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B);
  }

  public static void nmod_mat_mul_strassen(nmod_mat_struct C, nmod_mat_struct A, nmod_mat_struct B) {
    arblibJNI.nmod_mat_mul_strassen(nmod_mat_struct.getCPtr(C), C, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B);
  }

  public static void _nmod_mat_mul_classical_op(nmod_mat_struct D, nmod_mat_struct C, nmod_mat_struct A, nmod_mat_struct B, int op) {
    arblibJNI._nmod_mat_mul_classical_op(nmod_mat_struct.getCPtr(D), D, nmod_mat_struct.getCPtr(C), C, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B, op);
  }

  public static void nmod_mat_addmul(nmod_mat_struct D, nmod_mat_struct C, nmod_mat_struct A, nmod_mat_struct B) {
    arblibJNI.nmod_mat_addmul(nmod_mat_struct.getCPtr(D), D, nmod_mat_struct.getCPtr(C), C, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B);
  }

  public static void nmod_mat_submul(nmod_mat_struct D, nmod_mat_struct C, nmod_mat_struct A, nmod_mat_struct B) {
    arblibJNI.nmod_mat_submul(nmod_mat_struct.getCPtr(D), D, nmod_mat_struct.getCPtr(C), C, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B);
  }

  public static void _nmod_mat_pow(nmod_mat_struct dest, nmod_mat_struct mat, long pow) {
    arblibJNI._nmod_mat_pow(nmod_mat_struct.getCPtr(dest), dest, nmod_mat_struct.getCPtr(mat), mat, pow);
  }

  public static void nmod_mat_pow(nmod_mat_struct dest, nmod_mat_struct mat, long pow) {
    arblibJNI.nmod_mat_pow(nmod_mat_struct.getCPtr(dest), dest, nmod_mat_struct.getCPtr(mat), mat, pow);
  }

  public static long nmod_mat_trace(nmod_mat_struct mat) {
    return arblibJNI.nmod_mat_trace(nmod_mat_struct.getCPtr(mat), mat);
  }

  public static long _nmod_mat_det(nmod_mat_struct A) {
    return arblibJNI._nmod_mat_det(nmod_mat_struct.getCPtr(A), A);
  }

  public static long nmod_mat_det(nmod_mat_struct A) {
    return arblibJNI.nmod_mat_det(nmod_mat_struct.getCPtr(A), A);
  }

  public static int nmod_mat_rank(nmod_mat_struct A) {
    return arblibJNI.nmod_mat_rank(nmod_mat_struct.getCPtr(A), A);
  }

  public static int nmod_mat_inv(nmod_mat_struct B, nmod_mat_struct A) {
    return arblibJNI.nmod_mat_inv(nmod_mat_struct.getCPtr(B), B, nmod_mat_struct.getCPtr(A), A);
  }

  public static void nmod_mat_swap_rows(nmod_mat_struct mat, SWIGTYPE_p_long perm, int r, int s) {
    arblibJNI.nmod_mat_swap_rows(nmod_mat_struct.getCPtr(mat), mat, SWIGTYPE_p_long.getCPtr(perm), r, s);
  }

  public static void nmod_mat_invert_rows(nmod_mat_struct mat, SWIGTYPE_p_long perm) {
    arblibJNI.nmod_mat_invert_rows(nmod_mat_struct.getCPtr(mat), mat, SWIGTYPE_p_long.getCPtr(perm));
  }

  public static void nmod_mat_swap_cols(nmod_mat_struct mat, SWIGTYPE_p_long perm, int r, int s) {
    arblibJNI.nmod_mat_swap_cols(nmod_mat_struct.getCPtr(mat), mat, SWIGTYPE_p_long.getCPtr(perm), r, s);
  }

  public static void nmod_mat_invert_cols(nmod_mat_struct mat, SWIGTYPE_p_long perm) {
    arblibJNI.nmod_mat_invert_cols(nmod_mat_struct.getCPtr(mat), mat, SWIGTYPE_p_long.getCPtr(perm));
  }

  public static void nmod_mat_apply_permutation(nmod_mat_struct A, SWIGTYPE_p_long P, int n) {
    arblibJNI.nmod_mat_apply_permutation(nmod_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(P), n);
  }

  public static void nmod_mat_solve_tril(nmod_mat_struct X, nmod_mat_struct L, nmod_mat_struct B, int unit) {
    arblibJNI.nmod_mat_solve_tril(nmod_mat_struct.getCPtr(X), X, nmod_mat_struct.getCPtr(L), L, nmod_mat_struct.getCPtr(B), B, unit);
  }

  public static void nmod_mat_solve_tril_recursive(nmod_mat_struct X, nmod_mat_struct L, nmod_mat_struct B, int unit) {
    arblibJNI.nmod_mat_solve_tril_recursive(nmod_mat_struct.getCPtr(X), X, nmod_mat_struct.getCPtr(L), L, nmod_mat_struct.getCPtr(B), B, unit);
  }

  public static void nmod_mat_solve_tril_classical(nmod_mat_struct X, nmod_mat_struct L, nmod_mat_struct B, int unit) {
    arblibJNI.nmod_mat_solve_tril_classical(nmod_mat_struct.getCPtr(X), X, nmod_mat_struct.getCPtr(L), L, nmod_mat_struct.getCPtr(B), B, unit);
  }

  public static void nmod_mat_solve_triu(nmod_mat_struct X, nmod_mat_struct U, nmod_mat_struct B, int unit) {
    arblibJNI.nmod_mat_solve_triu(nmod_mat_struct.getCPtr(X), X, nmod_mat_struct.getCPtr(U), U, nmod_mat_struct.getCPtr(B), B, unit);
  }

  public static void nmod_mat_solve_triu_recursive(nmod_mat_struct X, nmod_mat_struct U, nmod_mat_struct B, int unit) {
    arblibJNI.nmod_mat_solve_triu_recursive(nmod_mat_struct.getCPtr(X), X, nmod_mat_struct.getCPtr(U), U, nmod_mat_struct.getCPtr(B), B, unit);
  }

  public static void nmod_mat_solve_triu_classical(nmod_mat_struct X, nmod_mat_struct U, nmod_mat_struct B, int unit) {
    arblibJNI.nmod_mat_solve_triu_classical(nmod_mat_struct.getCPtr(X), X, nmod_mat_struct.getCPtr(U), U, nmod_mat_struct.getCPtr(B), B, unit);
  }

  public static int nmod_mat_lu(SWIGTYPE_p_long P, nmod_mat_struct A, int rank_check) {
    return arblibJNI.nmod_mat_lu(SWIGTYPE_p_long.getCPtr(P), nmod_mat_struct.getCPtr(A), A, rank_check);
  }

  public static int nmod_mat_lu_classical(SWIGTYPE_p_long P, nmod_mat_struct A, int rank_check) {
    return arblibJNI.nmod_mat_lu_classical(SWIGTYPE_p_long.getCPtr(P), nmod_mat_struct.getCPtr(A), A, rank_check);
  }

  public static int nmod_mat_lu_recursive(SWIGTYPE_p_long P, nmod_mat_struct A, int rank_check) {
    return arblibJNI.nmod_mat_lu_recursive(SWIGTYPE_p_long.getCPtr(P), nmod_mat_struct.getCPtr(A), A, rank_check);
  }

  public static int nmod_mat_solve(nmod_mat_struct X, nmod_mat_struct A, nmod_mat_struct B) {
    return arblibJNI.nmod_mat_solve(nmod_mat_struct.getCPtr(X), X, nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B);
  }

  public static int nmod_mat_solve_vec(SWIGTYPE_p_unsigned_long x, nmod_mat_struct A, SWIGTYPE_p_unsigned_long b) {
    return arblibJNI.nmod_mat_solve_vec(SWIGTYPE_p_unsigned_long.getCPtr(x), nmod_mat_struct.getCPtr(A), A, SWIGTYPE_p_unsigned_long.getCPtr(b));
  }

  public static int nmod_mat_rref(nmod_mat_struct A) {
    return arblibJNI.nmod_mat_rref(nmod_mat_struct.getCPtr(A), A);
  }

  public static int _nmod_mat_rref(nmod_mat_struct A, SWIGTYPE_p_long pivots_nonpivots, SWIGTYPE_p_long P) {
    return arblibJNI._nmod_mat_rref(nmod_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(pivots_nonpivots), SWIGTYPE_p_long.getCPtr(P));
  }

  public static int nmod_mat_rref_classical(nmod_mat_struct A) {
    return arblibJNI.nmod_mat_rref_classical(nmod_mat_struct.getCPtr(A), A);
  }

  public static int _nmod_mat_rref_classical(nmod_mat_struct A, SWIGTYPE_p_long pivots_nonpivots) {
    return arblibJNI._nmod_mat_rref_classical(nmod_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(pivots_nonpivots));
  }

  public static int nmod_mat_rref_storjohann(nmod_mat_struct A) {
    return arblibJNI.nmod_mat_rref_storjohann(nmod_mat_struct.getCPtr(A), A);
  }

  public static int _nmod_mat_rref_storjohann(nmod_mat_struct A, SWIGTYPE_p_long pivots_nonpivots) {
    return arblibJNI._nmod_mat_rref_storjohann(nmod_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(pivots_nonpivots));
  }

  public static int nmod_mat_reduce_row(nmod_mat_struct M, SWIGTYPE_p_long P, SWIGTYPE_p_long L, int m) {
    return arblibJNI.nmod_mat_reduce_row(nmod_mat_struct.getCPtr(M), M, SWIGTYPE_p_long.getCPtr(P), SWIGTYPE_p_long.getCPtr(L), m);
  }

  public static int nmod_mat_nullspace(nmod_mat_struct X, nmod_mat_struct A) {
    return arblibJNI.nmod_mat_nullspace(nmod_mat_struct.getCPtr(X), X, nmod_mat_struct.getCPtr(A), A);
  }

  public static void nmod_mat_strong_echelon_form(nmod_mat_struct A) {
    arblibJNI.nmod_mat_strong_echelon_form(nmod_mat_struct.getCPtr(A), A);
  }

  public static int nmod_mat_howell_form(nmod_mat_struct A) {
    return arblibJNI.nmod_mat_howell_form(nmod_mat_struct.getCPtr(A), A);
  }

  public static void nmod_mat_similarity(nmod_mat_struct M, int r, long d) {
    arblibJNI.nmod_mat_similarity(nmod_mat_struct.getCPtr(M), M, r, d);
  }

  public static int NMOD_DIVREM_BC_ITCH(int lenA, int lenB, nmod_t mod) {
    return arblibJNI.NMOD_DIVREM_BC_ITCH(lenA, lenB, nmod_t.getCPtr(mod), mod);
  }

  public static int NMOD_DIV_BC_ITCH(int lenA, int lenB, nmod_t mod) {
    return arblibJNI.NMOD_DIV_BC_ITCH(lenA, lenB, nmod_t.getCPtr(mod), mod);
  }

  public static int NMOD_DIVREM_DC_ITCH(int lenB, nmod_t mod) {
    return arblibJNI.NMOD_DIVREM_DC_ITCH(lenB, nmod_t.getCPtr(mod), mod);
  }

  public static int signed_mpn_sub_n(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long op1, SWIGTYPE_p_unsigned_long op2, int n) {
    return arblibJNI.signed_mpn_sub_n(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(op1), SWIGTYPE_p_unsigned_long.getCPtr(op2), n);
  }

  public static void nmod_poly_init(nmod_poly_struct poly, long n) {
    arblibJNI.nmod_poly_init(nmod_poly_struct.getCPtr(poly), poly, n);
  }

  public static void nmod_poly_init_preinv(nmod_poly_struct poly, long n, long ninv) {
    arblibJNI.nmod_poly_init_preinv(nmod_poly_struct.getCPtr(poly), poly, n, ninv);
  }

  public static void nmod_poly_init2(nmod_poly_struct poly, long n, int alloc) {
    arblibJNI.nmod_poly_init2(nmod_poly_struct.getCPtr(poly), poly, n, alloc);
  }

  public static void nmod_poly_init2_preinv(nmod_poly_struct poly, long n, long ninv, int alloc) {
    arblibJNI.nmod_poly_init2_preinv(nmod_poly_struct.getCPtr(poly), poly, n, ninv, alloc);
  }

  public static void nmod_poly_realloc(nmod_poly_struct poly, int alloc) {
    arblibJNI.nmod_poly_realloc(nmod_poly_struct.getCPtr(poly), poly, alloc);
  }

  public static void nmod_poly_clear(nmod_poly_struct poly) {
    arblibJNI.nmod_poly_clear(nmod_poly_struct.getCPtr(poly), poly);
  }

  public static void nmod_poly_fit_length(nmod_poly_struct poly, int alloc) {
    arblibJNI.nmod_poly_fit_length(nmod_poly_struct.getCPtr(poly), poly, alloc);
  }

  public static void nmod_poly_init_mod(nmod_poly_struct poly, nmod_t mod) {
    arblibJNI.nmod_poly_init_mod(nmod_poly_struct.getCPtr(poly), poly, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_set_mod(nmod_poly_struct poly, nmod_t mod) {
    arblibJNI.nmod_poly_set_mod(nmod_poly_struct.getCPtr(poly), poly, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_set_length(nmod_poly_struct poly, int len) {
    arblibJNI._nmod_poly_set_length(nmod_poly_struct.getCPtr(poly), poly, len);
  }

  public static void _nmod_poly_normalise(nmod_poly_struct poly) {
    arblibJNI._nmod_poly_normalise(nmod_poly_struct.getCPtr(poly), poly);
  }

  public static int nmod_poly_length(nmod_poly_struct poly) {
    return arblibJNI.nmod_poly_length(nmod_poly_struct.getCPtr(poly), poly);
  }

  public static int nmod_poly_degree(nmod_poly_struct poly) {
    return arblibJNI.nmod_poly_degree(nmod_poly_struct.getCPtr(poly), poly);
  }

  public static long nmod_poly_modulus(nmod_poly_struct poly) {
    return arblibJNI.nmod_poly_modulus(nmod_poly_struct.getCPtr(poly), poly);
  }

  public static long nmod_poly_max_bits(nmod_poly_struct poly) {
    return arblibJNI.nmod_poly_max_bits(nmod_poly_struct.getCPtr(poly), poly);
  }

  public static SWIGTYPE_p_unsigned_long nmod_poly_lead(nmod_poly_struct poly) {
    long cPtr = arblibJNI.nmod_poly_lead(nmod_poly_struct.getCPtr(poly), poly);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static void nmod_poly_set(nmod_poly_struct a, nmod_poly_struct b) {
    arblibJNI.nmod_poly_set(nmod_poly_struct.getCPtr(a), a, nmod_poly_struct.getCPtr(b), b);
  }

  public static void nmod_poly_swap(nmod_poly_struct poly1, nmod_poly_struct poly2) {
    arblibJNI.nmod_poly_swap(nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2);
  }

  public static void nmod_poly_zero(nmod_poly_struct res) {
    arblibJNI.nmod_poly_zero(nmod_poly_struct.getCPtr(res), res);
  }

  public static void nmod_poly_one(nmod_poly_struct res) {
    arblibJNI.nmod_poly_one(nmod_poly_struct.getCPtr(res), res);
  }

  public static void nmod_poly_truncate(nmod_poly_struct poly, int len) {
    arblibJNI.nmod_poly_truncate(nmod_poly_struct.getCPtr(poly), poly, len);
  }

  public static void nmod_poly_set_trunc(nmod_poly_struct res, nmod_poly_struct poly, int n) {
    arblibJNI.nmod_poly_set_trunc(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _nmod_poly_reverse(SWIGTYPE_p_unsigned_long output, SWIGTYPE_p_unsigned_long input, int len, int m) {
    arblibJNI._nmod_poly_reverse(SWIGTYPE_p_unsigned_long.getCPtr(output), SWIGTYPE_p_unsigned_long.getCPtr(input), len, m);
  }

  public static void nmod_poly_reverse(nmod_poly_struct output, nmod_poly_struct input, int m) {
    arblibJNI.nmod_poly_reverse(nmod_poly_struct.getCPtr(output), output, nmod_poly_struct.getCPtr(input), input, m);
  }

  public static int nmod_poly_equal(nmod_poly_struct a, nmod_poly_struct b) {
    return arblibJNI.nmod_poly_equal(nmod_poly_struct.getCPtr(a), a, nmod_poly_struct.getCPtr(b), b);
  }

  public static int nmod_poly_equal_trunc(nmod_poly_struct poly1, nmod_poly_struct poly2, int n) {
    return arblibJNI.nmod_poly_equal_trunc(nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static int nmod_poly_is_zero(nmod_poly_struct poly) {
    return arblibJNI.nmod_poly_is_zero(nmod_poly_struct.getCPtr(poly), poly);
  }

  public static int nmod_poly_is_one(nmod_poly_struct poly) {
    return arblibJNI.nmod_poly_is_one(nmod_poly_struct.getCPtr(poly), poly);
  }

  public static void nmod_poly_randtest(nmod_poly_struct poly, flint_rand_s state, int len) {
    arblibJNI.nmod_poly_randtest(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len);
  }

  public static void nmod_poly_randtest_not_zero(nmod_poly_struct poly, flint_rand_s state, int len) {
    arblibJNI.nmod_poly_randtest_not_zero(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len);
  }

  public static void nmod_poly_randtest_irreducible(nmod_poly_struct poly, flint_rand_s state, int len) {
    arblibJNI.nmod_poly_randtest_irreducible(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len);
  }

  public static void nmod_poly_randtest_monic(nmod_poly_struct poly, flint_rand_s state, int len) {
    arblibJNI.nmod_poly_randtest_monic(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len);
  }

  public static void nmod_poly_randtest_monic_irreducible(nmod_poly_struct poly, flint_rand_s state, int len) {
    arblibJNI.nmod_poly_randtest_monic_irreducible(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len);
  }

  public static void nmod_poly_randtest_monic_primitive(nmod_poly_struct poly, flint_rand_s state, int len) {
    arblibJNI.nmod_poly_randtest_monic_primitive(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len);
  }

  public static void nmod_poly_randtest_trinomial(nmod_poly_struct poly, flint_rand_s state, int len) {
    arblibJNI.nmod_poly_randtest_trinomial(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len);
  }

  public static int nmod_poly_randtest_trinomial_irreducible(nmod_poly_struct poly, flint_rand_s state, int len, int max_attempts) {
    return arblibJNI.nmod_poly_randtest_trinomial_irreducible(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len, max_attempts);
  }

  public static void nmod_poly_randtest_pentomial(nmod_poly_struct poly, flint_rand_s state, int len) {
    arblibJNI.nmod_poly_randtest_pentomial(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len);
  }

  public static int nmod_poly_randtest_pentomial_irreducible(nmod_poly_struct poly, flint_rand_s state, int len, int max_attempts) {
    return arblibJNI.nmod_poly_randtest_pentomial_irreducible(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len, max_attempts);
  }

  public static void nmod_poly_randtest_sparse_irreducible(nmod_poly_struct poly, flint_rand_s state, int len) {
    arblibJNI.nmod_poly_randtest_sparse_irreducible(nmod_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len);
  }

  public static long nmod_poly_get_coeff_ui(nmod_poly_struct poly, int j) {
    return arblibJNI.nmod_poly_get_coeff_ui(nmod_poly_struct.getCPtr(poly), poly, j);
  }

  public static void nmod_poly_set_coeff_ui(nmod_poly_struct poly, int j, long c) {
    arblibJNI.nmod_poly_set_coeff_ui(nmod_poly_struct.getCPtr(poly), poly, j, c);
  }

  public static String nmod_poly_get_str(nmod_poly_struct poly) {
    return arblibJNI.nmod_poly_get_str(nmod_poly_struct.getCPtr(poly), poly);
  }

  public static String nmod_poly_get_str_pretty(nmod_poly_struct poly, String x) {
    return arblibJNI.nmod_poly_get_str_pretty(nmod_poly_struct.getCPtr(poly), poly, x);
  }

  public static int nmod_poly_set_str(nmod_poly_struct poly, String s) {
    return arblibJNI.nmod_poly_set_str(nmod_poly_struct.getCPtr(poly), poly, s);
  }

  public static int nmod_poly_fread(_IO_FILE f, nmod_poly_struct poly) {
    return arblibJNI.nmod_poly_fread(_IO_FILE.getCPtr(f), f, nmod_poly_struct.getCPtr(poly), poly);
  }

  public static int nmod_poly_fprint(_IO_FILE f, nmod_poly_struct poly) {
    return arblibJNI.nmod_poly_fprint(_IO_FILE.getCPtr(f), f, nmod_poly_struct.getCPtr(poly), poly);
  }

  public static int nmod_poly_fprint_pretty(_IO_FILE f, nmod_poly_struct a, String x) {
    return arblibJNI.nmod_poly_fprint_pretty(_IO_FILE.getCPtr(f), f, nmod_poly_struct.getCPtr(a), a, x);
  }

  public static int nmod_poly_print(nmod_poly_struct a) {
    return arblibJNI.nmod_poly_print(nmod_poly_struct.getCPtr(a), a);
  }

  public static int nmod_poly_print_pretty(nmod_poly_struct a, String x) {
    return arblibJNI.nmod_poly_print_pretty(nmod_poly_struct.getCPtr(a), a, x);
  }

  public static int nmod_poly_read(nmod_poly_struct poly) {
    return arblibJNI.nmod_poly_read(nmod_poly_struct.getCPtr(poly), poly);
  }

  public static void _nmod_poly_shift_left(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, int k) {
    arblibJNI._nmod_poly_shift_left(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, k);
  }

  public static void nmod_poly_shift_left(nmod_poly_struct res, nmod_poly_struct poly, int k) {
    arblibJNI.nmod_poly_shift_left(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, k);
  }

  public static void _nmod_poly_shift_right(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, int k) {
    arblibJNI._nmod_poly_shift_right(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, k);
  }

  public static void nmod_poly_shift_right(nmod_poly_struct res, nmod_poly_struct poly, int k) {
    arblibJNI.nmod_poly_shift_right(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, k);
  }

  public static void _nmod_poly_add(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, nmod_t mod) {
    arblibJNI._nmod_poly_add(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_add(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2) {
    arblibJNI.nmod_poly_add(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2);
  }

  public static void nmod_poly_add_ui(nmod_poly_struct res, nmod_poly_struct poly, long c) {
    arblibJNI.nmod_poly_add_ui(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, c);
  }

  public static void nmod_poly_add_series(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, int n) {
    arblibJNI.nmod_poly_add_series(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _nmod_poly_sub(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, nmod_t mod) {
    arblibJNI._nmod_poly_sub(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_sub(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2) {
    arblibJNI.nmod_poly_sub(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2);
  }

  public static void nmod_poly_sub_series(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, int n) {
    arblibJNI.nmod_poly_sub_series(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void nmod_poly_sub_ui(nmod_poly_struct res, nmod_poly_struct poly, long c) {
    arblibJNI.nmod_poly_sub_ui(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, c);
  }

  public static void nmod_poly_neg(nmod_poly_struct res, nmod_poly_struct poly1) {
    arblibJNI.nmod_poly_neg(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1);
  }

  public static void nmod_poly_scalar_mul_nmod(nmod_poly_struct res, nmod_poly_struct poly1, long c) {
    arblibJNI.nmod_poly_scalar_mul_nmod(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, c);
  }

  public static void _nmod_poly_make_monic(SWIGTYPE_p_unsigned_long output, SWIGTYPE_p_unsigned_long input, int len, nmod_t mod) {
    arblibJNI._nmod_poly_make_monic(SWIGTYPE_p_unsigned_long.getCPtr(output), SWIGTYPE_p_unsigned_long.getCPtr(input), len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_make_monic(nmod_poly_struct output, nmod_poly_struct input) {
    arblibJNI.nmod_poly_make_monic(nmod_poly_struct.getCPtr(output), output, nmod_poly_struct.getCPtr(input), input);
  }

  public static void _nmod_poly_KS2_pack1(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long op, int n, int s, long b, long k, int r) {
    arblibJNI._nmod_poly_KS2_pack1(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(op), n, s, b, k, r);
  }

  public static void _nmod_poly_KS2_pack(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long op, int n, int s, long b, long k, int r) {
    arblibJNI._nmod_poly_KS2_pack(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(op), n, s, b, k, r);
  }

  public static void _nmod_poly_KS2_unpack1(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long op, int n, long b, long k) {
    arblibJNI._nmod_poly_KS2_unpack1(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(op), n, b, k);
  }

  public static void _nmod_poly_KS2_unpack2(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long op, int n, long b, long k) {
    arblibJNI._nmod_poly_KS2_unpack2(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(op), n, b, k);
  }

  public static void _nmod_poly_KS2_unpack3(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long op, int n, long b, long k) {
    arblibJNI._nmod_poly_KS2_unpack3(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(op), n, b, k);
  }

  public static void _nmod_poly_KS2_unpack(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long op, int n, long b, long k) {
    arblibJNI._nmod_poly_KS2_unpack(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(op), n, b, k);
  }

  public static void _nmod_poly_KS2_reduce(SWIGTYPE_p_unsigned_long res, int s, SWIGTYPE_p_unsigned_long op, int n, long w, nmod_t mod) {
    arblibJNI._nmod_poly_KS2_reduce(SWIGTYPE_p_unsigned_long.getCPtr(res), s, SWIGTYPE_p_unsigned_long.getCPtr(op), n, w, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_KS2_recover_reduce1(SWIGTYPE_p_unsigned_long res, int s, SWIGTYPE_p_unsigned_long op1, SWIGTYPE_p_unsigned_long op2, int n, long b, nmod_t mod) {
    arblibJNI._nmod_poly_KS2_recover_reduce1(SWIGTYPE_p_unsigned_long.getCPtr(res), s, SWIGTYPE_p_unsigned_long.getCPtr(op1), SWIGTYPE_p_unsigned_long.getCPtr(op2), n, b, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_KS2_recover_reduce2(SWIGTYPE_p_unsigned_long res, int s, SWIGTYPE_p_unsigned_long op1, SWIGTYPE_p_unsigned_long op2, int n, long b, nmod_t mod) {
    arblibJNI._nmod_poly_KS2_recover_reduce2(SWIGTYPE_p_unsigned_long.getCPtr(res), s, SWIGTYPE_p_unsigned_long.getCPtr(op1), SWIGTYPE_p_unsigned_long.getCPtr(op2), n, b, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_KS2_recover_reduce2b(SWIGTYPE_p_unsigned_long res, int s, SWIGTYPE_p_unsigned_long op1, SWIGTYPE_p_unsigned_long op2, int n, long b, nmod_t mod) {
    arblibJNI._nmod_poly_KS2_recover_reduce2b(SWIGTYPE_p_unsigned_long.getCPtr(res), s, SWIGTYPE_p_unsigned_long.getCPtr(op1), SWIGTYPE_p_unsigned_long.getCPtr(op2), n, b, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_KS2_recover_reduce3(SWIGTYPE_p_unsigned_long res, int s, SWIGTYPE_p_unsigned_long op1, SWIGTYPE_p_unsigned_long op2, int n, long b, nmod_t mod) {
    arblibJNI._nmod_poly_KS2_recover_reduce3(SWIGTYPE_p_unsigned_long.getCPtr(res), s, SWIGTYPE_p_unsigned_long.getCPtr(op1), SWIGTYPE_p_unsigned_long.getCPtr(op2), n, b, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_KS2_recover_reduce(SWIGTYPE_p_unsigned_long res, int s, SWIGTYPE_p_unsigned_long op1, SWIGTYPE_p_unsigned_long op2, int n, long b, nmod_t mod) {
    arblibJNI._nmod_poly_KS2_recover_reduce(SWIGTYPE_p_unsigned_long.getCPtr(res), s, SWIGTYPE_p_unsigned_long.getCPtr(op1), SWIGTYPE_p_unsigned_long.getCPtr(op2), n, b, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_bit_pack(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, long bits) {
    arblibJNI._nmod_poly_bit_pack(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, bits);
  }

  public static void _nmod_poly_bit_unpack(SWIGTYPE_p_unsigned_long res, int len, SWIGTYPE_p_unsigned_long mpn, long bits, nmod_t mod) {
    arblibJNI._nmod_poly_bit_unpack(SWIGTYPE_p_unsigned_long.getCPtr(res), len, SWIGTYPE_p_unsigned_long.getCPtr(mpn), bits, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_bit_pack(SWIGTYPE_p_long f, nmod_poly_struct poly, long bit_size) {
    arblibJNI.nmod_poly_bit_pack(SWIGTYPE_p_long.getCPtr(f), nmod_poly_struct.getCPtr(poly), poly, bit_size);
  }

  public static void nmod_poly_bit_unpack(nmod_poly_struct poly, SWIGTYPE_p_long f, long bit_size) {
    arblibJNI.nmod_poly_bit_unpack(nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(f), bit_size);
  }

  public static void _nmod_poly_mul_classical(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, nmod_t mod) {
    arblibJNI._nmod_poly_mul_classical(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mul_classical(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2) {
    arblibJNI.nmod_poly_mul_classical(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _nmod_poly_mullow_classical(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, int trunc, nmod_t mod) {
    arblibJNI._nmod_poly_mullow_classical(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, trunc, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mullow_classical(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, int trunc) {
    arblibJNI.nmod_poly_mullow_classical(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, trunc);
  }

  public static void _nmod_poly_mulhigh_classical(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, int start, nmod_t mod) {
    arblibJNI._nmod_poly_mulhigh_classical(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, start, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mulhigh_classical(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, int start) {
    arblibJNI.nmod_poly_mulhigh_classical(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, start);
  }

  public static void _nmod_poly_mul_KS(SWIGTYPE_p_unsigned_long out, SWIGTYPE_p_unsigned_long in1, int len1, SWIGTYPE_p_unsigned_long in2, int len2, long bits, nmod_t mod) {
    arblibJNI._nmod_poly_mul_KS(SWIGTYPE_p_unsigned_long.getCPtr(out), SWIGTYPE_p_unsigned_long.getCPtr(in1), len1, SWIGTYPE_p_unsigned_long.getCPtr(in2), len2, bits, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mul_KS(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, long bits) {
    arblibJNI.nmod_poly_mul_KS(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, bits);
  }

  public static void _nmod_poly_mul_KS2(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long op1, int n1, SWIGTYPE_p_unsigned_long op2, int n2, nmod_t mod) {
    arblibJNI._nmod_poly_mul_KS2(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(op1), n1, SWIGTYPE_p_unsigned_long.getCPtr(op2), n2, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mul_KS2(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2) {
    arblibJNI.nmod_poly_mul_KS2(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _nmod_poly_mul_KS4(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long op1, int n1, SWIGTYPE_p_unsigned_long op2, int n2, nmod_t mod) {
    arblibJNI._nmod_poly_mul_KS4(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(op1), n1, SWIGTYPE_p_unsigned_long.getCPtr(op2), n2, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mul_KS4(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2) {
    arblibJNI.nmod_poly_mul_KS4(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _nmod_poly_mullow_KS(SWIGTYPE_p_unsigned_long out, SWIGTYPE_p_unsigned_long in1, int len1, SWIGTYPE_p_unsigned_long in2, int len2, long bits, int n, nmod_t mod) {
    arblibJNI._nmod_poly_mullow_KS(SWIGTYPE_p_unsigned_long.getCPtr(out), SWIGTYPE_p_unsigned_long.getCPtr(in1), len1, SWIGTYPE_p_unsigned_long.getCPtr(in2), len2, bits, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mullow_KS(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, long bits, int n) {
    arblibJNI.nmod_poly_mullow_KS(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, bits, n);
  }

  public static void _nmod_poly_mul(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, nmod_t mod) {
    arblibJNI._nmod_poly_mul(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mul(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2) {
    arblibJNI.nmod_poly_mul(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _nmod_poly_mullow(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, int trunc, nmod_t mod) {
    arblibJNI._nmod_poly_mullow(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, trunc, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mullow(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, int trunc) {
    arblibJNI.nmod_poly_mullow(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, trunc);
  }

  public static void _nmod_poly_mulhigh(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, int n, nmod_t mod) {
    arblibJNI._nmod_poly_mulhigh(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mulhigh(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, int n) {
    arblibJNI.nmod_poly_mulhigh(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _nmod_poly_mulmod(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, SWIGTYPE_p_unsigned_long f, int lenf, nmod_t mod) {
    arblibJNI._nmod_poly_mulmod(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mulmod(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, nmod_poly_struct f) {
    arblibJNI.nmod_poly_mulmod(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, nmod_poly_struct.getCPtr(f), f);
  }

  public static void _nmod_poly_mulmod_preinv(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, SWIGTYPE_p_unsigned_long f, int lenf, SWIGTYPE_p_unsigned_long finv, int lenfinv, nmod_t mod) {
    arblibJNI._nmod_poly_mulmod_preinv(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, SWIGTYPE_p_unsigned_long.getCPtr(finv), lenfinv, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_mulmod_preinv(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, nmod_poly_struct f, nmod_poly_struct finv) {
    arblibJNI.nmod_poly_mulmod_preinv(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(finv), finv);
  }

  public static int _nmod_poly_invmod(SWIGTYPE_p_unsigned_long A, SWIGTYPE_p_unsigned_long B, int lenB, SWIGTYPE_p_unsigned_long P, int lenP, nmod_t mod) {
    return arblibJNI._nmod_poly_invmod(SWIGTYPE_p_unsigned_long.getCPtr(A), SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, SWIGTYPE_p_unsigned_long.getCPtr(P), lenP, nmod_t.getCPtr(mod), mod);
  }

  public static int nmod_poly_invmod(nmod_poly_struct A, nmod_poly_struct B, nmod_poly_struct P) {
    return arblibJNI.nmod_poly_invmod(nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B, nmod_poly_struct.getCPtr(P), P);
  }

  public static void _nmod_poly_pow_binexp(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, long e, nmod_t mod) {
    arblibJNI._nmod_poly_pow_binexp(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, e, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_pow_binexp(nmod_poly_struct res, nmod_poly_struct poly, long e) {
    arblibJNI.nmod_poly_pow_binexp(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, e);
  }

  public static void _nmod_poly_pow(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, long e, nmod_t mod) {
    arblibJNI._nmod_poly_pow(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, e, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_pow(nmod_poly_struct res, nmod_poly_struct poly, long e) {
    arblibJNI.nmod_poly_pow(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, e);
  }

  public static void _nmod_poly_pow_trunc_binexp(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, long e, int trunc, nmod_t mod) {
    arblibJNI._nmod_poly_pow_trunc_binexp(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), e, trunc, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_pow_trunc_binexp(nmod_poly_struct res, nmod_poly_struct poly, long e, int trunc) {
    arblibJNI.nmod_poly_pow_trunc_binexp(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, e, trunc);
  }

  public static void _nmod_poly_pow_trunc(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, long e, int trunc, nmod_t mod) {
    arblibJNI._nmod_poly_pow_trunc(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), e, trunc, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_pow_trunc(nmod_poly_struct res, nmod_poly_struct poly, long e, int trunc) {
    arblibJNI.nmod_poly_pow_trunc(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, e, trunc);
  }

  public static void nmod_poly_powmod_ui_binexp(nmod_poly_struct res, nmod_poly_struct poly, long e, nmod_poly_struct f) {
    arblibJNI.nmod_poly_powmod_ui_binexp(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, e, nmod_poly_struct.getCPtr(f), f);
  }

  public static void _nmod_poly_powmod_ui_binexp(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, long e, SWIGTYPE_p_unsigned_long f, int lenf, nmod_t mod) {
    arblibJNI._nmod_poly_powmod_ui_binexp(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), e, SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_powmod_fmpz_binexp(nmod_poly_struct res, nmod_poly_struct poly, SWIGTYPE_p_long e, nmod_poly_struct f) {
    arblibJNI.nmod_poly_powmod_fmpz_binexp(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(e), nmod_poly_struct.getCPtr(f), f);
  }

  public static void _nmod_poly_powmod_fmpz_binexp(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, SWIGTYPE_p_long e, SWIGTYPE_p_unsigned_long f, int lenf, nmod_t mod) {
    arblibJNI._nmod_poly_powmod_fmpz_binexp(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(e), SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_powmod_mpz_binexp(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, __mpz_struct e, SWIGTYPE_p_unsigned_long f, int lenf, nmod_t mod) {
    arblibJNI._nmod_poly_powmod_mpz_binexp(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), __mpz_struct.getCPtr(e), e, SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_powmod_mpz_binexp(nmod_poly_struct res, nmod_poly_struct poly, __mpz_struct e, nmod_poly_struct f) {
    arblibJNI.nmod_poly_powmod_mpz_binexp(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, __mpz_struct.getCPtr(e), e, nmod_poly_struct.getCPtr(f), f);
  }

  public static void _nmod_poly_powmod_ui_binexp_preinv(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, long e, SWIGTYPE_p_unsigned_long f, int lenf, SWIGTYPE_p_unsigned_long finv, int lenfinv, nmod_t mod) {
    arblibJNI._nmod_poly_powmod_ui_binexp_preinv(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), e, SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, SWIGTYPE_p_unsigned_long.getCPtr(finv), lenfinv, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_powmod_ui_binexp_preinv(nmod_poly_struct res, nmod_poly_struct poly, long e, nmod_poly_struct f, nmod_poly_struct finv) {
    arblibJNI.nmod_poly_powmod_ui_binexp_preinv(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, e, nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(finv), finv);
  }

  public static void _nmod_poly_powmod_fmpz_binexp_preinv(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, SWIGTYPE_p_long e, SWIGTYPE_p_unsigned_long f, int lenf, SWIGTYPE_p_unsigned_long finv, int lenfinv, nmod_t mod) {
    arblibJNI._nmod_poly_powmod_fmpz_binexp_preinv(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(e), SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, SWIGTYPE_p_unsigned_long.getCPtr(finv), lenfinv, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_powmod_fmpz_binexp_preinv(nmod_poly_struct res, nmod_poly_struct poly, SWIGTYPE_p_long e, nmod_poly_struct f, nmod_poly_struct finv) {
    arblibJNI.nmod_poly_powmod_fmpz_binexp_preinv(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(e), nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(finv), finv);
  }

  public static void _nmod_poly_powmod_x_ui_preinv(SWIGTYPE_p_unsigned_long res, long e, SWIGTYPE_p_unsigned_long f, int lenf, SWIGTYPE_p_unsigned_long finv, int lenfinv, nmod_t mod) {
    arblibJNI._nmod_poly_powmod_x_ui_preinv(SWIGTYPE_p_unsigned_long.getCPtr(res), e, SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, SWIGTYPE_p_unsigned_long.getCPtr(finv), lenfinv, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_powmod_x_ui_preinv(nmod_poly_struct res, long e, nmod_poly_struct f, nmod_poly_struct finv) {
    arblibJNI.nmod_poly_powmod_x_ui_preinv(nmod_poly_struct.getCPtr(res), res, e, nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(finv), finv);
  }

  public static void _nmod_poly_powmod_mpz_binexp_preinv(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, __mpz_struct e, SWIGTYPE_p_unsigned_long f, int lenf, SWIGTYPE_p_unsigned_long finv, int lenfinv, nmod_t mod) {
    arblibJNI._nmod_poly_powmod_mpz_binexp_preinv(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), __mpz_struct.getCPtr(e), e, SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, SWIGTYPE_p_unsigned_long.getCPtr(finv), lenfinv, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_powmod_mpz_binexp_preinv(nmod_poly_struct res, nmod_poly_struct poly, __mpz_struct e, nmod_poly_struct f, nmod_poly_struct finv) {
    arblibJNI.nmod_poly_powmod_mpz_binexp_preinv(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, __mpz_struct.getCPtr(e), e, nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(finv), finv);
  }

  public static void _nmod_poly_powmod_x_fmpz_preinv(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_long e, SWIGTYPE_p_unsigned_long f, int lenf, SWIGTYPE_p_unsigned_long finv, int lenfinv, nmod_t mod) {
    arblibJNI._nmod_poly_powmod_x_fmpz_preinv(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(e), SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, SWIGTYPE_p_unsigned_long.getCPtr(finv), lenfinv, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_powmod_x_fmpz_preinv(nmod_poly_struct res, SWIGTYPE_p_long e, nmod_poly_struct f, nmod_poly_struct finv) {
    arblibJNI.nmod_poly_powmod_x_fmpz_preinv(nmod_poly_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(e), nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(finv), finv);
  }

  public static void _nmod_poly_powers_mod_preinv_naive(SWIGTYPE_p_p_unsigned_long res, SWIGTYPE_p_unsigned_long f, int flen, int n, SWIGTYPE_p_unsigned_long g, int glen, SWIGTYPE_p_unsigned_long ginv, int ginvlen, nmod_t mod) {
    arblibJNI._nmod_poly_powers_mod_preinv_naive(SWIGTYPE_p_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(f), flen, n, SWIGTYPE_p_unsigned_long.getCPtr(g), glen, SWIGTYPE_p_unsigned_long.getCPtr(ginv), ginvlen, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_powers_mod_naive(nmod_poly_struct res, nmod_poly_struct f, int n, nmod_poly_struct g) {
    arblibJNI.nmod_poly_powers_mod_naive(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(f), f, n, nmod_poly_struct.getCPtr(g), g);
  }

  public static void _nmod_poly_powers_mod_preinv_threaded_pool(SWIGTYPE_p_p_unsigned_long res, SWIGTYPE_p_unsigned_long f, int flen, int n, SWIGTYPE_p_unsigned_long g, int glen, SWIGTYPE_p_unsigned_long ginv, int ginvlen, nmod_t mod, SWIGTYPE_p_int threads, int num_threads) {
    arblibJNI._nmod_poly_powers_mod_preinv_threaded_pool(SWIGTYPE_p_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(f), flen, n, SWIGTYPE_p_unsigned_long.getCPtr(g), glen, SWIGTYPE_p_unsigned_long.getCPtr(ginv), ginvlen, nmod_t.getCPtr(mod), mod, SWIGTYPE_p_int.getCPtr(threads), num_threads);
  }

  public static void _nmod_poly_powers_mod_preinv_threaded(SWIGTYPE_p_p_unsigned_long res, SWIGTYPE_p_unsigned_long f, int flen, int n, SWIGTYPE_p_unsigned_long g, int glen, SWIGTYPE_p_unsigned_long ginv, int ginvlen, nmod_t mod) {
    arblibJNI._nmod_poly_powers_mod_preinv_threaded(SWIGTYPE_p_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(f), flen, n, SWIGTYPE_p_unsigned_long.getCPtr(g), glen, SWIGTYPE_p_unsigned_long.getCPtr(ginv), ginvlen, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_powers_mod_bsgs(nmod_poly_struct res, nmod_poly_struct f, int n, nmod_poly_struct g) {
    arblibJNI.nmod_poly_powers_mod_bsgs(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(f), f, n, nmod_poly_struct.getCPtr(g), g);
  }

  public static void _nmod_poly_divrem_basecase(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long R, SWIGTYPE_p_unsigned_long W, SWIGTYPE_p_unsigned_long A, int A_len, SWIGTYPE_p_unsigned_long B, int B_len, nmod_t mod) {
    arblibJNI._nmod_poly_divrem_basecase(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(W), SWIGTYPE_p_unsigned_long.getCPtr(A), A_len, SWIGTYPE_p_unsigned_long.getCPtr(B), B_len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_divrem_basecase(nmod_poly_struct Q, nmod_poly_struct R, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_divrem_basecase(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(R), R, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static void _nmod_poly_divrem_divconquer_recursive(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long BQ, SWIGTYPE_p_unsigned_long W, SWIGTYPE_p_unsigned_long V, SWIGTYPE_p_unsigned_long A, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    arblibJNI._nmod_poly_divrem_divconquer_recursive(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(BQ), SWIGTYPE_p_unsigned_long.getCPtr(W), SWIGTYPE_p_unsigned_long.getCPtr(V), SWIGTYPE_p_unsigned_long.getCPtr(A), SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_divrem_divconquer(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long R, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    arblibJNI._nmod_poly_divrem_divconquer(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_divrem_divconquer(nmod_poly_struct Q, nmod_poly_struct R, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_divrem_divconquer(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(R), R, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static void _nmod_poly_divrem_q0(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long R, SWIGTYPE_p_unsigned_long A, SWIGTYPE_p_unsigned_long B, int lenA, nmod_t mod) {
    arblibJNI._nmod_poly_divrem_q0(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(A), SWIGTYPE_p_unsigned_long.getCPtr(B), lenA, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_divrem_q1(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long R, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    arblibJNI._nmod_poly_divrem_q1(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_divrem(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long R, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    arblibJNI._nmod_poly_divrem(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_divrem(nmod_poly_struct Q, nmod_poly_struct R, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_divrem(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(R), R, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static void _nmod_poly_div_basecase(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long W, SWIGTYPE_p_unsigned_long A, int A_len, SWIGTYPE_p_unsigned_long B, int B_len, nmod_t mod) {
    arblibJNI._nmod_poly_div_basecase(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(W), SWIGTYPE_p_unsigned_long.getCPtr(A), A_len, SWIGTYPE_p_unsigned_long.getCPtr(B), B_len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_div_basecase(nmod_poly_struct Q, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_div_basecase(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static void _nmod_poly_div_divconquer_recursive(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long W, SWIGTYPE_p_unsigned_long V, SWIGTYPE_p_unsigned_long A, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    arblibJNI._nmod_poly_div_divconquer_recursive(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(W), SWIGTYPE_p_unsigned_long.getCPtr(V), SWIGTYPE_p_unsigned_long.getCPtr(A), SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_div_divconquer(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    arblibJNI._nmod_poly_div_divconquer(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_div_divconquer(nmod_poly_struct Q, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_div_divconquer(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static void _nmod_poly_div(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    arblibJNI._nmod_poly_div(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_div(nmod_poly_struct Q, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_div(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static void _nmod_poly_rem_basecase(SWIGTYPE_p_unsigned_long R, SWIGTYPE_p_unsigned_long W, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    arblibJNI._nmod_poly_rem_basecase(SWIGTYPE_p_unsigned_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(W), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_rem_basecase(nmod_poly_struct R, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_rem_basecase(nmod_poly_struct.getCPtr(R), R, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static void _nmod_poly_rem_q1(SWIGTYPE_p_unsigned_long R, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    arblibJNI._nmod_poly_rem_q1(SWIGTYPE_p_unsigned_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_rem(SWIGTYPE_p_unsigned_long R, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    arblibJNI._nmod_poly_rem(SWIGTYPE_p_unsigned_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_rem(nmod_poly_struct R, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_rem(nmod_poly_struct.getCPtr(R), R, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static void _nmod_poly_inv_series_basecase(SWIGTYPE_p_unsigned_long Qinv, SWIGTYPE_p_unsigned_long Q, int Qlen, int n, nmod_t mod) {
    arblibJNI._nmod_poly_inv_series_basecase(SWIGTYPE_p_unsigned_long.getCPtr(Qinv), SWIGTYPE_p_unsigned_long.getCPtr(Q), Qlen, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_inv_series_basecase(nmod_poly_struct Qinv, nmod_poly_struct Q, int n) {
    arblibJNI.nmod_poly_inv_series_basecase(nmod_poly_struct.getCPtr(Qinv), Qinv, nmod_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _nmod_poly_inv_series_newton(SWIGTYPE_p_unsigned_long Qinv, SWIGTYPE_p_unsigned_long Q, int Qlen, int n, nmod_t mod) {
    arblibJNI._nmod_poly_inv_series_newton(SWIGTYPE_p_unsigned_long.getCPtr(Qinv), SWIGTYPE_p_unsigned_long.getCPtr(Q), Qlen, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_inv_series_newton(nmod_poly_struct Qinv, nmod_poly_struct Q, int n) {
    arblibJNI.nmod_poly_inv_series_newton(nmod_poly_struct.getCPtr(Qinv), Qinv, nmod_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _nmod_poly_inv_series(SWIGTYPE_p_unsigned_long Qinv, SWIGTYPE_p_unsigned_long Q, int Qlen, int n, nmod_t mod) {
    arblibJNI._nmod_poly_inv_series(SWIGTYPE_p_unsigned_long.getCPtr(Qinv), SWIGTYPE_p_unsigned_long.getCPtr(Q), Qlen, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_inv_series(nmod_poly_struct Qinv, nmod_poly_struct Q, int n) {
    arblibJNI.nmod_poly_inv_series(nmod_poly_struct.getCPtr(Qinv), Qinv, nmod_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _nmod_poly_div_series_basecase(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long A, int Alen, SWIGTYPE_p_unsigned_long B, int Blen, int n, nmod_t mod) {
    arblibJNI._nmod_poly_div_series_basecase(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(A), Alen, SWIGTYPE_p_unsigned_long.getCPtr(B), Blen, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_div_series_basecase(nmod_poly_struct Q, nmod_poly_struct A, nmod_poly_struct B, int n) {
    arblibJNI.nmod_poly_div_series_basecase(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B, n);
  }

  public static void _nmod_poly_div_series(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long A, int Alen, SWIGTYPE_p_unsigned_long B, int Blen, int n, nmod_t mod) {
    arblibJNI._nmod_poly_div_series(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(A), Alen, SWIGTYPE_p_unsigned_long.getCPtr(B), Blen, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_div_series(nmod_poly_struct Q, nmod_poly_struct A, nmod_poly_struct B, int n) {
    arblibJNI.nmod_poly_div_series(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B, n);
  }

  public static void _nmod_poly_div_newton(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long A, int Alen, SWIGTYPE_p_unsigned_long B, int Blen, nmod_t mod) {
    arblibJNI._nmod_poly_div_newton(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(A), Alen, SWIGTYPE_p_unsigned_long.getCPtr(B), Blen, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_div_newton(nmod_poly_struct Q, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_div_newton(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static void _nmod_poly_divrem_newton(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long R, SWIGTYPE_p_unsigned_long A, int Alen, SWIGTYPE_p_unsigned_long B, int Blen, nmod_t mod) {
    arblibJNI._nmod_poly_divrem_newton(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(A), Alen, SWIGTYPE_p_unsigned_long.getCPtr(B), Blen, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_divrem_newton(nmod_poly_struct Q, nmod_poly_struct R, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_divrem_newton(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(R), R, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static void _nmod_poly_div_newton_n_preinv(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, SWIGTYPE_p_unsigned_long Binv, int lenBinv, nmod_t mod) {
    arblibJNI._nmod_poly_div_newton_n_preinv(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, SWIGTYPE_p_unsigned_long.getCPtr(Binv), lenBinv, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_div_newton_n_preinv(nmod_poly_struct Q, nmod_poly_struct A, nmod_poly_struct B, nmod_poly_struct Binv) {
    arblibJNI.nmod_poly_div_newton_n_preinv(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B, nmod_poly_struct.getCPtr(Binv), Binv);
  }

  public static void _nmod_poly_divrem_newton_n_preinv(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long R, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, SWIGTYPE_p_unsigned_long Binv, int lenBinv, nmod_t mod) {
    arblibJNI._nmod_poly_divrem_newton_n_preinv(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, SWIGTYPE_p_unsigned_long.getCPtr(Binv), lenBinv, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_divrem_newton_n_preinv(nmod_poly_struct Q, nmod_poly_struct R, nmod_poly_struct A, nmod_poly_struct B, nmod_poly_struct Binv) {
    arblibJNI.nmod_poly_divrem_newton_n_preinv(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(R), R, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B, nmod_poly_struct.getCPtr(Binv), Binv);
  }

  public static long _nmod_poly_div_root(SWIGTYPE_p_unsigned_long Q, SWIGTYPE_p_unsigned_long A, int len, long c, nmod_t mod) {
    return arblibJNI._nmod_poly_div_root(SWIGTYPE_p_unsigned_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(A), len, c, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_poly_div_root(nmod_poly_struct Q, nmod_poly_struct A, long c) {
    return arblibJNI.nmod_poly_div_root(nmod_poly_struct.getCPtr(Q), Q, nmod_poly_struct.getCPtr(A), A, c);
  }

  public static void _nmod_poly_derivative(SWIGTYPE_p_unsigned_long x_prime, SWIGTYPE_p_unsigned_long x, int len, nmod_t mod) {
    arblibJNI._nmod_poly_derivative(SWIGTYPE_p_unsigned_long.getCPtr(x_prime), SWIGTYPE_p_unsigned_long.getCPtr(x), len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_derivative(nmod_poly_struct x_prime, nmod_poly_struct x) {
    arblibJNI.nmod_poly_derivative(nmod_poly_struct.getCPtr(x_prime), x_prime, nmod_poly_struct.getCPtr(x), x);
  }

  public static void _nmod_poly_integral(SWIGTYPE_p_unsigned_long x_int, SWIGTYPE_p_unsigned_long x, int len, nmod_t mod) {
    arblibJNI._nmod_poly_integral(SWIGTYPE_p_unsigned_long.getCPtr(x_int), SWIGTYPE_p_unsigned_long.getCPtr(x), len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_integral(nmod_poly_struct x_int, nmod_poly_struct x) {
    arblibJNI.nmod_poly_integral(nmod_poly_struct.getCPtr(x_int), x_int, nmod_poly_struct.getCPtr(x), x);
  }

  public static void _nmod_poly_evaluate_fmpz(SWIGTYPE_p_long rop, SWIGTYPE_p_unsigned_long poly, int len, SWIGTYPE_p_long c) {
    arblibJNI._nmod_poly_evaluate_fmpz(SWIGTYPE_p_long.getCPtr(rop), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void nmod_poly_evaluate_fmpz(SWIGTYPE_p_long rop, nmod_poly_struct poly, SWIGTYPE_p_long c) {
    arblibJNI.nmod_poly_evaluate_fmpz(SWIGTYPE_p_long.getCPtr(rop), nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(c));
  }

  public static long _nmod_poly_evaluate_nmod(SWIGTYPE_p_unsigned_long poly, int len, long c, nmod_t mod) {
    return arblibJNI._nmod_poly_evaluate_nmod(SWIGTYPE_p_unsigned_long.getCPtr(poly), len, c, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_poly_evaluate_nmod(nmod_poly_struct poly, long c) {
    return arblibJNI.nmod_poly_evaluate_nmod(nmod_poly_struct.getCPtr(poly), poly, c);
  }

  public static void _nmod_poly_evaluate_nmod_vec(SWIGTYPE_p_unsigned_long ys, SWIGTYPE_p_unsigned_long coeffs, int len, SWIGTYPE_p_unsigned_long xs, int n, nmod_t mod) {
    arblibJNI._nmod_poly_evaluate_nmod_vec(SWIGTYPE_p_unsigned_long.getCPtr(ys), SWIGTYPE_p_unsigned_long.getCPtr(coeffs), len, SWIGTYPE_p_unsigned_long.getCPtr(xs), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_evaluate_nmod_vec(SWIGTYPE_p_unsigned_long ys, nmod_poly_struct poly, SWIGTYPE_p_unsigned_long xs, int n) {
    arblibJNI.nmod_poly_evaluate_nmod_vec(SWIGTYPE_p_unsigned_long.getCPtr(ys), nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_unsigned_long.getCPtr(xs), n);
  }

  public static void _nmod_poly_evaluate_nmod_vec_iter(SWIGTYPE_p_unsigned_long ys, SWIGTYPE_p_unsigned_long coeffs, int len, SWIGTYPE_p_unsigned_long xs, int n, nmod_t mod) {
    arblibJNI._nmod_poly_evaluate_nmod_vec_iter(SWIGTYPE_p_unsigned_long.getCPtr(ys), SWIGTYPE_p_unsigned_long.getCPtr(coeffs), len, SWIGTYPE_p_unsigned_long.getCPtr(xs), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_evaluate_nmod_vec_iter(SWIGTYPE_p_unsigned_long ys, nmod_poly_struct poly, SWIGTYPE_p_unsigned_long xs, int n) {
    arblibJNI.nmod_poly_evaluate_nmod_vec_iter(SWIGTYPE_p_unsigned_long.getCPtr(ys), nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_unsigned_long.getCPtr(xs), n);
  }

  public static void _nmod_poly_evaluate_nmod_vec_fast_precomp(SWIGTYPE_p_unsigned_long vs, SWIGTYPE_p_unsigned_long poly, int plen, SWIGTYPE_p_p_unsigned_long tree, int len, nmod_t mod) {
    arblibJNI._nmod_poly_evaluate_nmod_vec_fast_precomp(SWIGTYPE_p_unsigned_long.getCPtr(vs), SWIGTYPE_p_unsigned_long.getCPtr(poly), plen, SWIGTYPE_p_p_unsigned_long.getCPtr(tree), len, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_evaluate_nmod_vec_fast(SWIGTYPE_p_unsigned_long ys, SWIGTYPE_p_unsigned_long coeffs, int len, SWIGTYPE_p_unsigned_long xs, int n, nmod_t mod) {
    arblibJNI._nmod_poly_evaluate_nmod_vec_fast(SWIGTYPE_p_unsigned_long.getCPtr(ys), SWIGTYPE_p_unsigned_long.getCPtr(coeffs), len, SWIGTYPE_p_unsigned_long.getCPtr(xs), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_evaluate_nmod_vec_fast(SWIGTYPE_p_unsigned_long ys, nmod_poly_struct poly, SWIGTYPE_p_unsigned_long xs, int n) {
    arblibJNI.nmod_poly_evaluate_nmod_vec_fast(SWIGTYPE_p_unsigned_long.getCPtr(ys), nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_unsigned_long.getCPtr(xs), n);
  }

  public static void nmod_mat_one_addmul(nmod_mat_struct dest, nmod_mat_struct mat, long c) {
    arblibJNI.nmod_mat_one_addmul(nmod_mat_struct.getCPtr(dest), dest, nmod_mat_struct.getCPtr(mat), mat, c);
  }

  public static void nmod_poly_evaluate_mat_horner(nmod_mat_struct dest, nmod_poly_struct poly, nmod_mat_struct c) {
    arblibJNI.nmod_poly_evaluate_mat_horner(nmod_mat_struct.getCPtr(dest), dest, nmod_poly_struct.getCPtr(poly), poly, nmod_mat_struct.getCPtr(c), c);
  }

  public static void nmod_poly_evaluate_mat_paterson_stockmeyer(nmod_mat_struct dest, nmod_poly_struct poly, nmod_mat_struct c) {
    arblibJNI.nmod_poly_evaluate_mat_paterson_stockmeyer(nmod_mat_struct.getCPtr(dest), dest, nmod_poly_struct.getCPtr(poly), poly, nmod_mat_struct.getCPtr(c), c);
  }

  public static void nmod_poly_evaluate_mat(nmod_mat_struct dest, nmod_poly_struct poly, nmod_mat_struct c) {
    arblibJNI.nmod_poly_evaluate_mat(nmod_mat_struct.getCPtr(dest), dest, nmod_poly_struct.getCPtr(poly), poly, nmod_mat_struct.getCPtr(c), c);
  }

  public static SWIGTYPE_p_p_unsigned_long _nmod_poly_tree_alloc(int len) {
    long cPtr = arblibJNI._nmod_poly_tree_alloc(len);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_unsigned_long(cPtr, false);
  }

  public static void _nmod_poly_tree_free(SWIGTYPE_p_p_unsigned_long tree, int len) {
    arblibJNI._nmod_poly_tree_free(SWIGTYPE_p_p_unsigned_long.getCPtr(tree), len);
  }

  public static void _nmod_poly_tree_build(SWIGTYPE_p_p_unsigned_long tree, SWIGTYPE_p_unsigned_long roots, int len, nmod_t mod) {
    arblibJNI._nmod_poly_tree_build(SWIGTYPE_p_p_unsigned_long.getCPtr(tree), SWIGTYPE_p_unsigned_long.getCPtr(roots), len, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_interpolate_nmod_vec_newton(SWIGTYPE_p_unsigned_long poly, SWIGTYPE_p_unsigned_long xs, SWIGTYPE_p_unsigned_long ys, int n, nmod_t mod) {
    arblibJNI._nmod_poly_interpolate_nmod_vec_newton(SWIGTYPE_p_unsigned_long.getCPtr(poly), SWIGTYPE_p_unsigned_long.getCPtr(xs), SWIGTYPE_p_unsigned_long.getCPtr(ys), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_interpolate_nmod_vec_newton(nmod_poly_struct poly, SWIGTYPE_p_unsigned_long xs, SWIGTYPE_p_unsigned_long ys, int n) {
    arblibJNI.nmod_poly_interpolate_nmod_vec_newton(nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_unsigned_long.getCPtr(xs), SWIGTYPE_p_unsigned_long.getCPtr(ys), n);
  }

  public static void _nmod_poly_interpolate_nmod_vec_barycentric(SWIGTYPE_p_unsigned_long poly, SWIGTYPE_p_unsigned_long xs, SWIGTYPE_p_unsigned_long ys, int n, nmod_t mod) {
    arblibJNI._nmod_poly_interpolate_nmod_vec_barycentric(SWIGTYPE_p_unsigned_long.getCPtr(poly), SWIGTYPE_p_unsigned_long.getCPtr(xs), SWIGTYPE_p_unsigned_long.getCPtr(ys), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_interpolate_nmod_vec_barycentric(nmod_poly_struct poly, SWIGTYPE_p_unsigned_long xs, SWIGTYPE_p_unsigned_long ys, int n) {
    arblibJNI.nmod_poly_interpolate_nmod_vec_barycentric(nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_unsigned_long.getCPtr(xs), SWIGTYPE_p_unsigned_long.getCPtr(ys), n);
  }

  public static void _nmod_poly_interpolate_nmod_vec(SWIGTYPE_p_unsigned_long poly, SWIGTYPE_p_unsigned_long xs, SWIGTYPE_p_unsigned_long ys, int n, nmod_t mod) {
    arblibJNI._nmod_poly_interpolate_nmod_vec(SWIGTYPE_p_unsigned_long.getCPtr(poly), SWIGTYPE_p_unsigned_long.getCPtr(xs), SWIGTYPE_p_unsigned_long.getCPtr(ys), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_interpolate_nmod_vec(nmod_poly_struct poly, SWIGTYPE_p_unsigned_long xs, SWIGTYPE_p_unsigned_long ys, int n) {
    arblibJNI.nmod_poly_interpolate_nmod_vec(nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_unsigned_long.getCPtr(xs), SWIGTYPE_p_unsigned_long.getCPtr(ys), n);
  }

  public static void nmod_poly_interpolate_nmod_vec_fast(nmod_poly_struct poly, SWIGTYPE_p_unsigned_long xs, SWIGTYPE_p_unsigned_long ys, int n) {
    arblibJNI.nmod_poly_interpolate_nmod_vec_fast(nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_unsigned_long.getCPtr(xs), SWIGTYPE_p_unsigned_long.getCPtr(ys), n);
  }

  public static void _nmod_poly_interpolate_nmod_vec_fast(SWIGTYPE_p_unsigned_long poly, SWIGTYPE_p_unsigned_long xs, SWIGTYPE_p_unsigned_long ys, int len, nmod_t mod) {
    arblibJNI._nmod_poly_interpolate_nmod_vec_fast(SWIGTYPE_p_unsigned_long.getCPtr(poly), SWIGTYPE_p_unsigned_long.getCPtr(xs), SWIGTYPE_p_unsigned_long.getCPtr(ys), len, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_interpolate_nmod_vec_fast_precomp(SWIGTYPE_p_unsigned_long poly, SWIGTYPE_p_unsigned_long ys, SWIGTYPE_p_p_unsigned_long tree, SWIGTYPE_p_unsigned_long weights, int len, nmod_t mod) {
    arblibJNI._nmod_poly_interpolate_nmod_vec_fast_precomp(SWIGTYPE_p_unsigned_long.getCPtr(poly), SWIGTYPE_p_unsigned_long.getCPtr(ys), SWIGTYPE_p_p_unsigned_long.getCPtr(tree), SWIGTYPE_p_unsigned_long.getCPtr(weights), len, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_interpolation_weights(SWIGTYPE_p_unsigned_long w, SWIGTYPE_p_p_unsigned_long tree, int len, nmod_t mod) {
    arblibJNI._nmod_poly_interpolation_weights(SWIGTYPE_p_unsigned_long.getCPtr(w), SWIGTYPE_p_p_unsigned_long.getCPtr(tree), len, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_compose_horner(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, nmod_t mod) {
    arblibJNI._nmod_poly_compose_horner(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_horner(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2) {
    arblibJNI.nmod_poly_compose_horner(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _nmod_poly_compose_divconquer(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, nmod_t mod) {
    arblibJNI._nmod_poly_compose_divconquer(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_divconquer(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2) {
    arblibJNI.nmod_poly_compose_divconquer(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _nmod_poly_compose(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, nmod_t mod) {
    arblibJNI._nmod_poly_compose(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2) {
    arblibJNI.nmod_poly_compose(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _nmod_poly_taylor_shift_horner(SWIGTYPE_p_unsigned_long poly, long c, int len, nmod_t mod) {
    arblibJNI._nmod_poly_taylor_shift_horner(SWIGTYPE_p_unsigned_long.getCPtr(poly), c, len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_taylor_shift_horner(nmod_poly_struct g, nmod_poly_struct f, long c) {
    arblibJNI.nmod_poly_taylor_shift_horner(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(f), f, c);
  }

  public static void _nmod_poly_taylor_shift_convolution(SWIGTYPE_p_unsigned_long poly, long c, int len, nmod_t mod) {
    arblibJNI._nmod_poly_taylor_shift_convolution(SWIGTYPE_p_unsigned_long.getCPtr(poly), c, len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_taylor_shift_convolution(nmod_poly_struct g, nmod_poly_struct f, long c) {
    arblibJNI.nmod_poly_taylor_shift_convolution(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(f), f, c);
  }

  public static void _nmod_poly_taylor_shift(SWIGTYPE_p_unsigned_long poly, long c, int len, nmod_t mod) {
    arblibJNI._nmod_poly_taylor_shift(SWIGTYPE_p_unsigned_long.getCPtr(poly), c, len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_taylor_shift(nmod_poly_struct g, nmod_poly_struct f, long c) {
    arblibJNI.nmod_poly_taylor_shift(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(f), f, c);
  }

  public static void _nmod_poly_compose_mod_brent_kung(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long f, int lenf, SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int lenh, nmod_t mod) {
    arblibJNI._nmod_poly_compose_mod_brent_kung(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), lenh, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_mod_brent_kung(nmod_poly_struct res, nmod_poly_struct f, nmod_poly_struct g, nmod_poly_struct h) {
    arblibJNI.nmod_poly_compose_mod_brent_kung(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h);
  }

  public static void _nmod_poly_reduce_matrix_mod_poly(nmod_mat_struct A, nmod_mat_struct B, nmod_poly_struct f) {
    arblibJNI._nmod_poly_reduce_matrix_mod_poly(nmod_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(B), B, nmod_poly_struct.getCPtr(f), f);
  }

  public static void _nmod_poly_precompute_matrix(nmod_mat_struct A, SWIGTYPE_p_unsigned_long poly1, SWIGTYPE_p_unsigned_long poly2, int len2, SWIGTYPE_p_unsigned_long poly2inv, int len2inv, nmod_t mod) {
    arblibJNI._nmod_poly_precompute_matrix(nmod_mat_struct.getCPtr(A), A, SWIGTYPE_p_unsigned_long.getCPtr(poly1), SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, SWIGTYPE_p_unsigned_long.getCPtr(poly2inv), len2inv, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_precompute_matrix_worker(SWIGTYPE_p_void arg_ptr) {
    arblibJNI._nmod_poly_precompute_matrix_worker(SWIGTYPE_p_void.getCPtr(arg_ptr));
  }

  public static void nmod_poly_precompute_matrix(nmod_mat_struct A, nmod_poly_struct poly1, nmod_poly_struct poly2, nmod_poly_struct poly2inv) {
    arblibJNI.nmod_poly_precompute_matrix(nmod_mat_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, nmod_poly_struct.getCPtr(poly2inv), poly2inv);
  }

  public static void _nmod_poly_compose_mod_brent_kung_precomp_preinv(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, nmod_mat_struct A, SWIGTYPE_p_unsigned_long poly3, int len3, SWIGTYPE_p_unsigned_long poly3inv, int len3inv, nmod_t mod) {
    arblibJNI._nmod_poly_compose_mod_brent_kung_precomp_preinv(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, nmod_mat_struct.getCPtr(A), A, SWIGTYPE_p_unsigned_long.getCPtr(poly3), len3, SWIGTYPE_p_unsigned_long.getCPtr(poly3inv), len3inv, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_compose_mod_brent_kung_precomp_preinv_worker(SWIGTYPE_p_void arg_ptr) {
    arblibJNI._nmod_poly_compose_mod_brent_kung_precomp_preinv_worker(SWIGTYPE_p_void.getCPtr(arg_ptr));
  }

  public static void nmod_poly_compose_mod_brent_kung_precomp_preinv(nmod_poly_struct res, nmod_poly_struct poly1, nmod_mat_struct A, nmod_poly_struct poly3, nmod_poly_struct poly3inv) {
    arblibJNI.nmod_poly_compose_mod_brent_kung_precomp_preinv(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_mat_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(poly3), poly3, nmod_poly_struct.getCPtr(poly3inv), poly3inv);
  }

  public static void _nmod_poly_compose_mod_brent_kung_preinv(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, SWIGTYPE_p_unsigned_long poly3, int len3, SWIGTYPE_p_unsigned_long poly3inv, int len3inv, nmod_t mod) {
    arblibJNI._nmod_poly_compose_mod_brent_kung_preinv(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), SWIGTYPE_p_unsigned_long.getCPtr(poly3), len3, SWIGTYPE_p_unsigned_long.getCPtr(poly3inv), len3inv, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_mod_brent_kung_preinv(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, nmod_poly_struct poly3, nmod_poly_struct poly3inv) {
    arblibJNI.nmod_poly_compose_mod_brent_kung_preinv(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, nmod_poly_struct.getCPtr(poly3), poly3, nmod_poly_struct.getCPtr(poly3inv), poly3inv);
  }

  public static void _nmod_poly_compose_mod_brent_kung_vec_preinv(nmod_poly_struct res, nmod_poly_struct polys, int len1, int l, SWIGTYPE_p_unsigned_long g, int glen, SWIGTYPE_p_unsigned_long poly, int len, SWIGTYPE_p_unsigned_long polyinv, int leninv, nmod_t mod) {
    arblibJNI._nmod_poly_compose_mod_brent_kung_vec_preinv(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(polys), polys, len1, l, SWIGTYPE_p_unsigned_long.getCPtr(g), glen, SWIGTYPE_p_unsigned_long.getCPtr(poly), len, SWIGTYPE_p_unsigned_long.getCPtr(polyinv), leninv, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_mod_brent_kung_vec_preinv(nmod_poly_struct res, nmod_poly_struct polys, int len1, int n, nmod_poly_struct g, nmod_poly_struct poly, nmod_poly_struct polyinv) {
    arblibJNI.nmod_poly_compose_mod_brent_kung_vec_preinv(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(polys), polys, len1, n, nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(poly), poly, nmod_poly_struct.getCPtr(polyinv), polyinv);
  }

  public static void _nmod_poly_compose_mod_brent_kung_vec_preinv_worker(SWIGTYPE_p_void arg_ptr) {
    arblibJNI._nmod_poly_compose_mod_brent_kung_vec_preinv_worker(SWIGTYPE_p_void.getCPtr(arg_ptr));
  }

  public static void nmod_poly_compose_mod_brent_kung_vec_preinv_threaded_pool(nmod_poly_struct res, nmod_poly_struct polys, int len1, int n, nmod_poly_struct g, nmod_poly_struct poly, nmod_poly_struct polyinv, SWIGTYPE_p_int threads, int num_threads) {
    arblibJNI.nmod_poly_compose_mod_brent_kung_vec_preinv_threaded_pool(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(polys), polys, len1, n, nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(poly), poly, nmod_poly_struct.getCPtr(polyinv), polyinv, SWIGTYPE_p_int.getCPtr(threads), num_threads);
  }

  public static void _nmod_poly_compose_mod_brent_kung_vec_preinv_threaded_pool(nmod_poly_struct res, nmod_poly_struct polys, int lenpolys, int l, SWIGTYPE_p_unsigned_long g, int glen, SWIGTYPE_p_unsigned_long poly, int len, SWIGTYPE_p_unsigned_long polyinv, int leninv, nmod_t mod, SWIGTYPE_p_int threads, int num_threads) {
    arblibJNI._nmod_poly_compose_mod_brent_kung_vec_preinv_threaded_pool(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(polys), polys, lenpolys, l, SWIGTYPE_p_unsigned_long.getCPtr(g), glen, SWIGTYPE_p_unsigned_long.getCPtr(poly), len, SWIGTYPE_p_unsigned_long.getCPtr(polyinv), leninv, nmod_t.getCPtr(mod), mod, SWIGTYPE_p_int.getCPtr(threads), num_threads);
  }

  public static void nmod_poly_compose_mod_brent_kung_vec_preinv_threaded(nmod_poly_struct res, nmod_poly_struct polys, int len1, int n, nmod_poly_struct g, nmod_poly_struct poly, nmod_poly_struct polyinv) {
    arblibJNI.nmod_poly_compose_mod_brent_kung_vec_preinv_threaded(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(polys), polys, len1, n, nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(poly), poly, nmod_poly_struct.getCPtr(polyinv), polyinv);
  }

  public static void _nmod_poly_compose_mod_horner(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long f, int lenf, SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int lenh, nmod_t mod) {
    arblibJNI._nmod_poly_compose_mod_horner(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), lenh, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_mod_horner(nmod_poly_struct res, nmod_poly_struct f, nmod_poly_struct g, nmod_poly_struct h) {
    arblibJNI.nmod_poly_compose_mod_horner(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h);
  }

  public static void _nmod_poly_compose_mod(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long f, int lenf, SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int lenh, nmod_t mod) {
    arblibJNI._nmod_poly_compose_mod(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(f), lenf, SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), lenh, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_mod(nmod_poly_struct res, nmod_poly_struct f, nmod_poly_struct g, nmod_poly_struct h) {
    arblibJNI.nmod_poly_compose_mod(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h);
  }

  public static void _nmod_poly_compose_series_horner(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, int n, nmod_t mod) {
    arblibJNI._nmod_poly_compose_series_horner(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_series_horner(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, int n) {
    arblibJNI.nmod_poly_compose_series_horner(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _nmod_poly_compose_series_brent_kung(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, int n, nmod_t mod) {
    arblibJNI._nmod_poly_compose_series_brent_kung(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_series_brent_kung(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, int n) {
    arblibJNI.nmod_poly_compose_series_brent_kung(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _nmod_poly_compose_series(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, int n, nmod_t mod) {
    arblibJNI._nmod_poly_compose_series(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_series(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, int n) {
    arblibJNI.nmod_poly_compose_series(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _nmod_poly_revert_series_lagrange(SWIGTYPE_p_unsigned_long Qinv, SWIGTYPE_p_unsigned_long Q, int n, nmod_t mod) {
    arblibJNI._nmod_poly_revert_series_lagrange(SWIGTYPE_p_unsigned_long.getCPtr(Qinv), SWIGTYPE_p_unsigned_long.getCPtr(Q), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_revert_series_lagrange(nmod_poly_struct Qinv, nmod_poly_struct Q, int n) {
    arblibJNI.nmod_poly_revert_series_lagrange(nmod_poly_struct.getCPtr(Qinv), Qinv, nmod_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _nmod_poly_revert_series_lagrange_fast(SWIGTYPE_p_unsigned_long Qinv, SWIGTYPE_p_unsigned_long Q, int n, nmod_t mod) {
    arblibJNI._nmod_poly_revert_series_lagrange_fast(SWIGTYPE_p_unsigned_long.getCPtr(Qinv), SWIGTYPE_p_unsigned_long.getCPtr(Q), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_revert_series_lagrange_fast(nmod_poly_struct Qinv, nmod_poly_struct Q, int n) {
    arblibJNI.nmod_poly_revert_series_lagrange_fast(nmod_poly_struct.getCPtr(Qinv), Qinv, nmod_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _nmod_poly_revert_series_newton(SWIGTYPE_p_unsigned_long Qinv, SWIGTYPE_p_unsigned_long Q, int n, nmod_t mod) {
    arblibJNI._nmod_poly_revert_series_newton(SWIGTYPE_p_unsigned_long.getCPtr(Qinv), SWIGTYPE_p_unsigned_long.getCPtr(Q), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_revert_series_newton(nmod_poly_struct Qinv, nmod_poly_struct Q, int n) {
    arblibJNI.nmod_poly_revert_series_newton(nmod_poly_struct.getCPtr(Qinv), Qinv, nmod_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _nmod_poly_revert_series(SWIGTYPE_p_unsigned_long Qinv, SWIGTYPE_p_unsigned_long Q, int n, nmod_t mod) {
    arblibJNI._nmod_poly_revert_series(SWIGTYPE_p_unsigned_long.getCPtr(Qinv), SWIGTYPE_p_unsigned_long.getCPtr(Q), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_revert_series(nmod_poly_struct Qinv, nmod_poly_struct Q, int n) {
    arblibJNI.nmod_poly_revert_series(nmod_poly_struct.getCPtr(Qinv), Qinv, nmod_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _nmod_poly_compose_series_divconquer(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, int N, nmod_t mod) {
    arblibJNI._nmod_poly_compose_series_divconquer(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, N, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_compose_series_divconquer(nmod_poly_struct res, nmod_poly_struct poly1, nmod_poly_struct poly2, int N) {
    arblibJNI.nmod_poly_compose_series_divconquer(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly1), poly1, nmod_poly_struct.getCPtr(poly2), poly2, N);
  }

  public static int _nmod_poly_gcd_euclidean(SWIGTYPE_p_unsigned_long G, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    return arblibJNI._nmod_poly_gcd_euclidean(SWIGTYPE_p_unsigned_long.getCPtr(G), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_gcd_euclidean(nmod_poly_struct G, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_gcd_euclidean(nmod_poly_struct.getCPtr(G), G, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static int _nmod_poly_hgcd_recursive(SWIGTYPE_p_p_unsigned_long M, SWIGTYPE_p_long lenM, SWIGTYPE_p_unsigned_long A, SWIGTYPE_p_long lenA, SWIGTYPE_p_unsigned_long B, SWIGTYPE_p_long lenB, SWIGTYPE_p_unsigned_long a, int lena, SWIGTYPE_p_unsigned_long b, int lenb, SWIGTYPE_p_unsigned_long P, nmod_t mod, int flag, nmod_poly_res_struct res) {
    return arblibJNI._nmod_poly_hgcd_recursive(SWIGTYPE_p_p_unsigned_long.getCPtr(M), SWIGTYPE_p_long.getCPtr(lenM), SWIGTYPE_p_unsigned_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(lenA), SWIGTYPE_p_unsigned_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(lenB), SWIGTYPE_p_unsigned_long.getCPtr(a), lena, SWIGTYPE_p_unsigned_long.getCPtr(b), lenb, SWIGTYPE_p_unsigned_long.getCPtr(P), nmod_t.getCPtr(mod), mod, flag, nmod_poly_res_struct.getCPtr(res), res);
  }

  public static int _nmod_poly_hgcd(SWIGTYPE_p_p_unsigned_long M, SWIGTYPE_p_long lenM, SWIGTYPE_p_unsigned_long A, SWIGTYPE_p_long lenA, SWIGTYPE_p_unsigned_long B, SWIGTYPE_p_long lenB, SWIGTYPE_p_unsigned_long a, int lena, SWIGTYPE_p_unsigned_long b, int lenb, nmod_t mod) {
    return arblibJNI._nmod_poly_hgcd(SWIGTYPE_p_p_unsigned_long.getCPtr(M), SWIGTYPE_p_long.getCPtr(lenM), SWIGTYPE_p_unsigned_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(lenA), SWIGTYPE_p_unsigned_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(lenB), SWIGTYPE_p_unsigned_long.getCPtr(a), lena, SWIGTYPE_p_unsigned_long.getCPtr(b), lenb, nmod_t.getCPtr(mod), mod);
  }

  public static int nmod_poly_hgcd_ref(nmod_poly_struct m11, nmod_poly_struct m12, nmod_poly_struct m21, nmod_poly_struct m22, nmod_poly_struct A, nmod_poly_struct B, nmod_poly_struct a, nmod_poly_struct b) {
    return arblibJNI.nmod_poly_hgcd_ref(nmod_poly_struct.getCPtr(m11), m11, nmod_poly_struct.getCPtr(m12), m12, nmod_poly_struct.getCPtr(m21), m21, nmod_poly_struct.getCPtr(m22), m22, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B, nmod_poly_struct.getCPtr(a), a, nmod_poly_struct.getCPtr(b), b);
  }

  public static int nmod_poly_hgcd(nmod_poly_struct m11, nmod_poly_struct m12, nmod_poly_struct m21, nmod_poly_struct m22, nmod_poly_struct A, nmod_poly_struct B, nmod_poly_struct a, nmod_poly_struct b) {
    return arblibJNI.nmod_poly_hgcd(nmod_poly_struct.getCPtr(m11), m11, nmod_poly_struct.getCPtr(m12), m12, nmod_poly_struct.getCPtr(m21), m21, nmod_poly_struct.getCPtr(m22), m22, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B, nmod_poly_struct.getCPtr(a), a, nmod_poly_struct.getCPtr(b), b);
  }

  public static int _nmod_poly_gcd_hgcd(SWIGTYPE_p_unsigned_long G, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    return arblibJNI._nmod_poly_gcd_hgcd(SWIGTYPE_p_unsigned_long.getCPtr(G), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_gcd_hgcd(nmod_poly_struct G, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_gcd_hgcd(nmod_poly_struct.getCPtr(G), G, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static int _nmod_poly_gcd(SWIGTYPE_p_unsigned_long G, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    return arblibJNI._nmod_poly_gcd(SWIGTYPE_p_unsigned_long.getCPtr(G), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_gcd(nmod_poly_struct G, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_gcd(nmod_poly_struct.getCPtr(G), G, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static int _nmod_poly_xgcd_euclidean(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long s, SWIGTYPE_p_unsigned_long t, SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, nmod_t mod) {
    return arblibJNI._nmod_poly_xgcd_euclidean(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(s), SWIGTYPE_p_unsigned_long.getCPtr(t), SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_xgcd_euclidean(nmod_poly_struct G, nmod_poly_struct S, nmod_poly_struct T, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_xgcd_euclidean(nmod_poly_struct.getCPtr(G), G, nmod_poly_struct.getCPtr(S), S, nmod_poly_struct.getCPtr(T), T, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static int _nmod_poly_xgcd_hgcd(SWIGTYPE_p_unsigned_long G, SWIGTYPE_p_unsigned_long S, SWIGTYPE_p_unsigned_long T, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    return arblibJNI._nmod_poly_xgcd_hgcd(SWIGTYPE_p_unsigned_long.getCPtr(G), SWIGTYPE_p_unsigned_long.getCPtr(S), SWIGTYPE_p_unsigned_long.getCPtr(T), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_xgcd_hgcd(nmod_poly_struct G, nmod_poly_struct S, nmod_poly_struct T, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_xgcd_hgcd(nmod_poly_struct.getCPtr(G), G, nmod_poly_struct.getCPtr(S), S, nmod_poly_struct.getCPtr(T), T, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static int _nmod_poly_xgcd(SWIGTYPE_p_unsigned_long G, SWIGTYPE_p_unsigned_long S, SWIGTYPE_p_unsigned_long T, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    return arblibJNI._nmod_poly_xgcd(SWIGTYPE_p_unsigned_long.getCPtr(G), SWIGTYPE_p_unsigned_long.getCPtr(S), SWIGTYPE_p_unsigned_long.getCPtr(T), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_xgcd(nmod_poly_struct G, nmod_poly_struct S, nmod_poly_struct T, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_xgcd(nmod_poly_struct.getCPtr(G), G, nmod_poly_struct.getCPtr(S), S, nmod_poly_struct.getCPtr(T), T, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static long _nmod_poly_resultant_euclidean(SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, nmod_t mod) {
    return arblibJNI._nmod_poly_resultant_euclidean(SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_poly_resultant_euclidean(nmod_poly_struct f, nmod_poly_struct g) {
    return arblibJNI.nmod_poly_resultant_euclidean(nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(g), g);
  }

  public static long _nmod_poly_resultant_hgcd(SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    return arblibJNI._nmod_poly_resultant_hgcd(SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_poly_resultant_hgcd(nmod_poly_struct A, nmod_poly_struct B) {
    return arblibJNI.nmod_poly_resultant_hgcd(nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static long _nmod_poly_resultant(SWIGTYPE_p_unsigned_long poly1, int len1, SWIGTYPE_p_unsigned_long poly2, int len2, nmod_t mod) {
    return arblibJNI._nmod_poly_resultant(SWIGTYPE_p_unsigned_long.getCPtr(poly1), len1, SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_poly_resultant(nmod_poly_struct f, nmod_poly_struct g) {
    return arblibJNI.nmod_poly_resultant(nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(g), g);
  }

  public static int _nmod_poly_gcdinv(SWIGTYPE_p_unsigned_long G, SWIGTYPE_p_unsigned_long S, SWIGTYPE_p_unsigned_long A, int lenA, SWIGTYPE_p_unsigned_long B, int lenB, nmod_t mod) {
    return arblibJNI._nmod_poly_gcdinv(SWIGTYPE_p_unsigned_long.getCPtr(G), SWIGTYPE_p_unsigned_long.getCPtr(S), SWIGTYPE_p_unsigned_long.getCPtr(A), lenA, SWIGTYPE_p_unsigned_long.getCPtr(B), lenB, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_gcdinv(nmod_poly_struct G, nmod_poly_struct S, nmod_poly_struct A, nmod_poly_struct B) {
    arblibJNI.nmod_poly_gcdinv(nmod_poly_struct.getCPtr(G), G, nmod_poly_struct.getCPtr(S), S, nmod_poly_struct.getCPtr(A), A, nmod_poly_struct.getCPtr(B), B);
  }

  public static long _nmod_poly_discriminant(SWIGTYPE_p_unsigned_long poly, int len, nmod_t mod) {
    return arblibJNI._nmod_poly_discriminant(SWIGTYPE_p_unsigned_long.getCPtr(poly), len, nmod_t.getCPtr(mod), mod);
  }

  public static long nmod_poly_discriminant(nmod_poly_struct f) {
    return arblibJNI.nmod_poly_discriminant(nmod_poly_struct.getCPtr(f), f);
  }

  public static void _nmod_poly_invsqrt_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_invsqrt_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_invsqrt_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_invsqrt_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_sqrt_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_sqrt_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_sqrt_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_sqrt_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static int _nmod_poly_sqrt(SWIGTYPE_p_unsigned_long s, SWIGTYPE_p_unsigned_long p, int len, nmod_t mod) {
    return arblibJNI._nmod_poly_sqrt(SWIGTYPE_p_unsigned_long.getCPtr(s), SWIGTYPE_p_unsigned_long.getCPtr(p), len, nmod_t.getCPtr(mod), mod);
  }

  public static int nmod_poly_sqrt(nmod_poly_struct b, nmod_poly_struct a) {
    return arblibJNI.nmod_poly_sqrt(nmod_poly_struct.getCPtr(b), b, nmod_poly_struct.getCPtr(a), a);
  }

  public static void _nmod_poly_power_sums_naive(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, int n, nmod_t mod) {
    arblibJNI._nmod_poly_power_sums_naive(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_power_sums_naive(nmod_poly_struct res, nmod_poly_struct poly, int n) {
    arblibJNI.nmod_poly_power_sums_naive(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _nmod_poly_power_sums_schoenhage(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, int n, nmod_t mod) {
    arblibJNI._nmod_poly_power_sums_schoenhage(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_power_sums_schoenhage(nmod_poly_struct res, nmod_poly_struct poly, int n) {
    arblibJNI.nmod_poly_power_sums_schoenhage(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _nmod_poly_power_sums(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, int n, nmod_t mod) {
    arblibJNI._nmod_poly_power_sums(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_power_sums(nmod_poly_struct res, nmod_poly_struct poly, int n) {
    arblibJNI.nmod_poly_power_sums(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _nmod_poly_power_sums_to_poly_naive(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, nmod_t mod) {
    arblibJNI._nmod_poly_power_sums_to_poly_naive(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_power_sums_to_poly_naive(nmod_poly_struct res, nmod_poly_struct Q) {
    arblibJNI.nmod_poly_power_sums_to_poly_naive(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(Q), Q);
  }

  public static void _nmod_poly_power_sums_to_poly_schoenhage(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, nmod_t mod) {
    arblibJNI._nmod_poly_power_sums_to_poly_schoenhage(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_power_sums_to_poly_schoenhage(nmod_poly_struct res, nmod_poly_struct Q) {
    arblibJNI.nmod_poly_power_sums_to_poly_schoenhage(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(Q), Q);
  }

  public static void _nmod_poly_power_sums_to_poly(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long poly, int len, nmod_t mod) {
    arblibJNI._nmod_poly_power_sums_to_poly(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(poly), len, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_power_sums_to_poly(nmod_poly_struct res, nmod_poly_struct Q) {
    arblibJNI.nmod_poly_power_sums_to_poly(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(Q), Q);
  }

  public static void _nmod_poly_atan_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_atan_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_atan_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_atan_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_tan_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_tan_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_tan_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_tan_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_asin_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_asin_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_asin_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_asin_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_sin_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_sin_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_sin_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_sin_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_cos_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_cos_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_cos_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_cos_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_asinh_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_asinh_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_asinh_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_asinh_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_atanh_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_atanh_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_atanh_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_atanh_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_sinh_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_sinh_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_sinh_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_sinh_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_cosh_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_cosh_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_cosh_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_cosh_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_tanh_series(SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_tanh_series(SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_tanh_series(nmod_poly_struct g, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_tanh_series(nmod_poly_struct.getCPtr(g), g, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_log_series_monomial_ui(SWIGTYPE_p_unsigned_long res, long coeff, long power, int n, nmod_t mod) {
    arblibJNI._nmod_poly_log_series_monomial_ui(SWIGTYPE_p_unsigned_long.getCPtr(res), coeff, power, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_log_series_monomial_ui(nmod_poly_struct res, long coeff, long power, int n) {
    arblibJNI.nmod_poly_log_series_monomial_ui(nmod_poly_struct.getCPtr(res), res, coeff, power, n);
  }

  public static void _nmod_poly_log_series(SWIGTYPE_p_unsigned_long res, SWIGTYPE_p_unsigned_long f, int flen, int n, nmod_t mod) {
    arblibJNI._nmod_poly_log_series(SWIGTYPE_p_unsigned_long.getCPtr(res), SWIGTYPE_p_unsigned_long.getCPtr(f), flen, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_log_series(nmod_poly_struct res, nmod_poly_struct f, int n) {
    arblibJNI.nmod_poly_log_series(nmod_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(f), f, n);
  }

  public static void _nmod_poly_exp_series_monomial_ui(SWIGTYPE_p_unsigned_long res, long coeff, long power, int n, nmod_t mod) {
    arblibJNI._nmod_poly_exp_series_monomial_ui(SWIGTYPE_p_unsigned_long.getCPtr(res), coeff, power, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_exp_series_monomial_ui(nmod_poly_struct res, long coeff, long power, int n) {
    arblibJNI.nmod_poly_exp_series_monomial_ui(nmod_poly_struct.getCPtr(res), res, coeff, power, n);
  }

  public static void _nmod_poly_exp_series_basecase(SWIGTYPE_p_unsigned_long f, SWIGTYPE_p_unsigned_long h, int hlen, int n, nmod_t mod) {
    arblibJNI._nmod_poly_exp_series_basecase(SWIGTYPE_p_unsigned_long.getCPtr(f), SWIGTYPE_p_unsigned_long.getCPtr(h), hlen, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_exp_series_basecase(nmod_poly_struct f, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_exp_series_basecase(nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void _nmod_poly_exp_expinv_series(SWIGTYPE_p_unsigned_long f, SWIGTYPE_p_unsigned_long g, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_exp_expinv_series(SWIGTYPE_p_unsigned_long.getCPtr(f), SWIGTYPE_p_unsigned_long.getCPtr(g), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_exp_series(SWIGTYPE_p_unsigned_long f, SWIGTYPE_p_unsigned_long h, int n, nmod_t mod) {
    arblibJNI._nmod_poly_exp_series(SWIGTYPE_p_unsigned_long.getCPtr(f), SWIGTYPE_p_unsigned_long.getCPtr(h), n, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_exp_series2(SWIGTYPE_p_unsigned_long f, SWIGTYPE_p_unsigned_long h, int hlen, int n, nmod_t mod) {
    arblibJNI._nmod_poly_exp_series2(SWIGTYPE_p_unsigned_long.getCPtr(f), SWIGTYPE_p_unsigned_long.getCPtr(h), hlen, n, nmod_t.getCPtr(mod), mod);
  }

  public static void nmod_poly_exp_series(nmod_poly_struct f, nmod_poly_struct h, int n) {
    arblibJNI.nmod_poly_exp_series(nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(h), h, n);
  }

  public static void nmod_poly_product_roots_nmod_vec(nmod_poly_struct poly, SWIGTYPE_p_unsigned_long xs, int n) {
    arblibJNI.nmod_poly_product_roots_nmod_vec(nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_unsigned_long.getCPtr(xs), n);
  }

  public static void _nmod_poly_product_roots_nmod_vec(SWIGTYPE_p_unsigned_long poly, SWIGTYPE_p_unsigned_long xs, int n, nmod_t mod) {
    arblibJNI._nmod_poly_product_roots_nmod_vec(SWIGTYPE_p_unsigned_long.getCPtr(poly), SWIGTYPE_p_unsigned_long.getCPtr(xs), n, nmod_t.getCPtr(mod), mod);
  }

  public static void _nmod_poly_split_rabin(nmod_poly_struct a, nmod_poly_struct b, nmod_poly_struct f, nmod_poly_struct t, nmod_poly_struct t2, flint_rand_s randstate) {
    arblibJNI._nmod_poly_split_rabin(nmod_poly_struct.getCPtr(a), a, nmod_poly_struct.getCPtr(b), b, nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(t), t, nmod_poly_struct.getCPtr(t2), t2, flint_rand_s.getCPtr(randstate), randstate);
  }

  public static int nmod_poly_find_distinct_nonzero_roots(SWIGTYPE_p_unsigned_long roots, nmod_poly_struct P) {
    return arblibJNI.nmod_poly_find_distinct_nonzero_roots(SWIGTYPE_p_unsigned_long.getCPtr(roots), nmod_poly_struct.getCPtr(P), P);
  }

  public static void nmod_poly_multi_crt_init(nmod_poly_multi_crt_struct CRT) {
    arblibJNI.nmod_poly_multi_crt_init(nmod_poly_multi_crt_struct.getCPtr(CRT), CRT);
  }

  public static int nmod_poly_multi_crt_precompute(nmod_poly_multi_crt_struct CRT, nmod_poly_struct moduli, int len) {
    return arblibJNI.nmod_poly_multi_crt_precompute(nmod_poly_multi_crt_struct.getCPtr(CRT), CRT, nmod_poly_struct.getCPtr(moduli), moduli, len);
  }

  public static int nmod_poly_multi_crt_precompute_p(nmod_poly_multi_crt_struct CRT, SWIGTYPE_p_p_nmod_poly_struct moduli, int len) {
    return arblibJNI.nmod_poly_multi_crt_precompute_p(nmod_poly_multi_crt_struct.getCPtr(CRT), CRT, SWIGTYPE_p_p_nmod_poly_struct.getCPtr(moduli), len);
  }

  public static void nmod_poly_multi_crt_precomp(nmod_poly_struct output, nmod_poly_multi_crt_struct CRT, nmod_poly_struct values) {
    arblibJNI.nmod_poly_multi_crt_precomp(nmod_poly_struct.getCPtr(output), output, nmod_poly_multi_crt_struct.getCPtr(CRT), CRT, nmod_poly_struct.getCPtr(values), values);
  }

  public static void nmod_poly_multi_crt_precomp_p(nmod_poly_struct output, nmod_poly_multi_crt_struct CRT, SWIGTYPE_p_p_nmod_poly_struct values) {
    arblibJNI.nmod_poly_multi_crt_precomp_p(nmod_poly_struct.getCPtr(output), output, nmod_poly_multi_crt_struct.getCPtr(CRT), CRT, SWIGTYPE_p_p_nmod_poly_struct.getCPtr(values));
  }

  public static int nmod_poly_multi_crt(nmod_poly_struct output, nmod_poly_struct moduli, nmod_poly_struct values, int len) {
    return arblibJNI.nmod_poly_multi_crt(nmod_poly_struct.getCPtr(output), output, nmod_poly_struct.getCPtr(moduli), moduli, nmod_poly_struct.getCPtr(values), values, len);
  }

  public static void nmod_poly_multi_crt_clear(nmod_poly_multi_crt_struct CRT) {
    arblibJNI.nmod_poly_multi_crt_clear(nmod_poly_multi_crt_struct.getCPtr(CRT), CRT);
  }

  public static int _nmod_poly_multi_crt_local_size(nmod_poly_multi_crt_struct CRT) {
    return arblibJNI._nmod_poly_multi_crt_local_size(nmod_poly_multi_crt_struct.getCPtr(CRT), CRT);
  }

  public static void _nmod_poly_multi_crt_run(nmod_poly_struct outputs, nmod_poly_multi_crt_struct CRT, nmod_poly_struct inputs) {
    arblibJNI._nmod_poly_multi_crt_run(nmod_poly_struct.getCPtr(outputs), outputs, nmod_poly_multi_crt_struct.getCPtr(CRT), CRT, nmod_poly_struct.getCPtr(inputs), inputs);
  }

  public static void _nmod_poly_multi_crt_run_p(nmod_poly_struct outputs, nmod_poly_multi_crt_struct CRT, SWIGTYPE_p_p_nmod_poly_struct inputs) {
    arblibJNI._nmod_poly_multi_crt_run_p(nmod_poly_struct.getCPtr(outputs), outputs, nmod_poly_multi_crt_struct.getCPtr(CRT), CRT, SWIGTYPE_p_p_nmod_poly_struct.getCPtr(inputs));
  }

  public static long nmod_poly_deflation(nmod_poly_struct input) {
    return arblibJNI.nmod_poly_deflation(nmod_poly_struct.getCPtr(input), input);
  }

  public static void nmod_poly_deflate(nmod_poly_struct result, nmod_poly_struct input, long deflation) {
    arblibJNI.nmod_poly_deflate(nmod_poly_struct.getCPtr(result), result, nmod_poly_struct.getCPtr(input), input, deflation);
  }

  public static void nmod_poly_inflate(nmod_poly_struct result, nmod_poly_struct input, long inflation) {
    arblibJNI.nmod_poly_inflate(nmod_poly_struct.getCPtr(result), result, nmod_poly_struct.getCPtr(input), input, inflation);
  }

  public static void nmod_mat_charpoly_danilevsky(nmod_poly_struct p, nmod_mat_struct M) {
    arblibJNI.nmod_mat_charpoly_danilevsky(nmod_poly_struct.getCPtr(p), p, nmod_mat_struct.getCPtr(M), M);
  }

  public static void nmod_mat_charpoly(nmod_poly_struct p, nmod_mat_struct M) {
    arblibJNI.nmod_mat_charpoly(nmod_poly_struct.getCPtr(p), p, nmod_mat_struct.getCPtr(M), M);
  }

  public static void nmod_mat_minpoly_with_gens(nmod_poly_struct p, nmod_mat_struct X, SWIGTYPE_p_unsigned_long P) {
    arblibJNI.nmod_mat_minpoly_with_gens(nmod_poly_struct.getCPtr(p), p, nmod_mat_struct.getCPtr(X), X, SWIGTYPE_p_unsigned_long.getCPtr(P));
  }

  public static void nmod_mat_minpoly(nmod_poly_struct p, nmod_mat_struct M) {
    arblibJNI.nmod_mat_minpoly(nmod_poly_struct.getCPtr(p), p, nmod_mat_struct.getCPtr(M), M);
  }

  public static void nmod_berlekamp_massey_init(nmod_berlekamp_massey_struct B, long p) {
    arblibJNI.nmod_berlekamp_massey_init(nmod_berlekamp_massey_struct.getCPtr(B), B, p);
  }

  public static void nmod_berlekamp_massey_start_over(nmod_berlekamp_massey_struct B) {
    arblibJNI.nmod_berlekamp_massey_start_over(nmod_berlekamp_massey_struct.getCPtr(B), B);
  }

  public static void nmod_berlekamp_massey_clear(nmod_berlekamp_massey_struct B) {
    arblibJNI.nmod_berlekamp_massey_clear(nmod_berlekamp_massey_struct.getCPtr(B), B);
  }

  public static void nmod_berlekamp_massey_set_prime(nmod_berlekamp_massey_struct B, long p) {
    arblibJNI.nmod_berlekamp_massey_set_prime(nmod_berlekamp_massey_struct.getCPtr(B), B, p);
  }

  public static void nmod_berlekamp_massey_print(nmod_berlekamp_massey_struct B) {
    arblibJNI.nmod_berlekamp_massey_print(nmod_berlekamp_massey_struct.getCPtr(B), B);
  }

  public static void nmod_berlekamp_massey_add_points(nmod_berlekamp_massey_struct B, SWIGTYPE_p_unsigned_long a, int count) {
    arblibJNI.nmod_berlekamp_massey_add_points(nmod_berlekamp_massey_struct.getCPtr(B), B, SWIGTYPE_p_unsigned_long.getCPtr(a), count);
  }

  public static void nmod_berlekamp_massey_add_zeros(nmod_berlekamp_massey_struct B, int count) {
    arblibJNI.nmod_berlekamp_massey_add_zeros(nmod_berlekamp_massey_struct.getCPtr(B), B, count);
  }

  public static void nmod_berlekamp_massey_add_point(nmod_berlekamp_massey_struct B, long a) {
    arblibJNI.nmod_berlekamp_massey_add_point(nmod_berlekamp_massey_struct.getCPtr(B), B, a);
  }

  public static int nmod_berlekamp_massey_reduce(nmod_berlekamp_massey_struct B) {
    return arblibJNI.nmod_berlekamp_massey_reduce(nmod_berlekamp_massey_struct.getCPtr(B), B);
  }

  public static SWIGTYPE_p_unsigned_long nmod_berlekamp_massey_points(nmod_berlekamp_massey_struct B) {
    long cPtr = arblibJNI.nmod_berlekamp_massey_points(nmod_berlekamp_massey_struct.getCPtr(B), B);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static int nmod_berlekamp_massey_point_count(nmod_berlekamp_massey_struct B) {
    return arblibJNI.nmod_berlekamp_massey_point_count(nmod_berlekamp_massey_struct.getCPtr(B), B);
  }

  public static nmod_poly_struct nmod_berlekamp_massey_V_poly(nmod_berlekamp_massey_struct B) {
    long cPtr = arblibJNI.nmod_berlekamp_massey_V_poly(nmod_berlekamp_massey_struct.getCPtr(B), B);
    return (cPtr == 0) ? null : new nmod_poly_struct(cPtr, false);
  }

  public static nmod_poly_struct nmod_berlekamp_massey_R_poly(nmod_berlekamp_massey_struct B) {
    long cPtr = arblibJNI.nmod_berlekamp_massey_R_poly(nmod_berlekamp_massey_struct.getCPtr(B), B);
    return (cPtr == 0) ? null : new nmod_poly_struct(cPtr, false);
  }

  public static void nmod_poly_factor_init(nmod_poly_factor_struct fac) {
    arblibJNI.nmod_poly_factor_init(nmod_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void nmod_poly_factor_clear(nmod_poly_factor_struct fac) {
    arblibJNI.nmod_poly_factor_clear(nmod_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void nmod_poly_factor_realloc(nmod_poly_factor_struct fac, int alloc) {
    arblibJNI.nmod_poly_factor_realloc(nmod_poly_factor_struct.getCPtr(fac), fac, alloc);
  }

  public static void nmod_poly_factor_fit_length(nmod_poly_factor_struct fac, int len) {
    arblibJNI.nmod_poly_factor_fit_length(nmod_poly_factor_struct.getCPtr(fac), fac, len);
  }

  public static void nmod_poly_factor_set(nmod_poly_factor_struct res, nmod_poly_factor_struct fac) {
    arblibJNI.nmod_poly_factor_set(nmod_poly_factor_struct.getCPtr(res), res, nmod_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void nmod_poly_factor_swap(nmod_poly_factor_struct a, nmod_poly_factor_struct b) {
    arblibJNI.nmod_poly_factor_swap(nmod_poly_factor_struct.getCPtr(a), a, nmod_poly_factor_struct.getCPtr(b), b);
  }

  public static void nmod_poly_factor_insert(nmod_poly_factor_struct fac, nmod_poly_struct poly, int exp) {
    arblibJNI.nmod_poly_factor_insert(nmod_poly_factor_struct.getCPtr(fac), fac, nmod_poly_struct.getCPtr(poly), poly, exp);
  }

  public static void nmod_poly_factor_print(nmod_poly_factor_struct fac) {
    arblibJNI.nmod_poly_factor_print(nmod_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void nmod_poly_factor_concat(nmod_poly_factor_struct res, nmod_poly_factor_struct fac) {
    arblibJNI.nmod_poly_factor_concat(nmod_poly_factor_struct.getCPtr(res), res, nmod_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void nmod_poly_factor_pow(nmod_poly_factor_struct fac, int exp) {
    arblibJNI.nmod_poly_factor_pow(nmod_poly_factor_struct.getCPtr(fac), fac, exp);
  }

  public static void nmod_poly_factor_equal_deg(nmod_poly_factor_struct factors, nmod_poly_struct pol, int d) {
    arblibJNI.nmod_poly_factor_equal_deg(nmod_poly_factor_struct.getCPtr(factors), factors, nmod_poly_struct.getCPtr(pol), pol, d);
  }

  public static int nmod_poly_factor_equal_deg_prob(nmod_poly_struct factor, flint_rand_s state, nmod_poly_struct pol, int d) {
    return arblibJNI.nmod_poly_factor_equal_deg_prob(nmod_poly_struct.getCPtr(factor), factor, flint_rand_s.getCPtr(state), state, nmod_poly_struct.getCPtr(pol), pol, d);
  }

  public static void nmod_poly_factor_distinct_deg(nmod_poly_factor_struct res, nmod_poly_struct poly, SWIGTYPE_p_p_long degs) {
    arblibJNI.nmod_poly_factor_distinct_deg(nmod_poly_factor_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_p_long.getCPtr(degs));
  }

  public static long nmod_poly_remove(nmod_poly_struct f, nmod_poly_struct p) {
    return arblibJNI.nmod_poly_remove(nmod_poly_struct.getCPtr(f), f, nmod_poly_struct.getCPtr(p), p);
  }

  public static void nmod_poly_factor_distinct_deg_threaded(nmod_poly_factor_struct res, nmod_poly_struct poly, SWIGTYPE_p_p_long degs) {
    arblibJNI.nmod_poly_factor_distinct_deg_threaded(nmod_poly_factor_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_p_long.getCPtr(degs));
  }

  public static int nmod_poly_is_irreducible(nmod_poly_struct f) {
    return arblibJNI.nmod_poly_is_irreducible(nmod_poly_struct.getCPtr(f), f);
  }

  public static int nmod_poly_is_irreducible_rabin(nmod_poly_struct f) {
    return arblibJNI.nmod_poly_is_irreducible_rabin(nmod_poly_struct.getCPtr(f), f);
  }

  public static int nmod_poly_is_irreducible_ddf(nmod_poly_struct f) {
    return arblibJNI.nmod_poly_is_irreducible_ddf(nmod_poly_struct.getCPtr(f), f);
  }

  public static int _nmod_poly_is_squarefree(SWIGTYPE_p_unsigned_long f, int len, nmod_t mod) {
    return arblibJNI._nmod_poly_is_squarefree(SWIGTYPE_p_unsigned_long.getCPtr(f), len, nmod_t.getCPtr(mod), mod);
  }

  public static int nmod_poly_is_squarefree(nmod_poly_struct f) {
    return arblibJNI.nmod_poly_is_squarefree(nmod_poly_struct.getCPtr(f), f);
  }

  public static void nmod_poly_factor_cantor_zassenhaus(nmod_poly_factor_struct res, nmod_poly_struct f) {
    arblibJNI.nmod_poly_factor_cantor_zassenhaus(nmod_poly_factor_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(f), f);
  }

  public static void nmod_poly_factor_berlekamp(nmod_poly_factor_struct factors, nmod_poly_struct f) {
    arblibJNI.nmod_poly_factor_berlekamp(nmod_poly_factor_struct.getCPtr(factors), factors, nmod_poly_struct.getCPtr(f), f);
  }

  public static void nmod_poly_factor_kaltofen_shoup(nmod_poly_factor_struct res, nmod_poly_struct poly) {
    arblibJNI.nmod_poly_factor_kaltofen_shoup(nmod_poly_factor_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly);
  }

  public static void nmod_poly_factor_squarefree(nmod_poly_factor_struct res, nmod_poly_struct f) {
    arblibJNI.nmod_poly_factor_squarefree(nmod_poly_factor_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(f), f);
  }

  public static long nmod_poly_factor_with_berlekamp(nmod_poly_factor_struct result, nmod_poly_struct input) {
    return arblibJNI.nmod_poly_factor_with_berlekamp(nmod_poly_factor_struct.getCPtr(result), result, nmod_poly_struct.getCPtr(input), input);
  }

  public static long nmod_poly_factor_with_cantor_zassenhaus(nmod_poly_factor_struct result, nmod_poly_struct input) {
    return arblibJNI.nmod_poly_factor_with_cantor_zassenhaus(nmod_poly_factor_struct.getCPtr(result), result, nmod_poly_struct.getCPtr(input), input);
  }

  public static long nmod_poly_factor_with_kaltofen_shoup(nmod_poly_factor_struct result, nmod_poly_struct input) {
    return arblibJNI.nmod_poly_factor_with_kaltofen_shoup(nmod_poly_factor_struct.getCPtr(result), result, nmod_poly_struct.getCPtr(input), input);
  }

  public static long nmod_poly_factor(nmod_poly_factor_struct result, nmod_poly_struct input) {
    return arblibJNI.nmod_poly_factor(nmod_poly_factor_struct.getCPtr(result), result, nmod_poly_struct.getCPtr(input), input);
  }

  public static void _nmod_poly_interval_poly_worker(SWIGTYPE_p_void arg_ptr) {
    arblibJNI._nmod_poly_interval_poly_worker(SWIGTYPE_p_void.getCPtr(arg_ptr));
  }

  public static void nmod_poly_roots(nmod_poly_factor_struct r, nmod_poly_struct f, int with_multiplicity) {
    arblibJNI.nmod_poly_roots(nmod_poly_factor_struct.getCPtr(r), r, nmod_poly_struct.getCPtr(f), f, with_multiplicity);
  }

  public static int nmod_poly_roots_factored(nmod_poly_factor_struct r, nmod_poly_struct f, int with_multiplicity, n_factor_t n) {
    return arblibJNI.nmod_poly_roots_factored(nmod_poly_factor_struct.getCPtr(r), r, nmod_poly_struct.getCPtr(f), f, with_multiplicity, n_factor_t.getCPtr(n), n);
  }

  public static void nmod_poly_factor_get_nmod_poly(nmod_poly_struct z, nmod_poly_factor_struct fac, int i) {
    arblibJNI.nmod_poly_factor_get_nmod_poly(nmod_poly_struct.getCPtr(z), z, nmod_poly_factor_struct.getCPtr(fac), fac, i);
  }

  public static void fmpz_poly_init(fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_init(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_init2(fmpz_poly_struct poly, int alloc) {
    arblibJNI.fmpz_poly_init2(fmpz_poly_struct.getCPtr(poly), poly, alloc);
  }

  public static void fmpz_poly_realloc(fmpz_poly_struct poly, int alloc) {
    arblibJNI.fmpz_poly_realloc(fmpz_poly_struct.getCPtr(poly), poly, alloc);
  }

  public static void fmpz_poly_fit_length(fmpz_poly_struct poly, int len) {
    arblibJNI.fmpz_poly_fit_length(fmpz_poly_struct.getCPtr(poly), poly, len);
  }

  public static void fmpz_poly_clear(fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_clear(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_normalise(fmpz_poly_struct poly) {
    arblibJNI._fmpz_poly_normalise(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_set_length(fmpz_poly_struct poly, int newlen) {
    arblibJNI._fmpz_poly_set_length(fmpz_poly_struct.getCPtr(poly), poly, newlen);
  }

  public static void fmpz_poly_attach_truncate(fmpz_poly_struct trunc, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_attach_truncate(fmpz_poly_struct.getCPtr(trunc), trunc, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpz_poly_attach_shift(fmpz_poly_struct trunc, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_attach_shift(fmpz_poly_struct.getCPtr(trunc), trunc, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static int fmpz_poly_length(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_length(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpz_poly_degree(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_degree(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_set(fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_set(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void fmpz_poly_set_ui(fmpz_poly_struct poly, long c) {
    arblibJNI.fmpz_poly_set_ui(fmpz_poly_struct.getCPtr(poly), poly, c);
  }

  public static void fmpz_poly_set_si(fmpz_poly_struct poly, int c) {
    arblibJNI.fmpz_poly_set_si(fmpz_poly_struct.getCPtr(poly), poly, c);
  }

  public static void fmpz_poly_set_fmpz(fmpz_poly_struct poly, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_poly_set_fmpz(fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpz_poly_set_mpz(fmpz_poly_struct poly, __mpz_struct c) {
    arblibJNI.fmpz_poly_set_mpz(fmpz_poly_struct.getCPtr(poly), poly, __mpz_struct.getCPtr(c), c);
  }

  public static int _fmpz_poly_set_str(SWIGTYPE_p_long poly, String str) {
    return arblibJNI._fmpz_poly_set_str(SWIGTYPE_p_long.getCPtr(poly), str);
  }

  public static int fmpz_poly_set_str(fmpz_poly_struct poly, String str) {
    return arblibJNI.fmpz_poly_set_str(fmpz_poly_struct.getCPtr(poly), poly, str);
  }

  public static String _fmpz_poly_get_str(SWIGTYPE_p_long poly, int len) {
    return arblibJNI._fmpz_poly_get_str(SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static String fmpz_poly_get_str(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_get_str(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static String _fmpz_poly_get_str_pretty(SWIGTYPE_p_long poly, int len, String x) {
    return arblibJNI._fmpz_poly_get_str_pretty(SWIGTYPE_p_long.getCPtr(poly), len, x);
  }

  public static String fmpz_poly_get_str_pretty(fmpz_poly_struct poly, String x) {
    return arblibJNI.fmpz_poly_get_str_pretty(fmpz_poly_struct.getCPtr(poly), poly, x);
  }

  public static void fmpz_poly_zero(fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_zero(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_one(fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_one(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_zero_coeffs(fmpz_poly_struct poly, int i, int j) {
    arblibJNI.fmpz_poly_zero_coeffs(fmpz_poly_struct.getCPtr(poly), poly, i, j);
  }

  public static void fmpz_poly_swap(fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_swap(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_reverse(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, int n) {
    arblibJNI._fmpz_poly_reverse(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, n);
  }

  public static void fmpz_poly_reverse(fmpz_poly_struct res, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_reverse(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static long fmpz_poly_deflation(fmpz_poly_struct input) {
    return arblibJNI.fmpz_poly_deflation(fmpz_poly_struct.getCPtr(input), input);
  }

  public static void fmpz_poly_deflate(fmpz_poly_struct result, fmpz_poly_struct input, long deflation) {
    arblibJNI.fmpz_poly_deflate(fmpz_poly_struct.getCPtr(result), result, fmpz_poly_struct.getCPtr(input), input, deflation);
  }

  public static void fmpz_poly_inflate(fmpz_poly_struct result, fmpz_poly_struct input, long inflation) {
    arblibJNI.fmpz_poly_inflate(fmpz_poly_struct.getCPtr(result), result, fmpz_poly_struct.getCPtr(input), input, inflation);
  }

  public static void fmpz_poly_truncate(fmpz_poly_struct poly, int newlen) {
    arblibJNI.fmpz_poly_truncate(fmpz_poly_struct.getCPtr(poly), poly, newlen);
  }

  public static void fmpz_poly_set_trunc(fmpz_poly_struct res, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_set_trunc(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpz_poly_randtest(fmpz_poly_struct f, flint_rand_s state, int len, long bits) {
    arblibJNI.fmpz_poly_randtest(fmpz_poly_struct.getCPtr(f), f, flint_rand_s.getCPtr(state), state, len, bits);
  }

  public static void fmpz_poly_randtest_unsigned(fmpz_poly_struct f, flint_rand_s state, int len, long bits) {
    arblibJNI.fmpz_poly_randtest_unsigned(fmpz_poly_struct.getCPtr(f), f, flint_rand_s.getCPtr(state), state, len, bits);
  }

  public static void fmpz_poly_randtest_not_zero(fmpz_poly_struct f, flint_rand_s state, int len, long bits) {
    arblibJNI.fmpz_poly_randtest_not_zero(fmpz_poly_struct.getCPtr(f), f, flint_rand_s.getCPtr(state), state, len, bits);
  }

  public static void fmpz_poly_randtest_no_real_root(fmpz_poly_struct p, flint_rand_s state, int len, long bits) {
    arblibJNI.fmpz_poly_randtest_no_real_root(fmpz_poly_struct.getCPtr(p), p, flint_rand_s.getCPtr(state), state, len, bits);
  }

  public static int fmpz_poly_get_coeff_si(fmpz_poly_struct poly, int n) {
    return arblibJNI.fmpz_poly_get_coeff_si(fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpz_poly_set_coeff_si(fmpz_poly_struct poly, int n, int x) {
    arblibJNI.fmpz_poly_set_coeff_si(fmpz_poly_struct.getCPtr(poly), poly, n, x);
  }

  public static long fmpz_poly_get_coeff_ui(fmpz_poly_struct poly, int n) {
    return arblibJNI.fmpz_poly_get_coeff_ui(fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpz_poly_set_coeff_ui(fmpz_poly_struct poly, int n, long x) {
    arblibJNI.fmpz_poly_set_coeff_ui(fmpz_poly_struct.getCPtr(poly), poly, n, x);
  }

  public static void fmpz_poly_set_coeff_fmpz(fmpz_poly_struct poly, int n, SWIGTYPE_p_long x) {
    arblibJNI.fmpz_poly_set_coeff_fmpz(fmpz_poly_struct.getCPtr(poly), poly, n, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpz_poly_get_coeff_fmpz(SWIGTYPE_p_long x, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_get_coeff_fmpz(SWIGTYPE_p_long.getCPtr(x), fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static int fmpz_poly_equal(fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    return arblibJNI.fmpz_poly_equal(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static int fmpz_poly_equal_trunc(fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    return arblibJNI.fmpz_poly_equal_trunc(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static int _fmpz_poly_is_one(SWIGTYPE_p_long poly, int len) {
    return arblibJNI._fmpz_poly_is_one(SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static int fmpz_poly_is_one(fmpz_poly_struct op) {
    return arblibJNI.fmpz_poly_is_one(fmpz_poly_struct.getCPtr(op), op);
  }

  public static int fmpz_poly_is_unit(fmpz_poly_struct op) {
    return arblibJNI.fmpz_poly_is_unit(fmpz_poly_struct.getCPtr(op), op);
  }

  public static int fmpz_poly_is_gen(fmpz_poly_struct op) {
    return arblibJNI.fmpz_poly_is_gen(fmpz_poly_struct.getCPtr(op), op);
  }

  public static int fmpz_poly_equal_fmpz(fmpz_poly_struct poly, SWIGTYPE_p_long c) {
    return arblibJNI.fmpz_poly_equal_fmpz(fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpz_poly_add(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_add(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_add(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_add(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void fmpz_poly_add_series(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_add_series(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpz_poly_sub(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_sub(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_sub(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_sub(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void fmpz_poly_sub_series(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_sub_series(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void fmpz_poly_neg(fmpz_poly_struct res, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_neg(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_scalar_abs(fmpz_poly_struct res, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_scalar_abs(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_scalar_mul_ui(fmpz_poly_struct poly1, fmpz_poly_struct poly2, long x) {
    arblibJNI.fmpz_poly_scalar_mul_ui(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, x);
  }

  public static void fmpz_poly_scalar_mul_si(fmpz_poly_struct poly1, fmpz_poly_struct poly2, int x) {
    arblibJNI.fmpz_poly_scalar_mul_si(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, x);
  }

  public static void fmpz_poly_scalar_mul_fmpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, SWIGTYPE_p_long x) {
    arblibJNI.fmpz_poly_scalar_mul_fmpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpz_poly_scalar_addmul_fmpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, SWIGTYPE_p_long x) {
    arblibJNI.fmpz_poly_scalar_addmul_fmpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpz_poly_scalar_submul_fmpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, SWIGTYPE_p_long x) {
    arblibJNI.fmpz_poly_scalar_submul_fmpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpz_poly_scalar_fdiv_ui(fmpz_poly_struct poly1, fmpz_poly_struct poly2, long x) {
    arblibJNI.fmpz_poly_scalar_fdiv_ui(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, x);
  }

  public static void fmpz_poly_scalar_fdiv_si(fmpz_poly_struct poly1, fmpz_poly_struct poly2, int x) {
    arblibJNI.fmpz_poly_scalar_fdiv_si(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, x);
  }

  public static void fmpz_poly_scalar_fdiv_fmpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, SWIGTYPE_p_long x) {
    arblibJNI.fmpz_poly_scalar_fdiv_fmpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpz_poly_scalar_tdiv_ui(fmpz_poly_struct poly1, fmpz_poly_struct poly2, long x) {
    arblibJNI.fmpz_poly_scalar_tdiv_ui(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, x);
  }

  public static void fmpz_poly_scalar_tdiv_si(fmpz_poly_struct poly1, fmpz_poly_struct poly2, int x) {
    arblibJNI.fmpz_poly_scalar_tdiv_si(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, x);
  }

  public static void fmpz_poly_scalar_tdiv_fmpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, SWIGTYPE_p_long x) {
    arblibJNI.fmpz_poly_scalar_tdiv_fmpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpz_poly_scalar_divexact_ui(fmpz_poly_struct poly1, fmpz_poly_struct poly2, long x) {
    arblibJNI.fmpz_poly_scalar_divexact_ui(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, x);
  }

  public static void fmpz_poly_scalar_divexact_si(fmpz_poly_struct poly1, fmpz_poly_struct poly2, int x) {
    arblibJNI.fmpz_poly_scalar_divexact_si(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, x);
  }

  public static void fmpz_poly_scalar_divexact_fmpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, SWIGTYPE_p_long x) {
    arblibJNI.fmpz_poly_scalar_divexact_fmpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpz_poly_scalar_fdiv_2exp(fmpz_poly_struct poly1, fmpz_poly_struct poly2, long exp) {
    arblibJNI.fmpz_poly_scalar_fdiv_2exp(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, exp);
  }

  public static void fmpz_poly_scalar_tdiv_2exp(fmpz_poly_struct poly1, fmpz_poly_struct poly2, long exp) {
    arblibJNI.fmpz_poly_scalar_tdiv_2exp(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, exp);
  }

  public static void fmpz_poly_scalar_mul_2exp(fmpz_poly_struct poly1, fmpz_poly_struct poly2, long exp) {
    arblibJNI.fmpz_poly_scalar_mul_2exp(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, exp);
  }

  public static void fmpz_poly_scalar_mod_fmpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, SWIGTYPE_p_long x) {
    arblibJNI.fmpz_poly_scalar_mod_fmpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpz_poly_scalar_smod_fmpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, SWIGTYPE_p_long x) {
    arblibJNI.fmpz_poly_scalar_smod_fmpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, SWIGTYPE_p_long.getCPtr(x));
  }

  public static int _fmpz_poly_remove_content_2exp(SWIGTYPE_p_long pol, int len) {
    return arblibJNI._fmpz_poly_remove_content_2exp(SWIGTYPE_p_long.getCPtr(pol), len);
  }

  public static void _fmpz_poly_scale_2exp(SWIGTYPE_p_long pol, int len, int k) {
    arblibJNI._fmpz_poly_scale_2exp(SWIGTYPE_p_long.getCPtr(pol), len, k);
  }

  public static void _fmpz_poly_bit_pack(SWIGTYPE_p_unsigned_long arr, SWIGTYPE_p_long poly, int len, long bit_size, int negate) {
    arblibJNI._fmpz_poly_bit_pack(SWIGTYPE_p_unsigned_long.getCPtr(arr), SWIGTYPE_p_long.getCPtr(poly), len, bit_size, negate);
  }

  public static int _fmpz_poly_bit_unpack(SWIGTYPE_p_long poly, int len, SWIGTYPE_p_unsigned_long arr, long bit_size, int negate) {
    return arblibJNI._fmpz_poly_bit_unpack(SWIGTYPE_p_long.getCPtr(poly), len, SWIGTYPE_p_unsigned_long.getCPtr(arr), bit_size, negate);
  }

  public static void _fmpz_poly_bit_unpack_unsigned(SWIGTYPE_p_long poly, int len, SWIGTYPE_p_unsigned_long arr, long bit_size) {
    arblibJNI._fmpz_poly_bit_unpack_unsigned(SWIGTYPE_p_long.getCPtr(poly), len, SWIGTYPE_p_unsigned_long.getCPtr(arr), bit_size);
  }

  public static void fmpz_poly_bit_pack(SWIGTYPE_p_long f, fmpz_poly_struct poly, long bit_size) {
    arblibJNI.fmpz_poly_bit_pack(SWIGTYPE_p_long.getCPtr(f), fmpz_poly_struct.getCPtr(poly), poly, bit_size);
  }

  public static void fmpz_poly_bit_unpack(fmpz_poly_struct poly, SWIGTYPE_p_long f, long bit_size) {
    arblibJNI.fmpz_poly_bit_unpack(fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(f), bit_size);
  }

  public static void fmpz_poly_bit_unpack_unsigned(fmpz_poly_struct poly, SWIGTYPE_p_long f, long bit_size) {
    arblibJNI.fmpz_poly_bit_unpack_unsigned(fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(f), bit_size);
  }

  public static void _fmpz_poly_mul_classical(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_mul_classical(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_mul_classical(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_mul_classical(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_mullow_classical(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2, int n) {
    arblibJNI._fmpz_poly_mullow_classical(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2, n);
  }

  public static void fmpz_poly_mullow_classical(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_mullow_classical(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpz_poly_mulhigh_classical(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2, int start) {
    arblibJNI._fmpz_poly_mulhigh_classical(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2, start);
  }

  public static void fmpz_poly_mulhigh_classical(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int start) {
    arblibJNI.fmpz_poly_mulhigh_classical(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, start);
  }

  public static void _fmpz_poly_mulmid_classical(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_mulmid_classical(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_mulmid_classical(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_mulmid_classical(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void fmpz_poly_mul_karatsuba(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_mul_karatsuba(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_mul_karatsuba(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_mul_karatsuba(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void _fmpz_poly_mullow_karatsuba_n(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, SWIGTYPE_p_long poly2, int n) {
    arblibJNI._fmpz_poly_mullow_karatsuba_n(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(poly2), n);
  }

  public static void fmpz_poly_mullow_karatsuba_n(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_mullow_karatsuba_n(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpz_poly_mulhigh_karatsuba_n(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, SWIGTYPE_p_long poly2, int len) {
    arblibJNI._fmpz_poly_mulhigh_karatsuba_n(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(poly2), len);
  }

  public static void fmpz_poly_mulhigh_karatsuba_n(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int length) {
    arblibJNI.fmpz_poly_mulhigh_karatsuba_n(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, length);
  }

  public static void _fmpz_poly_mul_KS(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_mul_KS(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_mul_KS(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_mul_KS(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_mullow_KS(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2, int n) {
    arblibJNI._fmpz_poly_mullow_KS(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2, n);
  }

  public static void fmpz_poly_mullow_KS(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_mullow_KS(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpz_poly_mul_SS(SWIGTYPE_p_long output, SWIGTYPE_p_long input1, int length1, SWIGTYPE_p_long input2, int length2) {
    arblibJNI._fmpz_poly_mul_SS(SWIGTYPE_p_long.getCPtr(output), SWIGTYPE_p_long.getCPtr(input1), length1, SWIGTYPE_p_long.getCPtr(input2), length2);
  }

  public static void fmpz_poly_mul_SS(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_mul_SS(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_mullow_SS(SWIGTYPE_p_long output, SWIGTYPE_p_long input1, int length1, SWIGTYPE_p_long input2, int length2, int n) {
    arblibJNI._fmpz_poly_mullow_SS(SWIGTYPE_p_long.getCPtr(output), SWIGTYPE_p_long.getCPtr(input1), length1, SWIGTYPE_p_long.getCPtr(input2), length2, n);
  }

  public static void fmpz_poly_mullow_SS(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_mullow_SS(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpz_poly_mul(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_mul(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_mul(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_mul(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_mullow(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2, int n) {
    arblibJNI._fmpz_poly_mullow(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2, n);
  }

  public static void fmpz_poly_mullow(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_mullow(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void fmpz_poly_mulhigh_n(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_mulhigh_n(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void fmpz_poly_mul_SS_precache_init(fmpz_poly_mul_precache_struct pre, int len1, int bits1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_mul_SS_precache_init(fmpz_poly_mul_precache_struct.getCPtr(pre), pre, len1, bits1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void fmpz_poly_mul_precache_clear(fmpz_poly_mul_precache_struct pre) {
    arblibJNI.fmpz_poly_mul_precache_clear(fmpz_poly_mul_precache_struct.getCPtr(pre), pre);
  }

  public static void _fmpz_poly_mullow_SS_precache(SWIGTYPE_p_long output, SWIGTYPE_p_long input1, int len1, fmpz_poly_mul_precache_struct pre, int trunc) {
    arblibJNI._fmpz_poly_mullow_SS_precache(SWIGTYPE_p_long.getCPtr(output), SWIGTYPE_p_long.getCPtr(input1), len1, fmpz_poly_mul_precache_struct.getCPtr(pre), pre, trunc);
  }

  public static void fmpz_poly_mullow_SS_precache(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_mul_precache_struct pre, int n) {
    arblibJNI.fmpz_poly_mullow_SS_precache(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_mul_precache_struct.getCPtr(pre), pre, n);
  }

  public static void fmpz_poly_mul_SS_precache(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_mul_precache_struct pre) {
    arblibJNI.fmpz_poly_mul_SS_precache(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_mul_precache_struct.getCPtr(pre), pre);
  }

  public static void _fmpz_poly_sqr_KS(SWIGTYPE_p_long rop, SWIGTYPE_p_long op, int len) {
    arblibJNI._fmpz_poly_sqr_KS(SWIGTYPE_p_long.getCPtr(rop), SWIGTYPE_p_long.getCPtr(op), len);
  }

  public static void fmpz_poly_sqr_KS(fmpz_poly_struct rop, fmpz_poly_struct op) {
    arblibJNI.fmpz_poly_sqr_KS(fmpz_poly_struct.getCPtr(rop), rop, fmpz_poly_struct.getCPtr(op), op);
  }

  public static void fmpz_poly_sqr_karatsuba(fmpz_poly_struct rop, fmpz_poly_struct op) {
    arblibJNI.fmpz_poly_sqr_karatsuba(fmpz_poly_struct.getCPtr(rop), rop, fmpz_poly_struct.getCPtr(op), op);
  }

  public static void _fmpz_poly_sqr_karatsuba(SWIGTYPE_p_long rop, SWIGTYPE_p_long op, int len) {
    arblibJNI._fmpz_poly_sqr_karatsuba(SWIGTYPE_p_long.getCPtr(rop), SWIGTYPE_p_long.getCPtr(op), len);
  }

  public static void _fmpz_poly_sqr_classical(SWIGTYPE_p_long rop, SWIGTYPE_p_long op, int len) {
    arblibJNI._fmpz_poly_sqr_classical(SWIGTYPE_p_long.getCPtr(rop), SWIGTYPE_p_long.getCPtr(op), len);
  }

  public static void fmpz_poly_sqr_classical(fmpz_poly_struct rop, fmpz_poly_struct op) {
    arblibJNI.fmpz_poly_sqr_classical(fmpz_poly_struct.getCPtr(rop), rop, fmpz_poly_struct.getCPtr(op), op);
  }

  public static void _fmpz_poly_sqr(SWIGTYPE_p_long rop, SWIGTYPE_p_long op, int len) {
    arblibJNI._fmpz_poly_sqr(SWIGTYPE_p_long.getCPtr(rop), SWIGTYPE_p_long.getCPtr(op), len);
  }

  public static void fmpz_poly_sqr(fmpz_poly_struct rop, fmpz_poly_struct op) {
    arblibJNI.fmpz_poly_sqr(fmpz_poly_struct.getCPtr(rop), rop, fmpz_poly_struct.getCPtr(op), op);
  }

  public static void _fmpz_poly_sqrlow_KS(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, int n) {
    arblibJNI._fmpz_poly_sqrlow_KS(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, n);
  }

  public static void fmpz_poly_sqrlow_KS(fmpz_poly_struct res, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_sqrlow_KS(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_sqrlow_karatsuba_n(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int n) {
    arblibJNI._fmpz_poly_sqrlow_karatsuba_n(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), n);
  }

  public static void fmpz_poly_sqrlow_karatsuba_n(fmpz_poly_struct res, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_sqrlow_karatsuba_n(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_sqrlow_classical(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, int n) {
    arblibJNI._fmpz_poly_sqrlow_classical(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, n);
  }

  public static void fmpz_poly_sqrlow_classical(fmpz_poly_struct res, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_sqrlow_classical(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_sqrlow(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, int n) {
    arblibJNI._fmpz_poly_sqrlow(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, n);
  }

  public static void fmpz_poly_sqrlow(fmpz_poly_struct res, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_sqrlow(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_pow_multinomial(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, long e) {
    arblibJNI._fmpz_poly_pow_multinomial(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, e);
  }

  public static void fmpz_poly_pow_multinomial(fmpz_poly_struct res, fmpz_poly_struct poly, long e) {
    arblibJNI.fmpz_poly_pow_multinomial(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, e);
  }

  public static void _fmpz_poly_pow_binomial(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, long e) {
    arblibJNI._fmpz_poly_pow_binomial(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), e);
  }

  public static void fmpz_poly_pow_binomial(fmpz_poly_struct res, fmpz_poly_struct poly, long e) {
    arblibJNI.fmpz_poly_pow_binomial(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, e);
  }

  public static void _fmpz_poly_pow_binexp(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, long e) {
    arblibJNI._fmpz_poly_pow_binexp(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, e);
  }

  public static void fmpz_poly_pow_binexp(fmpz_poly_struct res, fmpz_poly_struct poly, long e) {
    arblibJNI.fmpz_poly_pow_binexp(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, e);
  }

  public static void _fmpz_poly_pow_addchains(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, SWIGTYPE_p_int a, int n) {
    arblibJNI._fmpz_poly_pow_addchains(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, SWIGTYPE_p_int.getCPtr(a), n);
  }

  public static void fmpz_poly_pow_addchains(fmpz_poly_struct res, fmpz_poly_struct poly, long e) {
    arblibJNI.fmpz_poly_pow_addchains(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, e);
  }

  public static void _fmpz_poly_pow_small(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, long e) {
    arblibJNI._fmpz_poly_pow_small(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, e);
  }

  public static void _fmpz_poly_pow(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, long e) {
    arblibJNI._fmpz_poly_pow(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, e);
  }

  public static void fmpz_poly_pow(fmpz_poly_struct res, fmpz_poly_struct poly, long e) {
    arblibJNI.fmpz_poly_pow(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, e);
  }

  public static void _fmpz_poly_pow_trunc(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, long e, int n) {
    arblibJNI._fmpz_poly_pow_trunc(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), e, n);
  }

  public static void fmpz_poly_pow_trunc(fmpz_poly_struct res, fmpz_poly_struct poly, long e, int n) {
    arblibJNI.fmpz_poly_pow_trunc(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, e, n);
  }

  public static void _fmpz_poly_shift_left(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, int n) {
    arblibJNI._fmpz_poly_shift_left(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, n);
  }

  public static void _fmpz_poly_shift_right(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, int n) {
    arblibJNI._fmpz_poly_shift_right(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, n);
  }

  public static void fmpz_poly_shift_left(fmpz_poly_struct res, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_shift_left(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpz_poly_shift_right(fmpz_poly_struct res, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_shift_right(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_2norm(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len) {
    arblibJNI._fmpz_poly_2norm(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static void fmpz_poly_2norm(SWIGTYPE_p_long res, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_2norm(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static long _fmpz_poly_2norm_normalised_bits(SWIGTYPE_p_long poly, int len) {
    return arblibJNI._fmpz_poly_2norm_normalised_bits(SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static long fmpz_poly_max_limbs(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_max_limbs(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpz_poly_max_bits(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_max_bits(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_height(SWIGTYPE_p_long res, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_height(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_gcd_subresultant(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_gcd_subresultant(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_gcd_subresultant(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_gcd_subresultant(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static int _fmpz_poly_gcd_heuristic(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    return arblibJNI._fmpz_poly_gcd_heuristic(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static int fmpz_poly_gcd_heuristic(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    return arblibJNI.fmpz_poly_gcd_heuristic(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_gcd_modular(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_gcd_modular(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_gcd_modular(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_gcd_modular(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_gcd(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_gcd(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_gcd(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_gcd(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_lcm(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_lcm(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_lcm(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_lcm(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_resultant_euclidean(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_resultant_euclidean(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_resultant_euclidean(SWIGTYPE_p_long res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_resultant_euclidean(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_resultant_modular(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_resultant_modular(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_resultant_modular(SWIGTYPE_p_long res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_resultant_modular(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_resultant(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_resultant(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_resultant(SWIGTYPE_p_long res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_resultant(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_resultant_modular_div(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2, SWIGTYPE_p_long divisor, int nbits) {
    arblibJNI._fmpz_poly_resultant_modular_div(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2, SWIGTYPE_p_long.getCPtr(divisor), nbits);
  }

  public static void fmpz_poly_resultant_modular_div(SWIGTYPE_p_long res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, SWIGTYPE_p_long divisor, int nbits) {
    arblibJNI.fmpz_poly_resultant_modular_div(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, SWIGTYPE_p_long.getCPtr(divisor), nbits);
  }

  public static void _fmpz_poly_xgcd_modular(SWIGTYPE_p_long r, SWIGTYPE_p_long s, SWIGTYPE_p_long t, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_xgcd_modular(SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(s), SWIGTYPE_p_long.getCPtr(t), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_xgcd_modular(SWIGTYPE_p_long r, fmpz_poly_struct s, fmpz_poly_struct t, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_xgcd_modular(SWIGTYPE_p_long.getCPtr(r), fmpz_poly_struct.getCPtr(s), s, fmpz_poly_struct.getCPtr(t), t, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_xgcd(SWIGTYPE_p_long r, SWIGTYPE_p_long s, SWIGTYPE_p_long t, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_xgcd(SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(s), SWIGTYPE_p_long.getCPtr(t), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_xgcd(SWIGTYPE_p_long r, fmpz_poly_struct s, fmpz_poly_struct t, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_xgcd(SWIGTYPE_p_long.getCPtr(r), fmpz_poly_struct.getCPtr(s), s, fmpz_poly_struct.getCPtr(t), t, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_discriminant(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len) {
    arblibJNI._fmpz_poly_discriminant(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static void fmpz_poly_discriminant(SWIGTYPE_p_long res, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_discriminant(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_content(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len) {
    arblibJNI._fmpz_poly_content(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static void fmpz_poly_content(SWIGTYPE_p_long res, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_content(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_primitive_part(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len) {
    arblibJNI._fmpz_poly_primitive_part(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static void fmpz_poly_primitive_part(fmpz_poly_struct res, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_primitive_part(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static int _fmpz_poly_is_squarefree(SWIGTYPE_p_long poly, int len) {
    return arblibJNI._fmpz_poly_is_squarefree(SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static int fmpz_poly_is_squarefree(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_is_squarefree(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static int _fmpz_poly_divrem_basecase(SWIGTYPE_p_long Q, SWIGTYPE_p_long R, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB, int exact) {
    return arblibJNI._fmpz_poly_divrem_basecase(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB, exact);
  }

  public static void fmpz_poly_divrem_basecase(fmpz_poly_struct Q, fmpz_poly_struct R, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_divrem_basecase(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(R), R, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static int _fmpz_poly_divrem_divconquer_recursive(SWIGTYPE_p_long Q, SWIGTYPE_p_long BQ, SWIGTYPE_p_long W, SWIGTYPE_p_long A, SWIGTYPE_p_long B, int lenB, int exact) {
    return arblibJNI._fmpz_poly_divrem_divconquer_recursive(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(BQ), SWIGTYPE_p_long.getCPtr(W), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(B), lenB, exact);
  }

  public static int _fmpz_poly_divrem_divconquer(SWIGTYPE_p_long Q, SWIGTYPE_p_long R, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB, int exact) {
    return arblibJNI._fmpz_poly_divrem_divconquer(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB, exact);
  }

  public static void fmpz_poly_divrem_divconquer(fmpz_poly_struct Q, fmpz_poly_struct R, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_divrem_divconquer(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(R), R, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static int _fmpz_poly_divrem(SWIGTYPE_p_long Q, SWIGTYPE_p_long R, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB, int exact) {
    return arblibJNI._fmpz_poly_divrem(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB, exact);
  }

  public static void fmpz_poly_divrem(fmpz_poly_struct Q, fmpz_poly_struct R, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_divrem(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(R), R, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static int _fmpz_poly_div_basecase(SWIGTYPE_p_long Q, SWIGTYPE_p_long R, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB, int exact) {
    return arblibJNI._fmpz_poly_div_basecase(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB, exact);
  }

  public static void fmpz_poly_div_basecase(fmpz_poly_struct Q, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_div_basecase(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static int _fmpz_poly_divremlow_divconquer_recursive(SWIGTYPE_p_long Q, SWIGTYPE_p_long QB, SWIGTYPE_p_long A, SWIGTYPE_p_long B, int lenB, int exact) {
    return arblibJNI._fmpz_poly_divremlow_divconquer_recursive(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(QB), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(B), lenB, exact);
  }

  public static int _fmpz_poly_div_divconquer_recursive(SWIGTYPE_p_long Q, SWIGTYPE_p_long temp, SWIGTYPE_p_long A, SWIGTYPE_p_long B, int lenB, int exact) {
    return arblibJNI._fmpz_poly_div_divconquer_recursive(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(temp), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(B), lenB, exact);
  }

  public static int _fmpz_poly_div_divconquer(SWIGTYPE_p_long Q, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB, int exact) {
    return arblibJNI._fmpz_poly_div_divconquer(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB, exact);
  }

  public static void fmpz_poly_div_divconquer(fmpz_poly_struct Q, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_div_divconquer(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static int _fmpz_poly_div(SWIGTYPE_p_long Q, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB, int exact) {
    return arblibJNI._fmpz_poly_div(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB, exact);
  }

  public static void fmpz_poly_div(fmpz_poly_struct Q, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_div(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void _fmpz_poly_preinvert(SWIGTYPE_p_long B_inv, SWIGTYPE_p_long B, int n) {
    arblibJNI._fmpz_poly_preinvert(SWIGTYPE_p_long.getCPtr(B_inv), SWIGTYPE_p_long.getCPtr(B), n);
  }

  public static void fmpz_poly_preinvert(fmpz_poly_struct B_inv, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_preinvert(fmpz_poly_struct.getCPtr(B_inv), B_inv, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void _fmpz_poly_div_preinv(SWIGTYPE_p_long Q, SWIGTYPE_p_long A, int len1, SWIGTYPE_p_long B, SWIGTYPE_p_long B_inv, int len2) {
    arblibJNI._fmpz_poly_div_preinv(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(A), len1, SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(B_inv), len2);
  }

  public static void fmpz_poly_div_preinv(fmpz_poly_struct Q, fmpz_poly_struct A, fmpz_poly_struct B, fmpz_poly_struct B_inv) {
    arblibJNI.fmpz_poly_div_preinv(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B, fmpz_poly_struct.getCPtr(B_inv), B_inv);
  }

  public static void _fmpz_poly_divrem_preinv(SWIGTYPE_p_long Q, SWIGTYPE_p_long A, int len1, SWIGTYPE_p_long B, SWIGTYPE_p_long B_inv, int len2) {
    arblibJNI._fmpz_poly_divrem_preinv(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(A), len1, SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(B_inv), len2);
  }

  public static void fmpz_poly_divrem_preinv(fmpz_poly_struct Q, fmpz_poly_struct R, fmpz_poly_struct A, fmpz_poly_struct B, fmpz_poly_struct B_inv) {
    arblibJNI.fmpz_poly_divrem_preinv(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(R), R, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B, fmpz_poly_struct.getCPtr(B_inv), B_inv);
  }

  public static SWIGTYPE_p_p_long _fmpz_poly_powers_precompute(SWIGTYPE_p_long B, int len) {
    long cPtr = arblibJNI._fmpz_poly_powers_precompute(SWIGTYPE_p_long.getCPtr(B), len);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_long(cPtr, false);
  }

  public static void fmpz_poly_powers_precompute(fmpz_poly_powers_precomp_struct pinv, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_powers_precompute(fmpz_poly_powers_precomp_struct.getCPtr(pinv), pinv, fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_powers_clear(SWIGTYPE_p_p_long powers, int len) {
    arblibJNI._fmpz_poly_powers_clear(SWIGTYPE_p_p_long.getCPtr(powers), len);
  }

  public static void fmpz_poly_powers_clear(fmpz_poly_powers_precomp_struct pinv) {
    arblibJNI.fmpz_poly_powers_clear(fmpz_poly_powers_precomp_struct.getCPtr(pinv), pinv);
  }

  public static void _fmpz_poly_rem_powers_precomp(SWIGTYPE_p_long A, int m, SWIGTYPE_p_long B, int n, SWIGTYPE_p_p_long powers) {
    arblibJNI._fmpz_poly_rem_powers_precomp(SWIGTYPE_p_long.getCPtr(A), m, SWIGTYPE_p_long.getCPtr(B), n, SWIGTYPE_p_p_long.getCPtr(powers));
  }

  public static void fmpz_poly_rem_powers_precomp(fmpz_poly_struct R, fmpz_poly_struct A, fmpz_poly_struct B, fmpz_poly_powers_precomp_struct B_inv) {
    arblibJNI.fmpz_poly_rem_powers_precomp(fmpz_poly_struct.getCPtr(R), R, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B, fmpz_poly_powers_precomp_struct.getCPtr(B_inv), B_inv);
  }

  public static void _fmpz_poly_rem_basecase(SWIGTYPE_p_long Q, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB) {
    arblibJNI._fmpz_poly_rem_basecase(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB);
  }

  public static void fmpz_poly_rem_basecase(fmpz_poly_struct R, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_rem_basecase(fmpz_poly_struct.getCPtr(R), R, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void _fmpz_poly_rem(SWIGTYPE_p_long R, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB) {
    arblibJNI._fmpz_poly_rem(SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB);
  }

  public static void fmpz_poly_rem(fmpz_poly_struct R, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_rem(fmpz_poly_struct.getCPtr(R), R, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void fmpz_poly_div_root(fmpz_poly_struct Q, fmpz_poly_struct A, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_poly_div_root(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpz_poly_div_root(SWIGTYPE_p_long Q, SWIGTYPE_p_long A, int len, SWIGTYPE_p_long c) {
    arblibJNI._fmpz_poly_div_root(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(A), len, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpz_poly_inv_series_basecase(SWIGTYPE_p_long Qinv, SWIGTYPE_p_long Q, int Qlen, int n) {
    arblibJNI._fmpz_poly_inv_series_basecase(SWIGTYPE_p_long.getCPtr(Qinv), SWIGTYPE_p_long.getCPtr(Q), Qlen, n);
  }

  public static void fmpz_poly_inv_series_basecase(fmpz_poly_struct Qinv, fmpz_poly_struct Q, int n) {
    arblibJNI.fmpz_poly_inv_series_basecase(fmpz_poly_struct.getCPtr(Qinv), Qinv, fmpz_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _fmpz_poly_inv_series_newton(SWIGTYPE_p_long Qinv, SWIGTYPE_p_long Q, int Qlen, int n) {
    arblibJNI._fmpz_poly_inv_series_newton(SWIGTYPE_p_long.getCPtr(Qinv), SWIGTYPE_p_long.getCPtr(Q), Qlen, n);
  }

  public static void fmpz_poly_inv_series_newton(fmpz_poly_struct Qinv, fmpz_poly_struct Q, int n) {
    arblibJNI.fmpz_poly_inv_series_newton(fmpz_poly_struct.getCPtr(Qinv), Qinv, fmpz_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _fmpz_poly_inv_series(SWIGTYPE_p_long Qinv, SWIGTYPE_p_long Q, int Qlen, int n) {
    arblibJNI._fmpz_poly_inv_series(SWIGTYPE_p_long.getCPtr(Qinv), SWIGTYPE_p_long.getCPtr(Q), Qlen, n);
  }

  public static void fmpz_poly_inv_series(fmpz_poly_struct Qinv, fmpz_poly_struct Q, int n) {
    arblibJNI.fmpz_poly_inv_series(fmpz_poly_struct.getCPtr(Qinv), Qinv, fmpz_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _fmpz_poly_div_series_basecase(SWIGTYPE_p_long Q, SWIGTYPE_p_long A, int Alen, SWIGTYPE_p_long B, int Blen, int n) {
    arblibJNI._fmpz_poly_div_series_basecase(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(A), Alen, SWIGTYPE_p_long.getCPtr(B), Blen, n);
  }

  public static void _fmpz_poly_div_series_divconquer(SWIGTYPE_p_long Q, SWIGTYPE_p_long A, int Alen, SWIGTYPE_p_long B, int Blen, int n) {
    arblibJNI._fmpz_poly_div_series_divconquer(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(A), Alen, SWIGTYPE_p_long.getCPtr(B), Blen, n);
  }

  public static void _fmpz_poly_div_series(SWIGTYPE_p_long Q, SWIGTYPE_p_long A, int Alen, SWIGTYPE_p_long B, int Blen, int n) {
    arblibJNI._fmpz_poly_div_series(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(A), Alen, SWIGTYPE_p_long.getCPtr(B), Blen, n);
  }

  public static void fmpz_poly_div_series_basecase(fmpz_poly_struct Q, fmpz_poly_struct A, fmpz_poly_struct B, int n) {
    arblibJNI.fmpz_poly_div_series_basecase(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B, n);
  }

  public static void fmpz_poly_div_series_divconquer(fmpz_poly_struct Q, fmpz_poly_struct A, fmpz_poly_struct B, int n) {
    arblibJNI.fmpz_poly_div_series_divconquer(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B, n);
  }

  public static void fmpz_poly_div_series(fmpz_poly_struct Q, fmpz_poly_struct A, fmpz_poly_struct B, int n) {
    arblibJNI.fmpz_poly_div_series(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B, n);
  }

  public static int _fmpz_poly_divides(SWIGTYPE_p_long q, SWIGTYPE_p_long a, int len1, SWIGTYPE_p_long b, int len2) {
    return arblibJNI._fmpz_poly_divides(SWIGTYPE_p_long.getCPtr(q), SWIGTYPE_p_long.getCPtr(a), len1, SWIGTYPE_p_long.getCPtr(b), len2);
  }

  public static int fmpz_poly_divides(fmpz_poly_struct q, fmpz_poly_struct a, fmpz_poly_struct b) {
    return arblibJNI.fmpz_poly_divides(fmpz_poly_struct.getCPtr(q), q, fmpz_poly_struct.getCPtr(a), a, fmpz_poly_struct.getCPtr(b), b);
  }

  public static int fmpz_poly_remove(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    return arblibJNI.fmpz_poly_remove(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_pseudo_divrem_basecase(SWIGTYPE_p_long Q, SWIGTYPE_p_long R, SWIGTYPE_p_unsigned_long d, SWIGTYPE_p_long A, int A_len, SWIGTYPE_p_long B, int B_len, fmpz_preinvn_struct inv) {
    arblibJNI._fmpz_poly_pseudo_divrem_basecase(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(d), SWIGTYPE_p_long.getCPtr(A), A_len, SWIGTYPE_p_long.getCPtr(B), B_len, fmpz_preinvn_struct.getCPtr(inv), inv);
  }

  public static void fmpz_poly_pseudo_divrem_basecase(fmpz_poly_struct Q, fmpz_poly_struct R, SWIGTYPE_p_unsigned_long d, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_pseudo_divrem_basecase(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(R), R, SWIGTYPE_p_unsigned_long.getCPtr(d), fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void _fmpz_poly_pseudo_divrem_divconquer(SWIGTYPE_p_long Q, SWIGTYPE_p_long R, SWIGTYPE_p_unsigned_long d, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB, fmpz_preinvn_struct inv) {
    arblibJNI._fmpz_poly_pseudo_divrem_divconquer(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(d), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB, fmpz_preinvn_struct.getCPtr(inv), inv);
  }

  public static void fmpz_poly_pseudo_divrem_divconquer(fmpz_poly_struct Q, fmpz_poly_struct R, SWIGTYPE_p_unsigned_long d, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_pseudo_divrem_divconquer(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(R), R, SWIGTYPE_p_unsigned_long.getCPtr(d), fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void _fmpz_poly_pseudo_divrem_cohen(SWIGTYPE_p_long Q, SWIGTYPE_p_long R, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB) {
    arblibJNI._fmpz_poly_pseudo_divrem_cohen(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB);
  }

  public static void fmpz_poly_pseudo_divrem_cohen(fmpz_poly_struct Q, fmpz_poly_struct R, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_pseudo_divrem_cohen(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(R), R, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void _fmpz_poly_pseudo_rem_cohen(SWIGTYPE_p_long R, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB) {
    arblibJNI._fmpz_poly_pseudo_rem_cohen(SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB);
  }

  public static void fmpz_poly_pseudo_rem_cohen(fmpz_poly_struct R, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_pseudo_rem_cohen(fmpz_poly_struct.getCPtr(R), R, fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void _fmpz_poly_pseudo_divrem(SWIGTYPE_p_long Q, SWIGTYPE_p_long R, SWIGTYPE_p_unsigned_long d, SWIGTYPE_p_long A, int A_len, SWIGTYPE_p_long B, int B_len, fmpz_preinvn_struct inv) {
    arblibJNI._fmpz_poly_pseudo_divrem(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(d), SWIGTYPE_p_long.getCPtr(A), A_len, SWIGTYPE_p_long.getCPtr(B), B_len, fmpz_preinvn_struct.getCPtr(inv), inv);
  }

  public static void fmpz_poly_pseudo_divrem(fmpz_poly_struct Q, fmpz_poly_struct R, SWIGTYPE_p_unsigned_long d, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_pseudo_divrem(fmpz_poly_struct.getCPtr(Q), Q, fmpz_poly_struct.getCPtr(R), R, SWIGTYPE_p_unsigned_long.getCPtr(d), fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void _fmpz_poly_pseudo_div(SWIGTYPE_p_long Q, SWIGTYPE_p_unsigned_long d, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB, fmpz_preinvn_struct inv) {
    arblibJNI._fmpz_poly_pseudo_div(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_unsigned_long.getCPtr(d), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB, fmpz_preinvn_struct.getCPtr(inv), inv);
  }

  public static void fmpz_poly_pseudo_div(fmpz_poly_struct Q, SWIGTYPE_p_unsigned_long d, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_pseudo_div(fmpz_poly_struct.getCPtr(Q), Q, SWIGTYPE_p_unsigned_long.getCPtr(d), fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void _fmpz_poly_pseudo_rem(SWIGTYPE_p_long R, SWIGTYPE_p_unsigned_long d, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB, fmpz_preinvn_struct inv) {
    arblibJNI._fmpz_poly_pseudo_rem(SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_unsigned_long.getCPtr(d), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB, fmpz_preinvn_struct.getCPtr(inv), inv);
  }

  public static void fmpz_poly_pseudo_rem(fmpz_poly_struct R, SWIGTYPE_p_unsigned_long d, fmpz_poly_struct A, fmpz_poly_struct B) {
    arblibJNI.fmpz_poly_pseudo_rem(fmpz_poly_struct.getCPtr(R), R, SWIGTYPE_p_unsigned_long.getCPtr(d), fmpz_poly_struct.getCPtr(A), A, fmpz_poly_struct.getCPtr(B), B);
  }

  public static void fmpz_poly_divlow_smodp(SWIGTYPE_p_long res, fmpz_poly_struct f, fmpz_poly_struct g, SWIGTYPE_p_long p, int n) {
    arblibJNI.fmpz_poly_divlow_smodp(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(f), f, fmpz_poly_struct.getCPtr(g), g, SWIGTYPE_p_long.getCPtr(p), n);
  }

  public static void fmpz_poly_divhigh_smodp(SWIGTYPE_p_long res, fmpz_poly_struct f, fmpz_poly_struct g, SWIGTYPE_p_long p, int n) {
    arblibJNI.fmpz_poly_divhigh_smodp(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(f), f, fmpz_poly_struct.getCPtr(g), g, SWIGTYPE_p_long.getCPtr(p), n);
  }

  public static void _fmpz_poly_derivative(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long poly, int len) {
    arblibJNI._fmpz_poly_derivative(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static void fmpz_poly_derivative(fmpz_poly_struct res, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_derivative(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_evaluate_divconquer_fmpz(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, SWIGTYPE_p_long a) {
    arblibJNI._fmpz_poly_evaluate_divconquer_fmpz(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, SWIGTYPE_p_long.getCPtr(a));
  }

  public static void fmpz_poly_evaluate_divconquer_fmpz(SWIGTYPE_p_long res, fmpz_poly_struct poly, SWIGTYPE_p_long a) {
    arblibJNI.fmpz_poly_evaluate_divconquer_fmpz(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(a));
  }

  public static void _fmpz_poly_evaluate_horner_fmpz(SWIGTYPE_p_long res, SWIGTYPE_p_long f, int len, SWIGTYPE_p_long a) {
    arblibJNI._fmpz_poly_evaluate_horner_fmpz(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(f), len, SWIGTYPE_p_long.getCPtr(a));
  }

  public static void fmpz_poly_evaluate_horner_fmpz(SWIGTYPE_p_long res, fmpz_poly_struct f, SWIGTYPE_p_long a) {
    arblibJNI.fmpz_poly_evaluate_horner_fmpz(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(f), f, SWIGTYPE_p_long.getCPtr(a));
  }

  public static void _fmpz_poly_evaluate_fmpz(SWIGTYPE_p_long res, SWIGTYPE_p_long f, int len, SWIGTYPE_p_long a) {
    arblibJNI._fmpz_poly_evaluate_fmpz(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(f), len, SWIGTYPE_p_long.getCPtr(a));
  }

  public static void fmpz_poly_evaluate_fmpz(SWIGTYPE_p_long res, fmpz_poly_struct f, SWIGTYPE_p_long a) {
    arblibJNI.fmpz_poly_evaluate_fmpz(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(f), f, SWIGTYPE_p_long.getCPtr(a));
  }

  public static void _fmpz_poly_evaluate_horner_fmpq(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long f, int len, SWIGTYPE_p_long anum, SWIGTYPE_p_long aden) {
    arblibJNI._fmpz_poly_evaluate_horner_fmpq(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(f), len, SWIGTYPE_p_long.getCPtr(anum), SWIGTYPE_p_long.getCPtr(aden));
  }

  public static void fmpz_poly_evaluate_horner_fmpq(fmpq res, fmpz_poly_struct f, fmpq a) {
    arblibJNI.fmpz_poly_evaluate_horner_fmpq(fmpq.getCPtr(res), res, fmpz_poly_struct.getCPtr(f), f, fmpq.getCPtr(a), a);
  }

  public static void _fmpz_poly_evaluate_divconquer_fmpq(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long f, int len, SWIGTYPE_p_long anum, SWIGTYPE_p_long aden) {
    arblibJNI._fmpz_poly_evaluate_divconquer_fmpq(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(f), len, SWIGTYPE_p_long.getCPtr(anum), SWIGTYPE_p_long.getCPtr(aden));
  }

  public static void fmpz_poly_evaluate_divconquer_fmpq(fmpq res, fmpz_poly_struct f, fmpq a) {
    arblibJNI.fmpz_poly_evaluate_divconquer_fmpq(fmpq.getCPtr(res), res, fmpz_poly_struct.getCPtr(f), f, fmpq.getCPtr(a), a);
  }

  public static void _fmpz_poly_evaluate_fmpq(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long f, int len, SWIGTYPE_p_long anum, SWIGTYPE_p_long aden) {
    arblibJNI._fmpz_poly_evaluate_fmpq(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(f), len, SWIGTYPE_p_long.getCPtr(anum), SWIGTYPE_p_long.getCPtr(aden));
  }

  public static void fmpz_poly_evaluate_fmpq(fmpq res, fmpz_poly_struct f, fmpq a) {
    arblibJNI.fmpz_poly_evaluate_fmpq(fmpq.getCPtr(res), res, fmpz_poly_struct.getCPtr(f), f, fmpq.getCPtr(a), a);
  }

  public static void fmpz_poly_evaluate_mpq(__mpq_struct res, fmpz_poly_struct f, __mpq_struct a) {
    arblibJNI.fmpz_poly_evaluate_mpq(__mpq_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(f), f, __mpq_struct.getCPtr(a), a);
  }

  public static long _fmpz_poly_evaluate_mod(SWIGTYPE_p_long poly, int len, long a, long n, long ninv) {
    return arblibJNI._fmpz_poly_evaluate_mod(SWIGTYPE_p_long.getCPtr(poly), len, a, n, ninv);
  }

  public static long fmpz_poly_evaluate_mod(fmpz_poly_struct poly, long a, long n) {
    return arblibJNI.fmpz_poly_evaluate_mod(fmpz_poly_struct.getCPtr(poly), poly, a, n);
  }

  public static double _fmpz_poly_evaluate_horner_d(SWIGTYPE_p_long poly, int n, double d) {
    return arblibJNI._fmpz_poly_evaluate_horner_d(SWIGTYPE_p_long.getCPtr(poly), n, d);
  }

  public static double fmpz_poly_evaluate_horner_d(fmpz_poly_struct poly, double d) {
    return arblibJNI.fmpz_poly_evaluate_horner_d(fmpz_poly_struct.getCPtr(poly), poly, d);
  }

  public static double _fmpz_poly_evaluate_horner_d_2exp(SWIGTYPE_p_long exp, SWIGTYPE_p_long poly, int n, double d) {
    return arblibJNI._fmpz_poly_evaluate_horner_d_2exp(SWIGTYPE_p_long.getCPtr(exp), SWIGTYPE_p_long.getCPtr(poly), n, d);
  }

  public static double fmpz_poly_evaluate_horner_d_2exp(SWIGTYPE_p_long exp, fmpz_poly_struct poly, double d) {
    return arblibJNI.fmpz_poly_evaluate_horner_d_2exp(SWIGTYPE_p_long.getCPtr(exp), fmpz_poly_struct.getCPtr(poly), poly, d);
  }

  public static double _fmpz_poly_evaluate_horner_d_2exp2(SWIGTYPE_p_long exp, SWIGTYPE_p_long poly, int n, double d, int dexp, long prec_in) {
    return arblibJNI._fmpz_poly_evaluate_horner_d_2exp2(SWIGTYPE_p_long.getCPtr(exp), SWIGTYPE_p_long.getCPtr(poly), n, d, dexp, prec_in);
  }

  public static double fmpz_poly_evaluate_horner_d_2exp2(SWIGTYPE_p_long exp, fmpz_poly_struct poly, double d, int dexp, long prec) {
    return arblibJNI.fmpz_poly_evaluate_horner_d_2exp2(SWIGTYPE_p_long.getCPtr(exp), fmpz_poly_struct.getCPtr(poly), poly, d, dexp, prec);
  }

  public static void _fmpz_poly_compose_horner(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_compose_horner(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_compose_horner(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_compose_horner(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_compose_divconquer(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_compose_divconquer(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_compose_divconquer(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_compose_divconquer(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_compose(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2) {
    arblibJNI._fmpz_poly_compose(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2);
  }

  public static void fmpz_poly_compose(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2) {
    arblibJNI.fmpz_poly_compose(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpz_poly_taylor_shift_horner(SWIGTYPE_p_long poly, SWIGTYPE_p_long c, int n) {
    arblibJNI._fmpz_poly_taylor_shift_horner(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(c), n);
  }

  public static void fmpz_poly_taylor_shift_horner(fmpz_poly_struct g, fmpz_poly_struct f, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_poly_taylor_shift_horner(fmpz_poly_struct.getCPtr(g), g, fmpz_poly_struct.getCPtr(f), f, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpz_poly_taylor_shift_divconquer(SWIGTYPE_p_long poly, SWIGTYPE_p_long c, int n) {
    arblibJNI._fmpz_poly_taylor_shift_divconquer(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(c), n);
  }

  public static void fmpz_poly_taylor_shift_divconquer(fmpz_poly_struct g, fmpz_poly_struct f, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_poly_taylor_shift_divconquer(fmpz_poly_struct.getCPtr(g), g, fmpz_poly_struct.getCPtr(f), f, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpz_poly_taylor_shift_multi_mod(SWIGTYPE_p_long poly, SWIGTYPE_p_long c, int n) {
    arblibJNI._fmpz_poly_taylor_shift_multi_mod(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(c), n);
  }

  public static void fmpz_poly_taylor_shift_multi_mod(fmpz_poly_struct g, fmpz_poly_struct f, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_poly_taylor_shift_multi_mod(fmpz_poly_struct.getCPtr(g), g, fmpz_poly_struct.getCPtr(f), f, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpz_poly_taylor_shift(SWIGTYPE_p_long poly, SWIGTYPE_p_long c, int n) {
    arblibJNI._fmpz_poly_taylor_shift(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(c), n);
  }

  public static void fmpz_poly_taylor_shift(fmpz_poly_struct g, fmpz_poly_struct f, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_poly_taylor_shift(fmpz_poly_struct.getCPtr(g), g, fmpz_poly_struct.getCPtr(f), f, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpz_poly_compose_series_brent_kung(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2, int n) {
    arblibJNI._fmpz_poly_compose_series_brent_kung(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2, n);
  }

  public static void fmpz_poly_compose_series_brent_kung(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_compose_series_brent_kung(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpz_poly_compose_series_horner(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2, int n) {
    arblibJNI._fmpz_poly_compose_series_horner(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2, n);
  }

  public static void fmpz_poly_compose_series_horner(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_compose_series_horner(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpz_poly_compose_series(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long poly2, int len2, int n) {
    arblibJNI._fmpz_poly_compose_series(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(poly2), len2, n);
  }

  public static void fmpz_poly_compose_series(fmpz_poly_struct res, fmpz_poly_struct poly1, fmpz_poly_struct poly2, int n) {
    arblibJNI.fmpz_poly_compose_series(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpz_poly_revert_series_lagrange(SWIGTYPE_p_long Qinv, SWIGTYPE_p_long Q, int Qlen, int n) {
    arblibJNI._fmpz_poly_revert_series_lagrange(SWIGTYPE_p_long.getCPtr(Qinv), SWIGTYPE_p_long.getCPtr(Q), Qlen, n);
  }

  public static void fmpz_poly_revert_series_lagrange(fmpz_poly_struct Qinv, fmpz_poly_struct Q, int n) {
    arblibJNI.fmpz_poly_revert_series_lagrange(fmpz_poly_struct.getCPtr(Qinv), Qinv, fmpz_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _fmpz_poly_revert_series_lagrange_fast(SWIGTYPE_p_long Qinv, SWIGTYPE_p_long Q, int Qlen, int n) {
    arblibJNI._fmpz_poly_revert_series_lagrange_fast(SWIGTYPE_p_long.getCPtr(Qinv), SWIGTYPE_p_long.getCPtr(Q), Qlen, n);
  }

  public static void fmpz_poly_revert_series_lagrange_fast(fmpz_poly_struct Qinv, fmpz_poly_struct Q, int n) {
    arblibJNI.fmpz_poly_revert_series_lagrange_fast(fmpz_poly_struct.getCPtr(Qinv), Qinv, fmpz_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _fmpz_poly_revert_series_newton(SWIGTYPE_p_long Qinv, SWIGTYPE_p_long Q, int Qlen, int n) {
    arblibJNI._fmpz_poly_revert_series_newton(SWIGTYPE_p_long.getCPtr(Qinv), SWIGTYPE_p_long.getCPtr(Q), Qlen, n);
  }

  public static void fmpz_poly_revert_series_newton(fmpz_poly_struct Qinv, fmpz_poly_struct Q, int n) {
    arblibJNI.fmpz_poly_revert_series_newton(fmpz_poly_struct.getCPtr(Qinv), Qinv, fmpz_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _fmpz_poly_revert_series(SWIGTYPE_p_long Qinv, SWIGTYPE_p_long Q, int Qlen, int n) {
    arblibJNI._fmpz_poly_revert_series(SWIGTYPE_p_long.getCPtr(Qinv), SWIGTYPE_p_long.getCPtr(Q), Qlen, n);
  }

  public static void fmpz_poly_revert_series(fmpz_poly_struct Qinv, fmpz_poly_struct Q, int n) {
    arblibJNI.fmpz_poly_revert_series(fmpz_poly_struct.getCPtr(Qinv), Qinv, fmpz_poly_struct.getCPtr(Q), Q, n);
  }

  public static int _fmpz_poly_sqrtrem_classical(SWIGTYPE_p_long res, SWIGTYPE_p_long r, SWIGTYPE_p_long poly, int len) {
    return arblibJNI._fmpz_poly_sqrtrem_classical(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static int fmpz_poly_sqrtrem_classical(fmpz_poly_struct b, fmpz_poly_struct r, fmpz_poly_struct a) {
    return arblibJNI.fmpz_poly_sqrtrem_classical(fmpz_poly_struct.getCPtr(b), b, fmpz_poly_struct.getCPtr(r), r, fmpz_poly_struct.getCPtr(a), a);
  }

  public static int _fmpz_poly_sqrtrem_divconquer(SWIGTYPE_p_long res, SWIGTYPE_p_long r, SWIGTYPE_p_long poly, int len, SWIGTYPE_p_long temp) {
    return arblibJNI._fmpz_poly_sqrtrem_divconquer(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(poly), len, SWIGTYPE_p_long.getCPtr(temp));
  }

  public static int fmpz_poly_sqrtrem_divconquer(fmpz_poly_struct b, fmpz_poly_struct r, fmpz_poly_struct a) {
    return arblibJNI.fmpz_poly_sqrtrem_divconquer(fmpz_poly_struct.getCPtr(b), b, fmpz_poly_struct.getCPtr(r), r, fmpz_poly_struct.getCPtr(a), a);
  }

  public static int _fmpz_poly_sqrt_classical(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, int exact) {
    return arblibJNI._fmpz_poly_sqrt_classical(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, exact);
  }

  public static int fmpz_poly_sqrt_classical(fmpz_poly_struct b, fmpz_poly_struct a) {
    return arblibJNI.fmpz_poly_sqrt_classical(fmpz_poly_struct.getCPtr(b), b, fmpz_poly_struct.getCPtr(a), a);
  }

  public static int _fmpz_poly_sqrt_divconquer(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, int exact) {
    return arblibJNI._fmpz_poly_sqrt_divconquer(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, exact);
  }

  public static int fmpz_poly_sqrt_divconquer(fmpz_poly_struct b, fmpz_poly_struct a) {
    return arblibJNI.fmpz_poly_sqrt_divconquer(fmpz_poly_struct.getCPtr(b), b, fmpz_poly_struct.getCPtr(a), a);
  }

  public static int _fmpz_poly_sqrt_KS(SWIGTYPE_p_long rop, SWIGTYPE_p_long op, int len) {
    return arblibJNI._fmpz_poly_sqrt_KS(SWIGTYPE_p_long.getCPtr(rop), SWIGTYPE_p_long.getCPtr(op), len);
  }

  public static int fmpz_poly_sqrt_KS(fmpz_poly_struct b, fmpz_poly_struct a) {
    return arblibJNI.fmpz_poly_sqrt_KS(fmpz_poly_struct.getCPtr(b), b, fmpz_poly_struct.getCPtr(a), a);
  }

  public static int _fmpz_poly_sqrt(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len) {
    return arblibJNI._fmpz_poly_sqrt(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static int fmpz_poly_sqrt(fmpz_poly_struct b, fmpz_poly_struct a) {
    return arblibJNI.fmpz_poly_sqrt(fmpz_poly_struct.getCPtr(b), b, fmpz_poly_struct.getCPtr(a), a);
  }

  public static int _fmpz_poly_sqrt_series(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, int n) {
    return arblibJNI._fmpz_poly_sqrt_series(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, n);
  }

  public static int fmpz_poly_sqrt_series(fmpz_poly_struct b, fmpz_poly_struct a, int n) {
    return arblibJNI.fmpz_poly_sqrt_series(fmpz_poly_struct.getCPtr(b), b, fmpz_poly_struct.getCPtr(a), a, n);
  }

  public static void _fmpz_poly_power_sums_naive(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len, int n) {
    arblibJNI._fmpz_poly_power_sums_naive(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len, n);
  }

  public static void fmpz_poly_power_sums_naive(fmpz_poly_struct res, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_power_sums_naive(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpz_poly_power_sums(fmpz_poly_struct res, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_power_sums(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_power_sums_to_poly(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, int len) {
    arblibJNI._fmpz_poly_power_sums_to_poly(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static void fmpz_poly_power_sums_to_poly(fmpz_poly_struct res, fmpz_poly_struct Q) {
    arblibJNI.fmpz_poly_power_sums_to_poly(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(Q), Q);
  }

  public static void _fmpz_poly_signature(SWIGTYPE_p_long r1, SWIGTYPE_p_long r2, SWIGTYPE_p_long poly, int len) {
    arblibJNI._fmpz_poly_signature(SWIGTYPE_p_long.getCPtr(r1), SWIGTYPE_p_long.getCPtr(r2), SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static void fmpz_poly_signature(SWIGTYPE_p_long r1, SWIGTYPE_p_long r2, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_signature(SWIGTYPE_p_long.getCPtr(r1), SWIGTYPE_p_long.getCPtr(r2), fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static int _fmpz_poly_fprint(_IO_FILE file, SWIGTYPE_p_long poly, int len) {
    return arblibJNI._fmpz_poly_fprint(_IO_FILE.getCPtr(file), file, SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static int fmpz_poly_fprint(_IO_FILE file, fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_fprint(_IO_FILE.getCPtr(file), file, fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static int _fmpz_poly_fprint_pretty(_IO_FILE file, SWIGTYPE_p_long poly, int len, String x) {
    return arblibJNI._fmpz_poly_fprint_pretty(_IO_FILE.getCPtr(file), file, SWIGTYPE_p_long.getCPtr(poly), len, x);
  }

  public static int fmpz_poly_fprint_pretty(_IO_FILE file, fmpz_poly_struct poly, String x) {
    return arblibJNI.fmpz_poly_fprint_pretty(_IO_FILE.getCPtr(file), file, fmpz_poly_struct.getCPtr(poly), poly, x);
  }

  public static int _fmpz_poly_print_pretty(SWIGTYPE_p_long poly, int len, String x) {
    return arblibJNI._fmpz_poly_print_pretty(SWIGTYPE_p_long.getCPtr(poly), len, x);
  }

  public static int _fmpz_poly_print(SWIGTYPE_p_long poly, int n) {
    return arblibJNI._fmpz_poly_print(SWIGTYPE_p_long.getCPtr(poly), n);
  }

  public static int fmpz_poly_print(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_print(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpz_poly_print_pretty(fmpz_poly_struct poly, String x) {
    return arblibJNI.fmpz_poly_print_pretty(fmpz_poly_struct.getCPtr(poly), poly, x);
  }

  public static int fmpz_poly_fread(_IO_FILE file, fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_fread(_IO_FILE.getCPtr(file), file, fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpz_poly_fread_pretty(_IO_FILE file, fmpz_poly_struct poly, SWIGTYPE_p_p_char x) {
    return arblibJNI.fmpz_poly_fread_pretty(_IO_FILE.getCPtr(file), file, fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_p_char.getCPtr(x));
  }

  public static int fmpz_poly_read(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_read(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpz_poly_read_pretty(fmpz_poly_struct poly, SWIGTYPE_p_p_char x) {
    return arblibJNI.fmpz_poly_read_pretty(fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_p_char.getCPtr(x));
  }

  public static void fmpz_poly_debug(fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_debug(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_get_nmod_poly(nmod_poly_struct res, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_get_nmod_poly(nmod_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_set_nmod_poly(fmpz_poly_struct res, nmod_poly_struct poly) {
    arblibJNI.fmpz_poly_set_nmod_poly(fmpz_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_set_nmod_poly_unsigned(fmpz_poly_struct res, nmod_poly_struct poly) {
    arblibJNI.fmpz_poly_set_nmod_poly_unsigned(fmpz_poly_struct.getCPtr(res), res, nmod_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_CRT_ui_precomp(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long m1, SWIGTYPE_p_unsigned_long poly2, int len2, long m2, long m2inv, SWIGTYPE_p_long m1m2, long c, int sign) {
    arblibJNI._fmpz_poly_CRT_ui_precomp(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(m1), SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, m2, m2inv, SWIGTYPE_p_long.getCPtr(m1m2), c, sign);
  }

  public static void _fmpz_poly_CRT_ui(SWIGTYPE_p_long res, SWIGTYPE_p_long poly1, int len1, SWIGTYPE_p_long m1, SWIGTYPE_p_unsigned_long poly2, int len2, long m2, long m2inv, int sign) {
    arblibJNI._fmpz_poly_CRT_ui(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly1), len1, SWIGTYPE_p_long.getCPtr(m1), SWIGTYPE_p_unsigned_long.getCPtr(poly2), len2, m2, m2inv, sign);
  }

  public static void fmpz_poly_CRT_ui(fmpz_poly_struct res, fmpz_poly_struct poly1, SWIGTYPE_p_long m1, nmod_poly_struct poly2, int sign) {
    arblibJNI.fmpz_poly_CRT_ui(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly1), poly1, SWIGTYPE_p_long.getCPtr(m1), nmod_poly_struct.getCPtr(poly2), poly2, sign);
  }

  public static void _fmpz_poly_product_roots_fmpz_vec(SWIGTYPE_p_long poly, SWIGTYPE_p_long xs, int n) {
    arblibJNI._fmpz_poly_product_roots_fmpz_vec(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(xs), n);
  }

  public static void fmpz_poly_product_roots_fmpz_vec(fmpz_poly_struct poly, SWIGTYPE_p_long xs, int n) {
    arblibJNI.fmpz_poly_product_roots_fmpz_vec(fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(xs), n);
  }

  public static void _fmpz_poly_product_roots_fmpq_vec(SWIGTYPE_p_long poly, fmpq xs, int n) {
    arblibJNI._fmpz_poly_product_roots_fmpq_vec(SWIGTYPE_p_long.getCPtr(poly), fmpq.getCPtr(xs), xs, n);
  }

  public static void fmpz_poly_product_roots_fmpq_vec(fmpz_poly_struct poly, fmpq xs, int n) {
    arblibJNI.fmpz_poly_product_roots_fmpq_vec(fmpz_poly_struct.getCPtr(poly), poly, fmpq.getCPtr(xs), xs, n);
  }

  public static void _fmpz_poly_monomial_to_newton(SWIGTYPE_p_long poly, SWIGTYPE_p_long roots, int n) {
    arblibJNI._fmpz_poly_monomial_to_newton(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(roots), n);
  }

  public static void _fmpz_poly_newton_to_monomial(SWIGTYPE_p_long poly, SWIGTYPE_p_long roots, int n) {
    arblibJNI._fmpz_poly_newton_to_monomial(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(roots), n);
  }

  public static void fmpz_poly_evaluate_fmpz_vec(SWIGTYPE_p_long res, fmpz_poly_struct f, SWIGTYPE_p_long a, int n) {
    arblibJNI.fmpz_poly_evaluate_fmpz_vec(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(f), f, SWIGTYPE_p_long.getCPtr(a), n);
  }

  public static void fmpz_poly_interpolate_fmpz_vec(fmpz_poly_struct poly, SWIGTYPE_p_long xs, SWIGTYPE_p_long ys, int n) {
    arblibJNI.fmpz_poly_interpolate_fmpz_vec(fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(xs), SWIGTYPE_p_long.getCPtr(ys), n);
  }

  public static void fmpz_poly_hensel_build_tree(SWIGTYPE_p_long link, SWIGTYPE_p_a_1__fmpz_poly_struct v, SWIGTYPE_p_a_1__fmpz_poly_struct w, nmod_poly_factor_struct fac) {
    arblibJNI.fmpz_poly_hensel_build_tree(SWIGTYPE_p_long.getCPtr(link), SWIGTYPE_p_a_1__fmpz_poly_struct.getCPtr(v), SWIGTYPE_p_a_1__fmpz_poly_struct.getCPtr(w), nmod_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void fmpz_poly_hensel_lift(fmpz_poly_struct Gout, fmpz_poly_struct Hout, fmpz_poly_struct Aout, fmpz_poly_struct Bout, fmpz_poly_struct f, fmpz_poly_struct g, fmpz_poly_struct h, fmpz_poly_struct a, fmpz_poly_struct b, SWIGTYPE_p_long p, SWIGTYPE_p_long p1) {
    arblibJNI.fmpz_poly_hensel_lift(fmpz_poly_struct.getCPtr(Gout), Gout, fmpz_poly_struct.getCPtr(Hout), Hout, fmpz_poly_struct.getCPtr(Aout), Aout, fmpz_poly_struct.getCPtr(Bout), Bout, fmpz_poly_struct.getCPtr(f), f, fmpz_poly_struct.getCPtr(g), g, fmpz_poly_struct.getCPtr(h), h, fmpz_poly_struct.getCPtr(a), a, fmpz_poly_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(p1));
  }

  public static void _fmpz_poly_hensel_lift_without_inverse(SWIGTYPE_p_long G, SWIGTYPE_p_long H, SWIGTYPE_p_long f, int lenF, SWIGTYPE_p_long g, int lenG, SWIGTYPE_p_long h, int lenH, SWIGTYPE_p_long a, int lenA, SWIGTYPE_p_long b, int lenB, SWIGTYPE_p_long p, SWIGTYPE_p_long p1) {
    arblibJNI._fmpz_poly_hensel_lift_without_inverse(SWIGTYPE_p_long.getCPtr(G), SWIGTYPE_p_long.getCPtr(H), SWIGTYPE_p_long.getCPtr(f), lenF, SWIGTYPE_p_long.getCPtr(g), lenG, SWIGTYPE_p_long.getCPtr(h), lenH, SWIGTYPE_p_long.getCPtr(a), lenA, SWIGTYPE_p_long.getCPtr(b), lenB, SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(p1));
  }

  public static void fmpz_poly_hensel_lift_without_inverse(fmpz_poly_struct Gout, fmpz_poly_struct Hout, fmpz_poly_struct f, fmpz_poly_struct g, fmpz_poly_struct h, fmpz_poly_struct a, fmpz_poly_struct b, SWIGTYPE_p_long p, SWIGTYPE_p_long p1) {
    arblibJNI.fmpz_poly_hensel_lift_without_inverse(fmpz_poly_struct.getCPtr(Gout), Gout, fmpz_poly_struct.getCPtr(Hout), Hout, fmpz_poly_struct.getCPtr(f), f, fmpz_poly_struct.getCPtr(g), g, fmpz_poly_struct.getCPtr(h), h, fmpz_poly_struct.getCPtr(a), a, fmpz_poly_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(p1));
  }

  public static void _fmpz_poly_hensel_lift_only_inverse(SWIGTYPE_p_long A, SWIGTYPE_p_long B, SWIGTYPE_p_long G, int lenG, SWIGTYPE_p_long H, int lenH, SWIGTYPE_p_long a, int lenA, SWIGTYPE_p_long b, int lenB, SWIGTYPE_p_long p, SWIGTYPE_p_long p1) {
    arblibJNI._fmpz_poly_hensel_lift_only_inverse(SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(G), lenG, SWIGTYPE_p_long.getCPtr(H), lenH, SWIGTYPE_p_long.getCPtr(a), lenA, SWIGTYPE_p_long.getCPtr(b), lenB, SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(p1));
  }

  public static void fmpz_poly_hensel_lift_only_inverse(fmpz_poly_struct Aout, fmpz_poly_struct Bout, fmpz_poly_struct G, fmpz_poly_struct H, fmpz_poly_struct a, fmpz_poly_struct b, SWIGTYPE_p_long p, SWIGTYPE_p_long p1) {
    arblibJNI.fmpz_poly_hensel_lift_only_inverse(fmpz_poly_struct.getCPtr(Aout), Aout, fmpz_poly_struct.getCPtr(Bout), Bout, fmpz_poly_struct.getCPtr(G), G, fmpz_poly_struct.getCPtr(H), H, fmpz_poly_struct.getCPtr(a), a, fmpz_poly_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(p), SWIGTYPE_p_long.getCPtr(p1));
  }

  public static void fmpz_poly_hensel_lift_tree_recursive(SWIGTYPE_p_long link, SWIGTYPE_p_a_1__fmpz_poly_struct v, SWIGTYPE_p_a_1__fmpz_poly_struct w, fmpz_poly_struct f, int j, int inv, SWIGTYPE_p_long p0, SWIGTYPE_p_long p1) {
    arblibJNI.fmpz_poly_hensel_lift_tree_recursive(SWIGTYPE_p_long.getCPtr(link), SWIGTYPE_p_a_1__fmpz_poly_struct.getCPtr(v), SWIGTYPE_p_a_1__fmpz_poly_struct.getCPtr(w), fmpz_poly_struct.getCPtr(f), f, j, inv, SWIGTYPE_p_long.getCPtr(p0), SWIGTYPE_p_long.getCPtr(p1));
  }

  public static void fmpz_poly_hensel_lift_tree(SWIGTYPE_p_long link, SWIGTYPE_p_a_1__fmpz_poly_struct v, SWIGTYPE_p_a_1__fmpz_poly_struct w, fmpz_poly_struct f, int r, SWIGTYPE_p_long p, int e0, int e1, int inv) {
    arblibJNI.fmpz_poly_hensel_lift_tree(SWIGTYPE_p_long.getCPtr(link), SWIGTYPE_p_a_1__fmpz_poly_struct.getCPtr(v), SWIGTYPE_p_a_1__fmpz_poly_struct.getCPtr(w), fmpz_poly_struct.getCPtr(f), f, r, SWIGTYPE_p_long.getCPtr(p), e0, e1, inv);
  }

  public static int _fmpz_poly_hensel_start_lift(fmpz_poly_factor_struct lifted_fac, SWIGTYPE_p_long link, SWIGTYPE_p_a_1__fmpz_poly_struct v, SWIGTYPE_p_a_1__fmpz_poly_struct w, fmpz_poly_struct f, nmod_poly_factor_struct local_fac, int target_exp) {
    return arblibJNI._fmpz_poly_hensel_start_lift(fmpz_poly_factor_struct.getCPtr(lifted_fac), lifted_fac, SWIGTYPE_p_long.getCPtr(link), SWIGTYPE_p_a_1__fmpz_poly_struct.getCPtr(v), SWIGTYPE_p_a_1__fmpz_poly_struct.getCPtr(w), fmpz_poly_struct.getCPtr(f), f, nmod_poly_factor_struct.getCPtr(local_fac), local_fac, target_exp);
  }

  public static int _fmpz_poly_hensel_continue_lift(fmpz_poly_factor_struct lifted_fac, SWIGTYPE_p_long link, SWIGTYPE_p_a_1__fmpz_poly_struct v, SWIGTYPE_p_a_1__fmpz_poly_struct w, fmpz_poly_struct f, int prev, int curr, int N, SWIGTYPE_p_long p) {
    return arblibJNI._fmpz_poly_hensel_continue_lift(fmpz_poly_factor_struct.getCPtr(lifted_fac), lifted_fac, SWIGTYPE_p_long.getCPtr(link), SWIGTYPE_p_a_1__fmpz_poly_struct.getCPtr(v), SWIGTYPE_p_a_1__fmpz_poly_struct.getCPtr(w), fmpz_poly_struct.getCPtr(f), f, prev, curr, N, SWIGTYPE_p_long.getCPtr(p));
  }

  public static void fmpz_poly_hensel_lift_once(fmpz_poly_factor_struct lifted_fac, fmpz_poly_struct f, nmod_poly_factor_struct local_fac, int N) {
    arblibJNI.fmpz_poly_hensel_lift_once(fmpz_poly_factor_struct.getCPtr(lifted_fac), lifted_fac, fmpz_poly_struct.getCPtr(f), f, nmod_poly_factor_struct.getCPtr(local_fac), local_fac, N);
  }

  public static void fmpz_poly_scalar_mul_mpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, __mpz_struct x) {
    arblibJNI.fmpz_poly_scalar_mul_mpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, __mpz_struct.getCPtr(x), x);
  }

  public static void fmpz_poly_scalar_divexact_mpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, __mpz_struct x) {
    arblibJNI.fmpz_poly_scalar_divexact_mpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, __mpz_struct.getCPtr(x), x);
  }

  public static void fmpz_poly_scalar_fdiv_mpz(fmpz_poly_struct poly1, fmpz_poly_struct poly2, __mpz_struct x) {
    arblibJNI.fmpz_poly_scalar_fdiv_mpz(fmpz_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2, __mpz_struct.getCPtr(x), x);
  }

  public static void fmpz_poly_set_coeff_mpz(fmpz_poly_struct poly, int n, __mpz_struct x) {
    arblibJNI.fmpz_poly_set_coeff_mpz(fmpz_poly_struct.getCPtr(poly), poly, n, __mpz_struct.getCPtr(x), x);
  }

  public static void fmpz_poly_get_coeff_mpz(__mpz_struct x, fmpz_poly_struct poly, int n) {
    arblibJNI.fmpz_poly_get_coeff_mpz(__mpz_struct.getCPtr(x), x, fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_bound_roots(SWIGTYPE_p_long bound, SWIGTYPE_p_long poly, int len) {
    arblibJNI._fmpz_poly_bound_roots(SWIGTYPE_p_long.getCPtr(bound), SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static void fmpz_poly_bound_roots(SWIGTYPE_p_long bound, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_bound_roots(SWIGTYPE_p_long.getCPtr(bound), fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_num_real_roots_sturm(SWIGTYPE_p_long n_neg, SWIGTYPE_p_long n_pos, SWIGTYPE_p_long pol, int len) {
    arblibJNI._fmpz_poly_num_real_roots_sturm(SWIGTYPE_p_long.getCPtr(n_neg), SWIGTYPE_p_long.getCPtr(n_pos), SWIGTYPE_p_long.getCPtr(pol), len);
  }

  public static int fmpz_poly_num_real_roots_sturm(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_num_real_roots_sturm(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static int _fmpz_poly_num_real_roots(SWIGTYPE_p_long pol, int len) {
    return arblibJNI._fmpz_poly_num_real_roots(SWIGTYPE_p_long.getCPtr(pol), len);
  }

  public static int fmpz_poly_num_real_roots(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_num_real_roots(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_CLD_bound(SWIGTYPE_p_long res, fmpz_poly_struct f, int n) {
    arblibJNI.fmpz_poly_CLD_bound(SWIGTYPE_p_long.getCPtr(res), fmpz_poly_struct.getCPtr(f), f, n);
  }

  public static void _fmpz_poly_cyclotomic(SWIGTYPE_p_long a, long n, SWIGTYPE_p_unsigned_long factors, int num_factors, long phi) {
    arblibJNI._fmpz_poly_cyclotomic(SWIGTYPE_p_long.getCPtr(a), n, SWIGTYPE_p_unsigned_long.getCPtr(factors), num_factors, phi);
  }

  public static void fmpz_poly_cyclotomic(fmpz_poly_struct poly, long n) {
    arblibJNI.fmpz_poly_cyclotomic(fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static long _fmpz_poly_is_cyclotomic(SWIGTYPE_p_long poly, int len) {
    return arblibJNI._fmpz_poly_is_cyclotomic(SWIGTYPE_p_long.getCPtr(poly), len);
  }

  public static long fmpz_poly_is_cyclotomic(fmpz_poly_struct poly) {
    return arblibJNI.fmpz_poly_is_cyclotomic(fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_cos_minpoly(SWIGTYPE_p_long f, long n) {
    arblibJNI._fmpz_poly_cos_minpoly(SWIGTYPE_p_long.getCPtr(f), n);
  }

  public static void fmpz_poly_cos_minpoly(fmpz_poly_struct f, long n) {
    arblibJNI.fmpz_poly_cos_minpoly(fmpz_poly_struct.getCPtr(f), f, n);
  }

  public static void _fmpz_poly_swinnerton_dyer(SWIGTYPE_p_long T, long n) {
    arblibJNI._fmpz_poly_swinnerton_dyer(SWIGTYPE_p_long.getCPtr(T), n);
  }

  public static void fmpz_poly_swinnerton_dyer(fmpz_poly_struct poly, long n) {
    arblibJNI.fmpz_poly_swinnerton_dyer(fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_chebyshev_t(SWIGTYPE_p_long coeffs, long n) {
    arblibJNI._fmpz_poly_chebyshev_t(SWIGTYPE_p_long.getCPtr(coeffs), n);
  }

  public static void fmpz_poly_chebyshev_t(fmpz_poly_struct poly, long n) {
    arblibJNI.fmpz_poly_chebyshev_t(fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_chebyshev_u(SWIGTYPE_p_long coeffs, long n) {
    arblibJNI._fmpz_poly_chebyshev_u(SWIGTYPE_p_long.getCPtr(coeffs), n);
  }

  public static void fmpz_poly_chebyshev_u(fmpz_poly_struct poly, long n) {
    arblibJNI.fmpz_poly_chebyshev_u(fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_legendre_pt(SWIGTYPE_p_long coeffs, long n) {
    arblibJNI._fmpz_poly_legendre_pt(SWIGTYPE_p_long.getCPtr(coeffs), n);
  }

  public static void fmpz_poly_legendre_pt(fmpz_poly_struct poly, long n) {
    arblibJNI.fmpz_poly_legendre_pt(fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_hermite_h(SWIGTYPE_p_long coeffs, long n) {
    arblibJNI._fmpz_poly_hermite_h(SWIGTYPE_p_long.getCPtr(coeffs), n);
  }

  public static void fmpz_poly_hermite_h(fmpz_poly_struct poly, long n) {
    arblibJNI.fmpz_poly_hermite_h(fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_hermite_he(SWIGTYPE_p_long coeffs, long n) {
    arblibJNI._fmpz_poly_hermite_he(SWIGTYPE_p_long.getCPtr(coeffs), n);
  }

  public static void fmpz_poly_hermite_he(fmpz_poly_struct poly, long n) {
    arblibJNI.fmpz_poly_hermite_he(fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_fibonacci(SWIGTYPE_p_long coeffs, long n) {
    arblibJNI._fmpz_poly_fibonacci(SWIGTYPE_p_long.getCPtr(coeffs), n);
  }

  public static void fmpz_poly_fibonacci(fmpz_poly_struct poly, long n) {
    arblibJNI.fmpz_poly_fibonacci(fmpz_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpz_poly_eta_qexp(SWIGTYPE_p_long f, int e, int n) {
    arblibJNI._fmpz_poly_eta_qexp(SWIGTYPE_p_long.getCPtr(f), e, n);
  }

  public static void fmpz_poly_eta_qexp(fmpz_poly_struct f, int e, int n) {
    arblibJNI.fmpz_poly_eta_qexp(fmpz_poly_struct.getCPtr(f), f, e, n);
  }

  public static void _fmpz_poly_theta_qexp(SWIGTYPE_p_long f, int e, int n) {
    arblibJNI._fmpz_poly_theta_qexp(SWIGTYPE_p_long.getCPtr(f), e, n);
  }

  public static void fmpz_poly_theta_qexp(fmpz_poly_struct f, int e, int n) {
    arblibJNI.fmpz_poly_theta_qexp(fmpz_poly_struct.getCPtr(f), f, e, n);
  }

  public static void fmpz_poly_add_si(fmpz_poly_struct res, fmpz_poly_struct poly, int c) {
    arblibJNI.fmpz_poly_add_si(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, c);
  }

  public static void fmpz_poly_sub_si(fmpz_poly_struct res, fmpz_poly_struct poly, int c) {
    arblibJNI.fmpz_poly_sub_si(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, c);
  }

  public static void fmpz_poly_si_sub(fmpz_poly_struct res, int c, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_si_sub(fmpz_poly_struct.getCPtr(res), res, c, fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpz_poly_add_fmpz(fmpz_poly_struct res, fmpz_poly_struct poly, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_poly_add_fmpz(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpz_poly_sub_fmpz(fmpz_poly_struct res, fmpz_poly_struct poly, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_poly_sub_fmpz(fmpz_poly_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpz_poly_fmpz_sub(fmpz_poly_struct res, SWIGTYPE_p_long c, fmpz_poly_struct poly) {
    arblibJNI.fmpz_poly_fmpz_sub(fmpz_poly_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(c), fmpz_poly_struct.getCPtr(poly), poly);
  }

  public static double d_randtest(flint_rand_s state) {
    return arblibJNI.d_randtest(flint_rand_s.getCPtr(state), state);
  }

  public static double d_randtest_signed(flint_rand_s state, int minexp, int maxexp) {
    return arblibJNI.d_randtest_signed(flint_rand_s.getCPtr(state), state, minexp, maxexp);
  }

  public static double d_randtest_special(flint_rand_s state, int minexp, int maxexp) {
    return arblibJNI.d_randtest_special(flint_rand_s.getCPtr(state), state, minexp, maxexp);
  }

  public static double d_polyval(SWIGTYPE_p_double poly, int len, double x) {
    return arblibJNI.d_polyval(SWIGTYPE_p_double.getCPtr(poly), len, x);
  }

  public static double d_lambertw(double x) {
    return arblibJNI.d_lambertw(x);
  }

  public static int d_is_nan(double x) {
    return arblibJNI.d_is_nan(x);
  }

  public static double d_log2(double x) {
    return arblibJNI.d_log2(x);
  }

  public static SWIGTYPE_p_double _d_vec_init(int len) {
    long cPtr = arblibJNI._d_vec_init(len);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static void _d_vec_clear(SWIGTYPE_p_double vec) {
    arblibJNI._d_vec_clear(SWIGTYPE_p_double.getCPtr(vec));
  }

  public static void _d_vec_randtest(SWIGTYPE_p_double f, flint_rand_s state, int len, int minexp, int maxexp) {
    arblibJNI._d_vec_randtest(SWIGTYPE_p_double.getCPtr(f), flint_rand_s.getCPtr(state), state, len, minexp, maxexp);
  }

  public static void _d_vec_set(SWIGTYPE_p_double vec1, SWIGTYPE_p_double vec2, int len2) {
    arblibJNI._d_vec_set(SWIGTYPE_p_double.getCPtr(vec1), SWIGTYPE_p_double.getCPtr(vec2), len2);
  }

  public static void _d_vec_zero(SWIGTYPE_p_double vec, int len) {
    arblibJNI._d_vec_zero(SWIGTYPE_p_double.getCPtr(vec), len);
  }

  public static int _d_vec_equal(SWIGTYPE_p_double vec1, SWIGTYPE_p_double vec2, int len) {
    return arblibJNI._d_vec_equal(SWIGTYPE_p_double.getCPtr(vec1), SWIGTYPE_p_double.getCPtr(vec2), len);
  }

  public static int _d_vec_approx_equal(SWIGTYPE_p_double vec1, SWIGTYPE_p_double vec2, int len, double eps) {
    return arblibJNI._d_vec_approx_equal(SWIGTYPE_p_double.getCPtr(vec1), SWIGTYPE_p_double.getCPtr(vec2), len, eps);
  }

  public static int _d_vec_is_zero(SWIGTYPE_p_double vec, int len) {
    return arblibJNI._d_vec_is_zero(SWIGTYPE_p_double.getCPtr(vec), len);
  }

  public static int _d_vec_is_approx_zero(SWIGTYPE_p_double vec, int len, double eps) {
    return arblibJNI._d_vec_is_approx_zero(SWIGTYPE_p_double.getCPtr(vec), len, eps);
  }

  public static void _d_vec_add(SWIGTYPE_p_double res, SWIGTYPE_p_double vec1, SWIGTYPE_p_double vec2, int len2) {
    arblibJNI._d_vec_add(SWIGTYPE_p_double.getCPtr(res), SWIGTYPE_p_double.getCPtr(vec1), SWIGTYPE_p_double.getCPtr(vec2), len2);
  }

  public static void _d_vec_sub(SWIGTYPE_p_double res, SWIGTYPE_p_double vec1, SWIGTYPE_p_double vec2, int len2) {
    arblibJNI._d_vec_sub(SWIGTYPE_p_double.getCPtr(res), SWIGTYPE_p_double.getCPtr(vec1), SWIGTYPE_p_double.getCPtr(vec2), len2);
  }

  public static double _d_vec_dot(SWIGTYPE_p_double vec1, SWIGTYPE_p_double vec2, int len2) {
    return arblibJNI._d_vec_dot(SWIGTYPE_p_double.getCPtr(vec1), SWIGTYPE_p_double.getCPtr(vec2), len2);
  }

  public static double _d_vec_norm(SWIGTYPE_p_double vec, int len) {
    return arblibJNI._d_vec_norm(SWIGTYPE_p_double.getCPtr(vec), len);
  }

  public static double _d_vec_dot_heuristic(SWIGTYPE_p_double vec1, SWIGTYPE_p_double vec2, int len2, SWIGTYPE_p_double err) {
    return arblibJNI._d_vec_dot_heuristic(SWIGTYPE_p_double.getCPtr(vec1), SWIGTYPE_p_double.getCPtr(vec2), len2, SWIGTYPE_p_double.getCPtr(err));
  }

  public static double _d_vec_dot_thrice(SWIGTYPE_p_double vec1, SWIGTYPE_p_double vec2, int len2, SWIGTYPE_p_double err) {
    return arblibJNI._d_vec_dot_thrice(SWIGTYPE_p_double.getCPtr(vec1), SWIGTYPE_p_double.getCPtr(vec2), len2, SWIGTYPE_p_double.getCPtr(err));
  }

  public static SWIGTYPE_p_double d_mat_entry_ptr(d_mat_struct mat, int i, int j) {
    long cPtr = arblibJNI.d_mat_entry_ptr(d_mat_struct.getCPtr(mat), mat, i, j);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static double d_mat_get_entry(d_mat_struct mat, int i, int j) {
    return arblibJNI.d_mat_get_entry(d_mat_struct.getCPtr(mat), mat, i, j);
  }

  public static void d_mat_init(d_mat_struct mat, int rows, int cols) {
    arblibJNI.d_mat_init(d_mat_struct.getCPtr(mat), mat, rows, cols);
  }

  public static void d_mat_swap(d_mat_struct mat1, d_mat_struct mat2) {
    arblibJNI.d_mat_swap(d_mat_struct.getCPtr(mat1), mat1, d_mat_struct.getCPtr(mat2), mat2);
  }

  public static void d_mat_set(d_mat_struct mat1, d_mat_struct mat2) {
    arblibJNI.d_mat_set(d_mat_struct.getCPtr(mat1), mat1, d_mat_struct.getCPtr(mat2), mat2);
  }

  public static void d_mat_clear(d_mat_struct mat) {
    arblibJNI.d_mat_clear(d_mat_struct.getCPtr(mat), mat);
  }

  public static int d_mat_equal(d_mat_struct mat1, d_mat_struct mat2) {
    return arblibJNI.d_mat_equal(d_mat_struct.getCPtr(mat1), mat1, d_mat_struct.getCPtr(mat2), mat2);
  }

  public static int d_mat_approx_equal(d_mat_struct mat1, d_mat_struct mat2, double eps) {
    return arblibJNI.d_mat_approx_equal(d_mat_struct.getCPtr(mat1), mat1, d_mat_struct.getCPtr(mat2), mat2, eps);
  }

  public static int d_mat_is_zero(d_mat_struct mat) {
    return arblibJNI.d_mat_is_zero(d_mat_struct.getCPtr(mat), mat);
  }

  public static int d_mat_is_approx_zero(d_mat_struct mat, double eps) {
    return arblibJNI.d_mat_is_approx_zero(d_mat_struct.getCPtr(mat), mat, eps);
  }

  public static int d_mat_is_empty(d_mat_struct mat) {
    return arblibJNI.d_mat_is_empty(d_mat_struct.getCPtr(mat), mat);
  }

  public static int d_mat_is_square(d_mat_struct mat) {
    return arblibJNI.d_mat_is_square(d_mat_struct.getCPtr(mat), mat);
  }

  public static void d_mat_zero(d_mat_struct mat) {
    arblibJNI.d_mat_zero(d_mat_struct.getCPtr(mat), mat);
  }

  public static void d_mat_one(d_mat_struct mat) {
    arblibJNI.d_mat_one(d_mat_struct.getCPtr(mat), mat);
  }

  public static void d_mat_print(d_mat_struct mat) {
    arblibJNI.d_mat_print(d_mat_struct.getCPtr(mat), mat);
  }

  public static void d_mat_randtest(d_mat_struct mat, flint_rand_s state, int minexp, int maxexp) {
    arblibJNI.d_mat_randtest(d_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, minexp, maxexp);
  }

  public static void d_mat_transpose(d_mat_struct B, d_mat_struct A) {
    arblibJNI.d_mat_transpose(d_mat_struct.getCPtr(B), B, d_mat_struct.getCPtr(A), A);
  }

  public static void d_mat_mul_classical(d_mat_struct C, d_mat_struct A, d_mat_struct B) {
    arblibJNI.d_mat_mul_classical(d_mat_struct.getCPtr(C), C, d_mat_struct.getCPtr(A), A, d_mat_struct.getCPtr(B), B);
  }

  public static void d_mat_swap_rows(d_mat_struct mat, int r, int s) {
    arblibJNI.d_mat_swap_rows(d_mat_struct.getCPtr(mat), mat, r, s);
  }

  public static void d_mat_gso(d_mat_struct B, d_mat_struct A) {
    arblibJNI.d_mat_gso(d_mat_struct.getCPtr(B), B, d_mat_struct.getCPtr(A), A);
  }

  public static void d_mat_qr(d_mat_struct Q, d_mat_struct R, d_mat_struct A) {
    arblibJNI.d_mat_qr(d_mat_struct.getCPtr(Q), Q, d_mat_struct.getCPtr(R), R, d_mat_struct.getCPtr(A), A);
  }

  public static __mpf_struct mpf_mat_entry(mpf_mat_struct mat, int i, int j) {
    long cPtr = arblibJNI.mpf_mat_entry(mpf_mat_struct.getCPtr(mat), mat, i, j);
    return (cPtr == 0) ? null : new __mpf_struct(cPtr, false);
  }

  public static void mpf_mat_init(mpf_mat_struct mat, int rows, int cols, long prec) {
    arblibJNI.mpf_mat_init(mpf_mat_struct.getCPtr(mat), mat, rows, cols, prec);
  }

  public static void mpf_mat_swap(mpf_mat_struct mat1, mpf_mat_struct mat2) {
    arblibJNI.mpf_mat_swap(mpf_mat_struct.getCPtr(mat1), mat1, mpf_mat_struct.getCPtr(mat2), mat2);
  }

  public static void mpf_mat_set(mpf_mat_struct mat1, mpf_mat_struct mat2) {
    arblibJNI.mpf_mat_set(mpf_mat_struct.getCPtr(mat1), mat1, mpf_mat_struct.getCPtr(mat2), mat2);
  }

  public static void mpf_mat_clear(mpf_mat_struct mat) {
    arblibJNI.mpf_mat_clear(mpf_mat_struct.getCPtr(mat), mat);
  }

  public static int mpf_mat_equal(mpf_mat_struct mat1, mpf_mat_struct mat2) {
    return arblibJNI.mpf_mat_equal(mpf_mat_struct.getCPtr(mat1), mat1, mpf_mat_struct.getCPtr(mat2), mat2);
  }

  public static int mpf_mat_approx_equal(mpf_mat_struct mat1, mpf_mat_struct mat2, long bits) {
    return arblibJNI.mpf_mat_approx_equal(mpf_mat_struct.getCPtr(mat1), mat1, mpf_mat_struct.getCPtr(mat2), mat2, bits);
  }

  public static int mpf_mat_is_zero(mpf_mat_struct mat) {
    return arblibJNI.mpf_mat_is_zero(mpf_mat_struct.getCPtr(mat), mat);
  }

  public static int mpf_mat_is_empty(mpf_mat_struct mat) {
    return arblibJNI.mpf_mat_is_empty(mpf_mat_struct.getCPtr(mat), mat);
  }

  public static int mpf_mat_is_square(mpf_mat_struct mat) {
    return arblibJNI.mpf_mat_is_square(mpf_mat_struct.getCPtr(mat), mat);
  }

  public static void mpf_mat_zero(mpf_mat_struct mat) {
    arblibJNI.mpf_mat_zero(mpf_mat_struct.getCPtr(mat), mat);
  }

  public static void mpf_mat_one(mpf_mat_struct mat) {
    arblibJNI.mpf_mat_one(mpf_mat_struct.getCPtr(mat), mat);
  }

  public static void mpf_mat_print(mpf_mat_struct mat) {
    arblibJNI.mpf_mat_print(mpf_mat_struct.getCPtr(mat), mat);
  }

  public static void mpf_mat_randtest(mpf_mat_struct mat, flint_rand_s state, long bits) {
    arblibJNI.mpf_mat_randtest(mpf_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, bits);
  }

  public static void mpf_mat_mul(mpf_mat_struct C, mpf_mat_struct A, mpf_mat_struct B) {
    arblibJNI.mpf_mat_mul(mpf_mat_struct.getCPtr(C), C, mpf_mat_struct.getCPtr(A), A, mpf_mat_struct.getCPtr(B), B);
  }

  public static void mpf_mat_swap_rows(mpf_mat_struct mat, int r, int s) {
    arblibJNI.mpf_mat_swap_rows(mpf_mat_struct.getCPtr(mat), mat, r, s);
  }

  public static void mpf_mat_gso(mpf_mat_struct B, mpf_mat_struct A) {
    arblibJNI.mpf_mat_gso(mpf_mat_struct.getCPtr(B), B, mpf_mat_struct.getCPtr(A), A);
  }

  public static void mpf_mat_qr(mpf_mat_struct Q, mpf_mat_struct R, mpf_mat_struct A) {
    arblibJNI.mpf_mat_qr(mpf_mat_struct.getCPtr(Q), Q, mpf_mat_struct.getCPtr(R), R, mpf_mat_struct.getCPtr(A), A);
  }

  public static SWIGTYPE_p_long fmpz_mat_entry(fmpz_mat_struct mat, int i, int j) {
    long cPtr = arblibJNI.fmpz_mat_entry(fmpz_mat_struct.getCPtr(mat), mat, i, j);
    return (cPtr == 0) ? null : new SWIGTYPE_p_long(cPtr, false);
  }

  public static int fmpz_mat_nrows(fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_nrows(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_ncols(fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_ncols(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void fmpz_mat_init(fmpz_mat_struct mat, int rows, int cols) {
    arblibJNI.fmpz_mat_init(fmpz_mat_struct.getCPtr(mat), mat, rows, cols);
  }

  public static void fmpz_mat_init_set(fmpz_mat_struct mat, fmpz_mat_struct src) {
    arblibJNI.fmpz_mat_init_set(fmpz_mat_struct.getCPtr(mat), mat, fmpz_mat_struct.getCPtr(src), src);
  }

  public static void fmpz_mat_swap(fmpz_mat_struct mat1, fmpz_mat_struct mat2) {
    arblibJNI.fmpz_mat_swap(fmpz_mat_struct.getCPtr(mat1), mat1, fmpz_mat_struct.getCPtr(mat2), mat2);
  }

  public static void fmpz_mat_set(fmpz_mat_struct mat1, fmpz_mat_struct mat2) {
    arblibJNI.fmpz_mat_set(fmpz_mat_struct.getCPtr(mat1), mat1, fmpz_mat_struct.getCPtr(mat2), mat2);
  }

  public static void fmpz_mat_clear(fmpz_mat_struct mat) {
    arblibJNI.fmpz_mat_clear(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_equal(fmpz_mat_struct mat1, fmpz_mat_struct mat2) {
    return arblibJNI.fmpz_mat_equal(fmpz_mat_struct.getCPtr(mat1), mat1, fmpz_mat_struct.getCPtr(mat2), mat2);
  }

  public static int fmpz_mat_is_zero(fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_is_zero(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_is_one(fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_is_one(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_is_zero_row(fmpz_mat_struct mat, int i) {
    return arblibJNI.fmpz_mat_is_zero_row(fmpz_mat_struct.getCPtr(mat), mat, i);
  }

  public static int fmpz_mat_col_equal(fmpz_mat_struct M, int m, int n) {
    return arblibJNI.fmpz_mat_col_equal(fmpz_mat_struct.getCPtr(M), M, m, n);
  }

  public static int fmpz_mat_row_equal(fmpz_mat_struct M, int m, int n) {
    return arblibJNI.fmpz_mat_row_equal(fmpz_mat_struct.getCPtr(M), M, m, n);
  }

  public static int fmpz_mat_is_empty(fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_is_empty(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_is_square(fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_is_square(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void fmpz_mat_zero(fmpz_mat_struct mat) {
    arblibJNI.fmpz_mat_zero(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void fmpz_mat_one(fmpz_mat_struct mat) {
    arblibJNI.fmpz_mat_one(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void fmpz_mat_window_init(fmpz_mat_struct window, fmpz_mat_struct mat, int r1, int c1, int r2, int c2) {
    arblibJNI.fmpz_mat_window_init(fmpz_mat_struct.getCPtr(window), window, fmpz_mat_struct.getCPtr(mat), mat, r1, c1, r2, c2);
  }

  public static void fmpz_mat_window_clear(fmpz_mat_struct window) {
    arblibJNI.fmpz_mat_window_clear(fmpz_mat_struct.getCPtr(window), window);
  }

  public static void fmpz_mat_concat_horizontal(fmpz_mat_struct res, fmpz_mat_struct mat1, fmpz_mat_struct mat2) {
    arblibJNI.fmpz_mat_concat_horizontal(fmpz_mat_struct.getCPtr(res), res, fmpz_mat_struct.getCPtr(mat1), mat1, fmpz_mat_struct.getCPtr(mat2), mat2);
  }

  public static void fmpz_mat_concat_vertical(fmpz_mat_struct res, fmpz_mat_struct mat1, fmpz_mat_struct mat2) {
    arblibJNI.fmpz_mat_concat_vertical(fmpz_mat_struct.getCPtr(res), res, fmpz_mat_struct.getCPtr(mat1), mat1, fmpz_mat_struct.getCPtr(mat2), mat2);
  }

  public static int fmpz_mat_fprint(_IO_FILE file, fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_fprint(_IO_FILE.getCPtr(file), file, fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_fprint_pretty(_IO_FILE file, fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_fprint_pretty(_IO_FILE.getCPtr(file), file, fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_print(fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_print(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_print_pretty(fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_print_pretty(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_fread(_IO_FILE file, fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_fread(_IO_FILE.getCPtr(file), file, fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_read(fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_read(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void fmpz_mat_randbits(fmpz_mat_struct mat, flint_rand_s state, long bits) {
    arblibJNI.fmpz_mat_randbits(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpz_mat_randtest(fmpz_mat_struct mat, flint_rand_s state, long bits) {
    arblibJNI.fmpz_mat_randtest(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpz_mat_randtest_unsigned(fmpz_mat_struct mat, flint_rand_s state, long bits) {
    arblibJNI.fmpz_mat_randtest_unsigned(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpz_mat_randintrel(fmpz_mat_struct mat, flint_rand_s state, long bits) {
    arblibJNI.fmpz_mat_randintrel(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, bits);
  }

  public static void fmpz_mat_randsimdioph(fmpz_mat_struct mat, flint_rand_s state, long bits, long bits2) {
    arblibJNI.fmpz_mat_randsimdioph(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, bits, bits2);
  }

  public static void fmpz_mat_randntrulike(fmpz_mat_struct mat, flint_rand_s state, long bits, long q) {
    arblibJNI.fmpz_mat_randntrulike(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, bits, q);
  }

  public static void fmpz_mat_randntrulike2(fmpz_mat_struct mat, flint_rand_s state, long bits, long q) {
    arblibJNI.fmpz_mat_randntrulike2(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, bits, q);
  }

  public static void fmpz_mat_randajtai(fmpz_mat_struct mat, flint_rand_s state, double alpha) {
    arblibJNI.fmpz_mat_randajtai(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, alpha);
  }

  public static void fmpz_mat_randrank(fmpz_mat_struct mat, flint_rand_s state, int rank, long bits) {
    arblibJNI.fmpz_mat_randrank(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, rank, bits);
  }

  public static void fmpz_mat_randdet(fmpz_mat_struct mat, flint_rand_s state, SWIGTYPE_p_long det) {
    arblibJNI.fmpz_mat_randdet(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, SWIGTYPE_p_long.getCPtr(det));
  }

  public static void fmpz_mat_randops(fmpz_mat_struct mat, flint_rand_s state, int count) {
    arblibJNI.fmpz_mat_randops(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, count);
  }

  public static int fmpz_mat_randpermdiag(fmpz_mat_struct mat, flint_rand_s state, SWIGTYPE_p_long diag, int n) {
    return arblibJNI.fmpz_mat_randpermdiag(fmpz_mat_struct.getCPtr(mat), mat, flint_rand_s.getCPtr(state), state, SWIGTYPE_p_long.getCPtr(diag), n);
  }

  public static int fmpz_mat_max_bits(fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_max_bits(fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void fmpz_mat_transpose(fmpz_mat_struct B, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_transpose(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_add(fmpz_mat_struct C, fmpz_mat_struct A, fmpz_mat_struct B) {
    arblibJNI.fmpz_mat_add(fmpz_mat_struct.getCPtr(C), C, fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static void fmpz_mat_sub(fmpz_mat_struct C, fmpz_mat_struct A, fmpz_mat_struct B) {
    arblibJNI.fmpz_mat_sub(fmpz_mat_struct.getCPtr(C), C, fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static void fmpz_mat_neg(fmpz_mat_struct B, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_neg(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_scalar_mul_fmpz(fmpz_mat_struct B, fmpz_mat_struct A, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_mat_scalar_mul_fmpz(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpz_mat_scalar_mul_si(fmpz_mat_struct B, fmpz_mat_struct A, int c) {
    arblibJNI.fmpz_mat_scalar_mul_si(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, c);
  }

  public static void fmpz_mat_scalar_mul_ui(fmpz_mat_struct B, fmpz_mat_struct A, long c) {
    arblibJNI.fmpz_mat_scalar_mul_ui(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, c);
  }

  public static void fmpz_mat_scalar_addmul_fmpz(fmpz_mat_struct B, fmpz_mat_struct A, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_mat_scalar_addmul_fmpz(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpz_mat_scalar_addmul_si(fmpz_mat_struct B, fmpz_mat_struct A, int c) {
    arblibJNI.fmpz_mat_scalar_addmul_si(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, c);
  }

  public static void fmpz_mat_scalar_addmul_ui(fmpz_mat_struct B, fmpz_mat_struct A, long c) {
    arblibJNI.fmpz_mat_scalar_addmul_ui(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, c);
  }

  public static void fmpz_mat_scalar_submul_fmpz(fmpz_mat_struct B, fmpz_mat_struct A, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_mat_scalar_submul_fmpz(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpz_mat_scalar_submul_si(fmpz_mat_struct B, fmpz_mat_struct A, int c) {
    arblibJNI.fmpz_mat_scalar_submul_si(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, c);
  }

  public static void fmpz_mat_scalar_submul_ui(fmpz_mat_struct B, fmpz_mat_struct A, long c) {
    arblibJNI.fmpz_mat_scalar_submul_ui(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, c);
  }

  public static void fmpz_mat_scalar_addmul_nmod_mat_fmpz(fmpz_mat_struct B, nmod_mat_struct A, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_mat_scalar_addmul_nmod_mat_fmpz(fmpz_mat_struct.getCPtr(B), B, nmod_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpz_mat_scalar_addmul_nmod_mat_ui(fmpz_mat_struct B, nmod_mat_struct A, long c) {
    arblibJNI.fmpz_mat_scalar_addmul_nmod_mat_ui(fmpz_mat_struct.getCPtr(B), B, nmod_mat_struct.getCPtr(A), A, c);
  }

  public static void fmpz_mat_scalar_divexact_fmpz(fmpz_mat_struct B, fmpz_mat_struct A, SWIGTYPE_p_long c) {
    arblibJNI.fmpz_mat_scalar_divexact_fmpz(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpz_mat_scalar_divexact_si(fmpz_mat_struct B, fmpz_mat_struct A, int c) {
    arblibJNI.fmpz_mat_scalar_divexact_si(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, c);
  }

  public static void fmpz_mat_scalar_divexact_ui(fmpz_mat_struct B, fmpz_mat_struct A, long c) {
    arblibJNI.fmpz_mat_scalar_divexact_ui(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, c);
  }

  public static void fmpz_mat_scalar_mul_2exp(fmpz_mat_struct B, fmpz_mat_struct A, long exp) {
    arblibJNI.fmpz_mat_scalar_mul_2exp(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, exp);
  }

  public static void fmpz_mat_scalar_tdiv_q_2exp(fmpz_mat_struct B, fmpz_mat_struct A, long exp) {
    arblibJNI.fmpz_mat_scalar_tdiv_q_2exp(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, exp);
  }

  public static void fmpz_mat_scalar_smod(fmpz_mat_struct B, fmpz_mat_struct A, SWIGTYPE_p_long P) {
    arblibJNI.fmpz_mat_scalar_smod(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(P));
  }

  public static void fmpz_mat_scalar_mod_fmpz(fmpz_mat_struct B, fmpz_mat_struct A, SWIGTYPE_p_long m) {
    arblibJNI.fmpz_mat_scalar_mod_fmpz(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(m));
  }

  public static void fmpz_mat_mul(fmpz_mat_struct C, fmpz_mat_struct A, fmpz_mat_struct B) {
    arblibJNI.fmpz_mat_mul(fmpz_mat_struct.getCPtr(C), C, fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static void fmpz_mat_mul_classical(fmpz_mat_struct C, fmpz_mat_struct A, fmpz_mat_struct B) {
    arblibJNI.fmpz_mat_mul_classical(fmpz_mat_struct.getCPtr(C), C, fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static void fmpz_mat_mul_strassen(fmpz_mat_struct C, fmpz_mat_struct A, fmpz_mat_struct B) {
    arblibJNI.fmpz_mat_mul_strassen(fmpz_mat_struct.getCPtr(C), C, fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static void fmpz_mat_mul_classical_inline(fmpz_mat_struct C, fmpz_mat_struct A, fmpz_mat_struct B) {
    arblibJNI.fmpz_mat_mul_classical_inline(fmpz_mat_struct.getCPtr(C), C, fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static void _fmpz_mat_mul_multi_mod(fmpz_mat_struct C, fmpz_mat_struct A, fmpz_mat_struct B, long bits) {
    arblibJNI._fmpz_mat_mul_multi_mod(fmpz_mat_struct.getCPtr(C), C, fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B, bits);
  }

  public static void fmpz_mat_mul_multi_mod(fmpz_mat_struct C, fmpz_mat_struct A, fmpz_mat_struct B) {
    arblibJNI.fmpz_mat_mul_multi_mod(fmpz_mat_struct.getCPtr(C), C, fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static void fmpz_mat_sqr_bodrato(fmpz_mat_struct B, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_sqr_bodrato(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_sqr(fmpz_mat_struct B, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_sqr(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_pow(fmpz_mat_struct B, fmpz_mat_struct A, long exp) {
    arblibJNI.fmpz_mat_pow(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A, exp);
  }

  public static void fmpz_mat_kronecker_product(fmpz_mat_struct C, fmpz_mat_struct A, fmpz_mat_struct B) {
    arblibJNI.fmpz_mat_kronecker_product(fmpz_mat_struct.getCPtr(C), C, fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static void fmpz_mat_content(SWIGTYPE_p_long ret, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_content(SWIGTYPE_p_long.getCPtr(ret), fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_swap_rows(fmpz_mat_struct mat, SWIGTYPE_p_long perm, int r, int s) {
    arblibJNI.fmpz_mat_swap_rows(fmpz_mat_struct.getCPtr(mat), mat, SWIGTYPE_p_long.getCPtr(perm), r, s);
  }

  public static void fmpz_mat_invert_rows(fmpz_mat_struct mat, SWIGTYPE_p_long perm) {
    arblibJNI.fmpz_mat_invert_rows(fmpz_mat_struct.getCPtr(mat), mat, SWIGTYPE_p_long.getCPtr(perm));
  }

  public static void fmpz_mat_swap_cols(fmpz_mat_struct mat, SWIGTYPE_p_long perm, int r, int s) {
    arblibJNI.fmpz_mat_swap_cols(fmpz_mat_struct.getCPtr(mat), mat, SWIGTYPE_p_long.getCPtr(perm), r, s);
  }

  public static void fmpz_mat_invert_cols(fmpz_mat_struct mat, SWIGTYPE_p_long perm) {
    arblibJNI.fmpz_mat_invert_cols(fmpz_mat_struct.getCPtr(mat), mat, SWIGTYPE_p_long.getCPtr(perm));
  }

  public static int fmpz_mat_find_pivot_any(fmpz_mat_struct mat, int start_row, int end_row, int c) {
    return arblibJNI.fmpz_mat_find_pivot_any(fmpz_mat_struct.getCPtr(mat), mat, start_row, end_row, c);
  }

  public static int fmpz_mat_find_pivot_smallest(fmpz_mat_struct mat, int start_row, int end_row, int c) {
    return arblibJNI.fmpz_mat_find_pivot_smallest(fmpz_mat_struct.getCPtr(mat), mat, start_row, end_row, c);
  }

  public static int fmpz_mat_fflu(fmpz_mat_struct B, SWIGTYPE_p_long den, SWIGTYPE_p_long perm, fmpz_mat_struct A, int rank_check) {
    return arblibJNI.fmpz_mat_fflu(fmpz_mat_struct.getCPtr(B), B, SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(perm), fmpz_mat_struct.getCPtr(A), A, rank_check);
  }

  public static int fmpz_mat_rank_small_inplace(fmpz_mat_struct B) {
    return arblibJNI.fmpz_mat_rank_small_inplace(fmpz_mat_struct.getCPtr(B), B);
  }

  public static int fmpz_mat_rref(fmpz_mat_struct B, SWIGTYPE_p_long den, fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_rref(fmpz_mat_struct.getCPtr(B), B, SWIGTYPE_p_long.getCPtr(den), fmpz_mat_struct.getCPtr(A), A);
  }

  public static int fmpz_mat_rref_fflu(fmpz_mat_struct B, SWIGTYPE_p_long den, fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_rref_fflu(fmpz_mat_struct.getCPtr(B), B, SWIGTYPE_p_long.getCPtr(den), fmpz_mat_struct.getCPtr(A), A);
  }

  public static int fmpz_mat_rref_mul(fmpz_mat_struct B, SWIGTYPE_p_long den, fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_rref_mul(fmpz_mat_struct.getCPtr(B), B, SWIGTYPE_p_long.getCPtr(den), fmpz_mat_struct.getCPtr(A), A);
  }

  public static int fmpz_mat_is_in_rref_with_rank(fmpz_mat_struct A, SWIGTYPE_p_long den, int rank) {
    return arblibJNI.fmpz_mat_is_in_rref_with_rank(fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(den), rank);
  }

  public static int fmpz_mat_rref_mod(SWIGTYPE_p_long perm, fmpz_mat_struct A, SWIGTYPE_p_long p) {
    return arblibJNI.fmpz_mat_rref_mod(SWIGTYPE_p_long.getCPtr(perm), fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(p));
  }

  public static int fmpz_mat_howell_form_mod(fmpz_mat_struct A, SWIGTYPE_p_long mod) {
    return arblibJNI.fmpz_mat_howell_form_mod(fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(mod));
  }

  public static void fmpz_mat_strong_echelon_form_mod(fmpz_mat_struct A, SWIGTYPE_p_long mod) {
    arblibJNI.fmpz_mat_strong_echelon_form_mod(fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(mod));
  }

  public static void fmpz_mat_trace(SWIGTYPE_p_long trace, fmpz_mat_struct mat) {
    arblibJNI.fmpz_mat_trace(SWIGTYPE_p_long.getCPtr(trace), fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void fmpz_mat_det(SWIGTYPE_p_long det, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_det(SWIGTYPE_p_long.getCPtr(det), fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_det_cofactor(SWIGTYPE_p_long det, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_det_cofactor(SWIGTYPE_p_long.getCPtr(det), fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_det_bareiss(SWIGTYPE_p_long det, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_det_bareiss(SWIGTYPE_p_long.getCPtr(det), fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_det_modular(SWIGTYPE_p_long det, fmpz_mat_struct A, int proved) {
    arblibJNI.fmpz_mat_det_modular(SWIGTYPE_p_long.getCPtr(det), fmpz_mat_struct.getCPtr(A), A, proved);
  }

  public static void fmpz_mat_det_modular_accelerated(SWIGTYPE_p_long det, fmpz_mat_struct A, int proved) {
    arblibJNI.fmpz_mat_det_modular_accelerated(SWIGTYPE_p_long.getCPtr(det), fmpz_mat_struct.getCPtr(A), A, proved);
  }

  public static void fmpz_mat_det_modular_given_divisor(SWIGTYPE_p_long det, fmpz_mat_struct A, SWIGTYPE_p_long d, int proved) {
    arblibJNI.fmpz_mat_det_modular_given_divisor(SWIGTYPE_p_long.getCPtr(det), fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(d), proved);
  }

  public static void fmpz_mat_det_bound(SWIGTYPE_p_long bound, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_det_bound(SWIGTYPE_p_long.getCPtr(bound), fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_det_divisor(SWIGTYPE_p_long d, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_det_divisor(SWIGTYPE_p_long.getCPtr(d), fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_similarity(fmpz_mat_struct A, int r, SWIGTYPE_p_long d) {
    arblibJNI.fmpz_mat_similarity(fmpz_mat_struct.getCPtr(A), A, r, SWIGTYPE_p_long.getCPtr(d));
  }

  public static void _fmpz_mat_charpoly_berkowitz(SWIGTYPE_p_long rop, fmpz_mat_struct op) {
    arblibJNI._fmpz_mat_charpoly_berkowitz(SWIGTYPE_p_long.getCPtr(rop), fmpz_mat_struct.getCPtr(op), op);
  }

  public static void fmpz_mat_charpoly_berkowitz(fmpz_poly_struct cp, fmpz_mat_struct mat) {
    arblibJNI.fmpz_mat_charpoly_berkowitz(fmpz_poly_struct.getCPtr(cp), cp, fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void _fmpz_mat_charpoly_modular(SWIGTYPE_p_long rop, fmpz_mat_struct op) {
    arblibJNI._fmpz_mat_charpoly_modular(SWIGTYPE_p_long.getCPtr(rop), fmpz_mat_struct.getCPtr(op), op);
  }

  public static void fmpz_mat_charpoly_modular(fmpz_poly_struct cp, fmpz_mat_struct mat) {
    arblibJNI.fmpz_mat_charpoly_modular(fmpz_poly_struct.getCPtr(cp), cp, fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void _fmpz_mat_charpoly(SWIGTYPE_p_long cp, fmpz_mat_struct mat) {
    arblibJNI._fmpz_mat_charpoly(SWIGTYPE_p_long.getCPtr(cp), fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void fmpz_mat_charpoly(fmpz_poly_struct cp, fmpz_mat_struct mat) {
    arblibJNI.fmpz_mat_charpoly(fmpz_poly_struct.getCPtr(cp), cp, fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int _fmpz_mat_minpoly_modular(SWIGTYPE_p_long rop, fmpz_mat_struct op) {
    return arblibJNI._fmpz_mat_minpoly_modular(SWIGTYPE_p_long.getCPtr(rop), fmpz_mat_struct.getCPtr(op), op);
  }

  public static void fmpz_mat_minpoly_modular(fmpz_poly_struct cp, fmpz_mat_struct mat) {
    arblibJNI.fmpz_mat_minpoly_modular(fmpz_poly_struct.getCPtr(cp), cp, fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int _fmpz_mat_minpoly(SWIGTYPE_p_long cp, fmpz_mat_struct mat) {
    return arblibJNI._fmpz_mat_minpoly(SWIGTYPE_p_long.getCPtr(cp), fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void fmpz_mat_minpoly(fmpz_poly_struct cp, fmpz_mat_struct mat) {
    arblibJNI.fmpz_mat_minpoly(fmpz_poly_struct.getCPtr(cp), cp, fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_rank(fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_rank(fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_solve_bound(SWIGTYPE_p_long N, SWIGTYPE_p_long D, fmpz_mat_struct A, fmpz_mat_struct B) {
    arblibJNI.fmpz_mat_solve_bound(SWIGTYPE_p_long.getCPtr(N), SWIGTYPE_p_long.getCPtr(D), fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static int fmpz_mat_solve(fmpz_mat_struct X, SWIGTYPE_p_long den, fmpz_mat_struct A, fmpz_mat_struct B) {
    return arblibJNI.fmpz_mat_solve(fmpz_mat_struct.getCPtr(X), X, SWIGTYPE_p_long.getCPtr(den), fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static int fmpz_mat_solve_cramer(fmpz_mat_struct X, SWIGTYPE_p_long den, fmpz_mat_struct A, fmpz_mat_struct B) {
    return arblibJNI.fmpz_mat_solve_cramer(fmpz_mat_struct.getCPtr(X), X, SWIGTYPE_p_long.getCPtr(den), fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static int fmpz_mat_solve_fflu(fmpz_mat_struct X, SWIGTYPE_p_long den, fmpz_mat_struct A, fmpz_mat_struct B) {
    return arblibJNI.fmpz_mat_solve_fflu(fmpz_mat_struct.getCPtr(X), X, SWIGTYPE_p_long.getCPtr(den), fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static void fmpz_mat_solve_fflu_precomp(fmpz_mat_struct X, SWIGTYPE_p_long perm, fmpz_mat_struct FFLU, fmpz_mat_struct B) {
    arblibJNI.fmpz_mat_solve_fflu_precomp(fmpz_mat_struct.getCPtr(X), X, SWIGTYPE_p_long.getCPtr(perm), fmpz_mat_struct.getCPtr(FFLU), FFLU, fmpz_mat_struct.getCPtr(B), B);
  }

  public static long fmpz_mat_find_good_prime_and_invert(nmod_mat_struct Ainv, fmpz_mat_struct A, SWIGTYPE_p_long det_bound) {
    return arblibJNI.fmpz_mat_find_good_prime_and_invert(nmod_mat_struct.getCPtr(Ainv), Ainv, fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(det_bound));
  }

  public static SWIGTYPE_p_unsigned_long fmpz_mat_dixon_get_crt_primes(SWIGTYPE_p_long num_primes, fmpz_mat_struct A, long p) {
    long cPtr = arblibJNI.fmpz_mat_dixon_get_crt_primes(SWIGTYPE_p_long.getCPtr(num_primes), fmpz_mat_struct.getCPtr(A), A, p);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
  }

  public static void _fmpz_mat_solve_dixon(fmpz_mat_struct X, SWIGTYPE_p_long mod, fmpz_mat_struct A, fmpz_mat_struct B, nmod_mat_struct Ainv, long p, SWIGTYPE_p_long N, SWIGTYPE_p_long D) {
    arblibJNI._fmpz_mat_solve_dixon(fmpz_mat_struct.getCPtr(X), X, SWIGTYPE_p_long.getCPtr(mod), fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B, nmod_mat_struct.getCPtr(Ainv), Ainv, p, SWIGTYPE_p_long.getCPtr(N), SWIGTYPE_p_long.getCPtr(D));
  }

  public static int fmpz_mat_solve_dixon(fmpz_mat_struct X, SWIGTYPE_p_long mod, fmpz_mat_struct A, fmpz_mat_struct B) {
    return arblibJNI.fmpz_mat_solve_dixon(fmpz_mat_struct.getCPtr(X), X, SWIGTYPE_p_long.getCPtr(mod), fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static void _fmpz_mat_solve_dixon_den(fmpz_mat_struct X, SWIGTYPE_p_long den, fmpz_mat_struct A, fmpz_mat_struct B, nmod_mat_struct Ainv, long p, SWIGTYPE_p_long N, SWIGTYPE_p_long D) {
    arblibJNI._fmpz_mat_solve_dixon_den(fmpz_mat_struct.getCPtr(X), X, SWIGTYPE_p_long.getCPtr(den), fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B, nmod_mat_struct.getCPtr(Ainv), Ainv, p, SWIGTYPE_p_long.getCPtr(N), SWIGTYPE_p_long.getCPtr(D));
  }

  public static int fmpz_mat_solve_dixon_den(fmpz_mat_struct X, SWIGTYPE_p_long den, fmpz_mat_struct A, fmpz_mat_struct B) {
    return arblibJNI.fmpz_mat_solve_dixon_den(fmpz_mat_struct.getCPtr(X), X, SWIGTYPE_p_long.getCPtr(den), fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static int fmpz_mat_solve_multi_mod_den(fmpz_mat_struct X, SWIGTYPE_p_long den, fmpz_mat_struct A, fmpz_mat_struct B) {
    return arblibJNI.fmpz_mat_solve_multi_mod_den(fmpz_mat_struct.getCPtr(X), X, SWIGTYPE_p_long.getCPtr(den), fmpz_mat_struct.getCPtr(A), A, fmpz_mat_struct.getCPtr(B), B);
  }

  public static int fmpz_mat_nullspace(fmpz_mat_struct res, fmpz_mat_struct mat) {
    return arblibJNI.fmpz_mat_nullspace(fmpz_mat_struct.getCPtr(res), res, fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static int fmpz_mat_inv(fmpz_mat_struct B, SWIGTYPE_p_long den, fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_inv(fmpz_mat_struct.getCPtr(B), B, SWIGTYPE_p_long.getCPtr(den), fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_set_nmod_mat(fmpz_mat_struct A, nmod_mat_struct Amod) {
    arblibJNI.fmpz_mat_set_nmod_mat(fmpz_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(Amod), Amod);
  }

  public static void fmpz_mat_set_nmod_mat_unsigned(fmpz_mat_struct A, nmod_mat_struct Amod) {
    arblibJNI.fmpz_mat_set_nmod_mat_unsigned(fmpz_mat_struct.getCPtr(A), A, nmod_mat_struct.getCPtr(Amod), Amod);
  }

  public static void fmpz_mat_get_nmod_mat(nmod_mat_struct Amod, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_get_nmod_mat(nmod_mat_struct.getCPtr(Amod), Amod, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_CRT_ui(fmpz_mat_struct res, fmpz_mat_struct mat1, SWIGTYPE_p_long m1, nmod_mat_struct mat2, int sign) {
    arblibJNI.fmpz_mat_CRT_ui(fmpz_mat_struct.getCPtr(res), res, fmpz_mat_struct.getCPtr(mat1), mat1, SWIGTYPE_p_long.getCPtr(m1), nmod_mat_struct.getCPtr(mat2), mat2, sign);
  }

  public static void fmpz_mat_multi_mod_ui_precomp(SWIGTYPE_p_a_1__nmod_mat_struct residues, int nres, fmpz_mat_struct mat, fmpz_comb_struct comb, fmpz_comb_temp_struct temp) {
    arblibJNI.fmpz_mat_multi_mod_ui_precomp(SWIGTYPE_p_a_1__nmod_mat_struct.getCPtr(residues), nres, fmpz_mat_struct.getCPtr(mat), mat, fmpz_comb_struct.getCPtr(comb), comb, fmpz_comb_temp_struct.getCPtr(temp), temp);
  }

  public static void fmpz_mat_multi_mod_ui(SWIGTYPE_p_a_1__nmod_mat_struct residues, int nres, fmpz_mat_struct mat) {
    arblibJNI.fmpz_mat_multi_mod_ui(SWIGTYPE_p_a_1__nmod_mat_struct.getCPtr(residues), nres, fmpz_mat_struct.getCPtr(mat), mat);
  }

  public static void fmpz_mat_multi_CRT_ui_precomp(fmpz_mat_struct mat, SWIGTYPE_p_a_1__nmod_mat_struct residues, int nres, fmpz_comb_struct comb, fmpz_comb_temp_struct temp, int sign) {
    arblibJNI.fmpz_mat_multi_CRT_ui_precomp(fmpz_mat_struct.getCPtr(mat), mat, SWIGTYPE_p_a_1__nmod_mat_struct.getCPtr(residues), nres, fmpz_comb_struct.getCPtr(comb), comb, fmpz_comb_temp_struct.getCPtr(temp), temp, sign);
  }

  public static void fmpz_mat_multi_CRT_ui(fmpz_mat_struct mat, SWIGTYPE_p_a_1__nmod_mat_struct residues, int nres, int sign) {
    arblibJNI.fmpz_mat_multi_CRT_ui(fmpz_mat_struct.getCPtr(mat), mat, SWIGTYPE_p_a_1__nmod_mat_struct.getCPtr(residues), nres, sign);
  }

  public static void fmpz_mat_hnf(fmpz_mat_struct H, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_hnf(fmpz_mat_struct.getCPtr(H), H, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_hnf_transform(fmpz_mat_struct H, fmpz_mat_struct U, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_hnf_transform(fmpz_mat_struct.getCPtr(H), H, fmpz_mat_struct.getCPtr(U), U, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_hnf_classical(fmpz_mat_struct H, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_hnf_classical(fmpz_mat_struct.getCPtr(H), H, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_hnf_xgcd(fmpz_mat_struct H, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_hnf_xgcd(fmpz_mat_struct.getCPtr(H), H, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_hnf_minors(fmpz_mat_struct H, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_hnf_minors(fmpz_mat_struct.getCPtr(H), H, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_hnf_minors_transform(fmpz_mat_struct H, fmpz_mat_struct U, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_hnf_minors_transform(fmpz_mat_struct.getCPtr(H), H, fmpz_mat_struct.getCPtr(U), U, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_hnf_modular(fmpz_mat_struct H, fmpz_mat_struct A, SWIGTYPE_p_long D) {
    arblibJNI.fmpz_mat_hnf_modular(fmpz_mat_struct.getCPtr(H), H, fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(D));
  }

  public static void fmpz_mat_hnf_modular_eldiv(fmpz_mat_struct A, SWIGTYPE_p_long D) {
    arblibJNI.fmpz_mat_hnf_modular_eldiv(fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(D));
  }

  public static void fmpz_mat_hnf_pernet_stein(fmpz_mat_struct H, fmpz_mat_struct A, flint_rand_s state) {
    arblibJNI.fmpz_mat_hnf_pernet_stein(fmpz_mat_struct.getCPtr(H), H, fmpz_mat_struct.getCPtr(A), A, flint_rand_s.getCPtr(state), state);
  }

  public static int fmpz_mat_is_in_hnf(fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_is_in_hnf(fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_snf(fmpz_mat_struct S, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_snf(fmpz_mat_struct.getCPtr(S), S, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_snf_diagonal(fmpz_mat_struct S, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_snf_diagonal(fmpz_mat_struct.getCPtr(S), S, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_snf_kannan_bachem(fmpz_mat_struct S, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_snf_kannan_bachem(fmpz_mat_struct.getCPtr(S), S, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_snf_iliopoulos(fmpz_mat_struct S, fmpz_mat_struct A, SWIGTYPE_p_long mod) {
    arblibJNI.fmpz_mat_snf_iliopoulos(fmpz_mat_struct.getCPtr(S), S, fmpz_mat_struct.getCPtr(A), A, SWIGTYPE_p_long.getCPtr(mod));
  }

  public static int fmpz_mat_is_in_snf(fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_is_in_snf(fmpz_mat_struct.getCPtr(A), A);
  }

  public static int fmpz_mat_is_hadamard(fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_is_hadamard(fmpz_mat_struct.getCPtr(A), A);
  }

  public static int fmpz_mat_hadamard(fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_hadamard(fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_gram(fmpz_mat_struct B, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_gram(fmpz_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A);
  }

  public static int fmpz_mat_get_d_mat(d_mat_struct B, fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_get_d_mat(d_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A);
  }

  public static int fmpz_mat_get_d_mat_transpose(d_mat_struct B, fmpz_mat_struct A) {
    return arblibJNI.fmpz_mat_get_d_mat_transpose(d_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_get_mpf_mat(mpf_mat_struct B, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_get_mpf_mat(mpf_mat_struct.getCPtr(B), B, fmpz_mat_struct.getCPtr(A), A);
  }

  public static void fmpz_mat_chol_d(d_mat_struct R, fmpz_mat_struct A) {
    arblibJNI.fmpz_mat_chol_d(d_mat_struct.getCPtr(R), R, fmpz_mat_struct.getCPtr(A), A);
  }

  public static int fmpz_mat_is_reduced(fmpz_mat_struct A, double delta, double eta) {
    return arblibJNI.fmpz_mat_is_reduced(fmpz_mat_struct.getCPtr(A), A, delta, eta);
  }

  public static int fmpz_mat_is_reduced_gram(fmpz_mat_struct A, double delta, double eta) {
    return arblibJNI.fmpz_mat_is_reduced_gram(fmpz_mat_struct.getCPtr(A), A, delta, eta);
  }

  public static int fmpz_mat_is_reduced_with_removal(fmpz_mat_struct A, double delta, double eta, SWIGTYPE_p_long gs_B, int newd) {
    return arblibJNI.fmpz_mat_is_reduced_with_removal(fmpz_mat_struct.getCPtr(A), A, delta, eta, SWIGTYPE_p_long.getCPtr(gs_B), newd);
  }

  public static int fmpz_mat_is_reduced_gram_with_removal(fmpz_mat_struct A, double delta, double eta, SWIGTYPE_p_long gs_B, int newd) {
    return arblibJNI.fmpz_mat_is_reduced_gram_with_removal(fmpz_mat_struct.getCPtr(A), A, delta, eta, SWIGTYPE_p_long.getCPtr(gs_B), newd);
  }

  public static void fmpz_mat_lll_original(fmpz_mat_struct A, fmpq delta, fmpq eta) {
    arblibJNI.fmpz_mat_lll_original(fmpz_mat_struct.getCPtr(A), A, fmpq.getCPtr(delta), delta, fmpq.getCPtr(eta), eta);
  }

  public static void fmpz_mat_lll_storjohann(fmpz_mat_struct A, fmpq delta, fmpq eta) {
    arblibJNI.fmpz_mat_lll_storjohann(fmpz_mat_struct.getCPtr(A), A, fmpq.getCPtr(delta), delta, fmpq.getCPtr(eta), eta);
  }

  public static int fmpz_mat_col_partition(SWIGTYPE_p_long part, fmpz_mat_struct M, int short_circuit) {
    return arblibJNI.fmpz_mat_col_partition(SWIGTYPE_p_long.getCPtr(part), fmpz_mat_struct.getCPtr(M), M, short_circuit);
  }

  public static int fmpz_mat_next_col_van_hoeij(fmpz_mat_struct M, SWIGTYPE_p_long P, fmpz_mat_struct col, int exp, int U_exp) {
    return arblibJNI.fmpz_mat_next_col_van_hoeij(fmpz_mat_struct.getCPtr(M), M, SWIGTYPE_p_long.getCPtr(P), fmpz_mat_struct.getCPtr(col), col, exp, U_exp);
  }

  public static void fmpz_poly_factor_init(fmpz_poly_factor_struct fac) {
    arblibJNI.fmpz_poly_factor_init(fmpz_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void fmpz_poly_factor_init2(fmpz_poly_factor_struct fac, int alloc) {
    arblibJNI.fmpz_poly_factor_init2(fmpz_poly_factor_struct.getCPtr(fac), fac, alloc);
  }

  public static void fmpz_poly_factor_realloc(fmpz_poly_factor_struct fac, int alloc) {
    arblibJNI.fmpz_poly_factor_realloc(fmpz_poly_factor_struct.getCPtr(fac), fac, alloc);
  }

  public static void fmpz_poly_factor_fit_length(fmpz_poly_factor_struct fac, int len) {
    arblibJNI.fmpz_poly_factor_fit_length(fmpz_poly_factor_struct.getCPtr(fac), fac, len);
  }

  public static void fmpz_poly_factor_clear(fmpz_poly_factor_struct fac) {
    arblibJNI.fmpz_poly_factor_clear(fmpz_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void fmpz_poly_factor_set(fmpz_poly_factor_struct res, fmpz_poly_factor_struct fac) {
    arblibJNI.fmpz_poly_factor_set(fmpz_poly_factor_struct.getCPtr(res), res, fmpz_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void fmpz_poly_factor_insert(fmpz_poly_factor_struct fac, fmpz_poly_struct p, int exp) {
    arblibJNI.fmpz_poly_factor_insert(fmpz_poly_factor_struct.getCPtr(fac), fac, fmpz_poly_struct.getCPtr(p), p, exp);
  }

  public static void fmpz_poly_factor_concat(fmpz_poly_factor_struct res, fmpz_poly_factor_struct fac) {
    arblibJNI.fmpz_poly_factor_concat(fmpz_poly_factor_struct.getCPtr(res), res, fmpz_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void fmpz_poly_factor_print(fmpz_poly_factor_struct fac) {
    arblibJNI.fmpz_poly_factor_print(fmpz_poly_factor_struct.getCPtr(fac), fac);
  }

  public static void fmpz_poly_factor_zassenhaus_recombination(fmpz_poly_factor_struct final_fac, fmpz_poly_factor_struct lifted_fac, fmpz_poly_struct F, SWIGTYPE_p_long P, int exp) {
    arblibJNI.fmpz_poly_factor_zassenhaus_recombination(fmpz_poly_factor_struct.getCPtr(final_fac), final_fac, fmpz_poly_factor_struct.getCPtr(lifted_fac), lifted_fac, fmpz_poly_struct.getCPtr(F), F, SWIGTYPE_p_long.getCPtr(P), exp);
  }

  public static void fmpz_poly_factor_squarefree(fmpz_poly_factor_struct fac, fmpz_poly_struct F) {
    arblibJNI.fmpz_poly_factor_squarefree(fmpz_poly_factor_struct.getCPtr(fac), fac, fmpz_poly_struct.getCPtr(F), F);
  }

  public static void fmpz_poly_factor_mignotte(SWIGTYPE_p_long B, fmpz_poly_struct f) {
    arblibJNI.fmpz_poly_factor_mignotte(SWIGTYPE_p_long.getCPtr(B), fmpz_poly_struct.getCPtr(f), f);
  }

  public static void _fmpz_poly_factor_zassenhaus(fmpz_poly_factor_struct final_fac, int exp, fmpz_poly_struct f, int cutoff, int use_van_hoeij) {
    arblibJNI._fmpz_poly_factor_zassenhaus(fmpz_poly_factor_struct.getCPtr(final_fac), final_fac, exp, fmpz_poly_struct.getCPtr(f), f, cutoff, use_van_hoeij);
  }

  public static void fmpz_poly_factor_zassenhaus(fmpz_poly_factor_struct fac, fmpz_poly_struct G) {
    arblibJNI.fmpz_poly_factor_zassenhaus(fmpz_poly_factor_struct.getCPtr(fac), fac, fmpz_poly_struct.getCPtr(G), G);
  }

  public static void _fmpz_poly_factor_quadratic(fmpz_poly_factor_struct fac, fmpz_poly_struct f, int exp) {
    arblibJNI._fmpz_poly_factor_quadratic(fmpz_poly_factor_struct.getCPtr(fac), fac, fmpz_poly_struct.getCPtr(f), f, exp);
  }

  public static int _fmpz_poly_factor_CLD_mat(fmpz_mat_struct res, fmpz_poly_struct f, fmpz_poly_factor_struct lifted_fac, SWIGTYPE_p_long P, long k) {
    return arblibJNI._fmpz_poly_factor_CLD_mat(fmpz_mat_struct.getCPtr(res), res, fmpz_poly_struct.getCPtr(f), f, fmpz_poly_factor_struct.getCPtr(lifted_fac), lifted_fac, SWIGTYPE_p_long.getCPtr(P), k);
  }

  public static int fmpz_poly_factor_van_hoeij_check_if_solved(fmpz_mat_struct M, fmpz_poly_factor_struct final_fac, fmpz_poly_factor_struct lifted_fac, fmpz_poly_struct f, SWIGTYPE_p_long P, int exp, SWIGTYPE_p_long lc) {
    return arblibJNI.fmpz_poly_factor_van_hoeij_check_if_solved(fmpz_mat_struct.getCPtr(M), M, fmpz_poly_factor_struct.getCPtr(final_fac), final_fac, fmpz_poly_factor_struct.getCPtr(lifted_fac), lifted_fac, fmpz_poly_struct.getCPtr(f), f, SWIGTYPE_p_long.getCPtr(P), exp, SWIGTYPE_p_long.getCPtr(lc));
  }

  public static void fmpz_poly_factor_van_hoeij(fmpz_poly_factor_struct final_fac, nmod_poly_factor_struct fac, fmpz_poly_struct f, int exp, long p) {
    arblibJNI.fmpz_poly_factor_van_hoeij(fmpz_poly_factor_struct.getCPtr(final_fac), final_fac, nmod_poly_factor_struct.getCPtr(fac), fac, fmpz_poly_struct.getCPtr(f), f, exp, p);
  }

  public static void fmpz_poly_factor(fmpz_poly_factor_struct fac, fmpz_poly_struct G) {
    arblibJNI.fmpz_poly_factor(fmpz_poly_factor_struct.getCPtr(fac), fac, fmpz_poly_struct.getCPtr(G), G);
  }

  public static void fmpz_poly_factor_get_fmpz_poly(fmpz_poly_struct z, fmpz_poly_factor_struct F, int i) {
    arblibJNI.fmpz_poly_factor_get_fmpz_poly(fmpz_poly_struct.getCPtr(z), z, fmpz_poly_factor_struct.getCPtr(F), F, i);
  }

  public static void fmpz_poly_factor_get_fmpz(SWIGTYPE_p_long z, fmpz_poly_factor_struct F) {
    arblibJNI.fmpz_poly_factor_get_fmpz(SWIGTYPE_p_long.getCPtr(z), fmpz_poly_factor_struct.getCPtr(F), F);
  }

  public static void fmpq_poly_init(fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_init(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpq_poly_init2(fmpq_poly_struct poly, int alloc) {
    arblibJNI.fmpq_poly_init2(fmpq_poly_struct.getCPtr(poly), poly, alloc);
  }

  public static void fmpq_poly_realloc(fmpq_poly_struct poly, int alloc) {
    arblibJNI.fmpq_poly_realloc(fmpq_poly_struct.getCPtr(poly), poly, alloc);
  }

  public static void fmpq_poly_fit_length(fmpq_poly_struct poly, int len) {
    arblibJNI.fmpq_poly_fit_length(fmpq_poly_struct.getCPtr(poly), poly, len);
  }

  public static void _fmpq_poly_set_length(fmpq_poly_struct poly, int len) {
    arblibJNI._fmpq_poly_set_length(fmpq_poly_struct.getCPtr(poly), poly, len);
  }

  public static void fmpq_poly_clear(fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_clear(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpq_poly_normalise(fmpq_poly_struct poly) {
    arblibJNI._fmpq_poly_normalise(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpq_poly_get_numerator(fmpz_poly_struct res, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_get_numerator(fmpz_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpq_poly_get_denominator(SWIGTYPE_p_long den, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_get_denominator(SWIGTYPE_p_long.getCPtr(den), fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpq_poly_canonicalise(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long den, int len) {
    arblibJNI._fmpq_poly_canonicalise(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static void fmpq_poly_canonicalise(fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_canonicalise(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int _fmpq_poly_is_canonical(SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len) {
    return arblibJNI._fmpq_poly_is_canonical(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static int fmpq_poly_is_canonical(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_is_canonical(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpq_poly_degree(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_degree(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpq_poly_length(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_length(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpq_poly_randtest(fmpq_poly_struct f, flint_rand_s state, int len, long bits_in) {
    arblibJNI.fmpq_poly_randtest(fmpq_poly_struct.getCPtr(f), f, flint_rand_s.getCPtr(state), state, len, bits_in);
  }

  public static void fmpq_poly_randtest_unsigned(fmpq_poly_struct f, flint_rand_s state, int len, long bits_in) {
    arblibJNI.fmpq_poly_randtest_unsigned(fmpq_poly_struct.getCPtr(f), f, flint_rand_s.getCPtr(state), state, len, bits_in);
  }

  public static void fmpq_poly_randtest_not_zero(fmpq_poly_struct f, flint_rand_s state, int len, long bits_in) {
    arblibJNI.fmpq_poly_randtest_not_zero(fmpq_poly_struct.getCPtr(f), f, flint_rand_s.getCPtr(state), state, len, bits_in);
  }

  public static void fmpq_poly_set(fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_set(fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void fmpq_poly_set_si(fmpq_poly_struct poly, int x) {
    arblibJNI.fmpq_poly_set_si(fmpq_poly_struct.getCPtr(poly), poly, x);
  }

  public static void fmpq_poly_set_ui(fmpq_poly_struct poly, long x) {
    arblibJNI.fmpq_poly_set_ui(fmpq_poly_struct.getCPtr(poly), poly, x);
  }

  public static void fmpq_poly_set_fmpz(fmpq_poly_struct poly, SWIGTYPE_p_long x) {
    arblibJNI.fmpq_poly_set_fmpz(fmpq_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpq_poly_set_fmpq(fmpq_poly_struct poly, fmpq x) {
    arblibJNI.fmpq_poly_set_fmpq(fmpq_poly_struct.getCPtr(poly), poly, fmpq.getCPtr(x), x);
  }

  public static void fmpq_poly_set_mpz(fmpq_poly_struct poly, __mpz_struct x) {
    arblibJNI.fmpq_poly_set_mpz(fmpq_poly_struct.getCPtr(poly), poly, __mpz_struct.getCPtr(x), x);
  }

  public static void fmpq_poly_set_mpq(fmpq_poly_struct poly, __mpq_struct x) {
    arblibJNI.fmpq_poly_set_mpq(fmpq_poly_struct.getCPtr(poly), poly, __mpq_struct.getCPtr(x), x);
  }

  public static void fmpq_poly_set_fmpz_poly(fmpq_poly_struct rop, fmpz_poly_struct op) {
    arblibJNI.fmpq_poly_set_fmpz_poly(fmpq_poly_struct.getCPtr(rop), rop, fmpz_poly_struct.getCPtr(op), op);
  }

  public static void _fmpq_poly_get_nmod_poly(nmod_poly_struct rop, fmpq_poly_struct op) {
    arblibJNI._fmpq_poly_get_nmod_poly(nmod_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op);
  }

  public static void fmpq_poly_get_nmod_poly_den(nmod_poly_struct rop, fmpq_poly_struct op, int den) {
    arblibJNI.fmpq_poly_get_nmod_poly_den(nmod_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, den);
  }

  public static void fmpq_poly_get_nmod_poly(nmod_poly_struct rop, fmpq_poly_struct op) {
    arblibJNI.fmpq_poly_get_nmod_poly(nmod_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op);
  }

  public static void fmpq_poly_set_nmod_poly(fmpq_poly_struct rop, nmod_poly_struct op) {
    arblibJNI.fmpq_poly_set_nmod_poly(fmpq_poly_struct.getCPtr(rop), rop, nmod_poly_struct.getCPtr(op), op);
  }

  public static void _fmpq_poly_set_array_mpq(SWIGTYPE_p_long poly, SWIGTYPE_p_long den, SWIGTYPE_p_a_1____mpq_struct a, int n) {
    arblibJNI._fmpq_poly_set_array_mpq(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_a_1____mpq_struct.getCPtr(a), n);
  }

  public static void fmpq_poly_set_array_mpq(fmpq_poly_struct poly, SWIGTYPE_p_a_1____mpq_struct a, int n) {
    arblibJNI.fmpq_poly_set_array_mpq(fmpq_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_a_1____mpq_struct.getCPtr(a), n);
  }

  public static int _fmpq_poly_set_str(SWIGTYPE_p_long poly, SWIGTYPE_p_long den, String str, int len) {
    return arblibJNI._fmpq_poly_set_str(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), str, len);
  }

  public static int fmpq_poly_set_str(fmpq_poly_struct poly, String str) {
    return arblibJNI.fmpq_poly_set_str(fmpq_poly_struct.getCPtr(poly), poly, str);
  }

  public static String fmpq_poly_get_str(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_get_str(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static String fmpq_poly_get_str_pretty(fmpq_poly_struct poly, String var) {
    return arblibJNI.fmpq_poly_get_str_pretty(fmpq_poly_struct.getCPtr(poly), poly, var);
  }

  public static String _fmpq_poly_get_str_pretty(SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, String var) {
    return arblibJNI._fmpq_poly_get_str_pretty(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, var);
  }

  public static void fmpq_poly_zero(fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_zero(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpq_poly_one(fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_one(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpq_poly_neg(fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_neg(fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void fmpq_poly_inv(fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_inv(fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void fmpq_poly_swap(fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_swap(fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void fmpq_poly_truncate(fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_truncate(fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpq_poly_set_trunc(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_set_trunc(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpq_poly_get_slice(fmpq_poly_struct rop, fmpq_poly_struct op, int i, int j) {
    arblibJNI.fmpq_poly_get_slice(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, i, j);
  }

  public static void fmpq_poly_reverse(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_reverse(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpq_poly_get_coeff_fmpz(SWIGTYPE_p_long x, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_get_coeff_fmpz(SWIGTYPE_p_long.getCPtr(x), fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpq_poly_get_coeff_fmpq(fmpq x, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_get_coeff_fmpq(fmpq.getCPtr(x), x, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpq_poly_get_coeff_mpq(__mpq_struct x, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_get_coeff_mpq(__mpq_struct.getCPtr(x), x, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpq_poly_set_coeff_si(fmpq_poly_struct poly, int n, int x) {
    arblibJNI.fmpq_poly_set_coeff_si(fmpq_poly_struct.getCPtr(poly), poly, n, x);
  }

  public static void fmpq_poly_set_coeff_ui(fmpq_poly_struct poly, int n, long x) {
    arblibJNI.fmpq_poly_set_coeff_ui(fmpq_poly_struct.getCPtr(poly), poly, n, x);
  }

  public static void fmpq_poly_set_coeff_fmpz(fmpq_poly_struct poly, int n, SWIGTYPE_p_long x) {
    arblibJNI.fmpq_poly_set_coeff_fmpz(fmpq_poly_struct.getCPtr(poly), poly, n, SWIGTYPE_p_long.getCPtr(x));
  }

  public static void fmpq_poly_set_coeff_fmpq(fmpq_poly_struct poly, int n, fmpq x) {
    arblibJNI.fmpq_poly_set_coeff_fmpq(fmpq_poly_struct.getCPtr(poly), poly, n, fmpq.getCPtr(x), x);
  }

  public static void fmpq_poly_set_coeff_mpz(fmpq_poly_struct poly, int n, __mpz_struct x) {
    arblibJNI.fmpq_poly_set_coeff_mpz(fmpq_poly_struct.getCPtr(poly), poly, n, __mpz_struct.getCPtr(x), x);
  }

  public static void fmpq_poly_set_coeff_mpq(fmpq_poly_struct poly, int n, __mpq_struct x) {
    arblibJNI.fmpq_poly_set_coeff_mpq(fmpq_poly_struct.getCPtr(poly), poly, n, __mpq_struct.getCPtr(x), x);
  }

  public static int fmpq_poly_equal(fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    return arblibJNI.fmpq_poly_equal(fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static int _fmpq_poly_cmp(SWIGTYPE_p_long lpoly, SWIGTYPE_p_long lden, SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, int len) {
    return arblibJNI._fmpq_poly_cmp(SWIGTYPE_p_long.getCPtr(lpoly), SWIGTYPE_p_long.getCPtr(lden), SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), len);
  }

  public static int fmpq_poly_cmp(fmpq_poly_struct left, fmpq_poly_struct right) {
    return arblibJNI.fmpq_poly_cmp(fmpq_poly_struct.getCPtr(left), left, fmpq_poly_struct.getCPtr(right), right);
  }

  public static int _fmpq_poly_equal_trunc(SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int n) {
    return arblibJNI._fmpq_poly_equal_trunc(SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, n);
  }

  public static int fmpq_poly_equal_trunc(fmpq_poly_struct poly1, fmpq_poly_struct poly2, int n) {
    return arblibJNI.fmpq_poly_equal_trunc(fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static int fmpq_poly_is_zero(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_is_zero(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpq_poly_is_one(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_is_one(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpq_poly_is_gen(fmpq_poly_struct op) {
    return arblibJNI.fmpq_poly_is_gen(fmpq_poly_struct.getCPtr(op), op);
  }

  public static void fmpq_poly_add_si(fmpq_poly_struct res, fmpq_poly_struct poly, int c) {
    arblibJNI.fmpq_poly_add_si(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, c);
  }

  public static void fmpq_poly_sub_si(fmpq_poly_struct res, fmpq_poly_struct poly, int c) {
    arblibJNI.fmpq_poly_sub_si(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, c);
  }

  public static void fmpq_poly_si_sub(fmpq_poly_struct res, int c, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_si_sub(fmpq_poly_struct.getCPtr(res), res, c, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpq_poly_add_fmpz(fmpq_poly_struct res, fmpq_poly_struct poly, SWIGTYPE_p_long c) {
    arblibJNI.fmpq_poly_add_fmpz(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpq_poly_sub_fmpz(fmpq_poly_struct res, fmpq_poly_struct poly, SWIGTYPE_p_long c) {
    arblibJNI.fmpq_poly_sub_fmpz(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpq_poly_fmpz_sub(fmpq_poly_struct res, SWIGTYPE_p_long c, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_fmpz_sub(fmpq_poly_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(c), fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void fmpq_poly_add_fmpq(fmpq_poly_struct res, fmpq_poly_struct poly, fmpq c) {
    arblibJNI.fmpq_poly_add_fmpq(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, fmpq.getCPtr(c), c);
  }

  public static void fmpq_poly_sub_fmpq(fmpq_poly_struct res, fmpq_poly_struct poly, fmpq c) {
    arblibJNI.fmpq_poly_sub_fmpq(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, fmpq.getCPtr(c), c);
  }

  public static void fmpq_poly_fmpq_sub(fmpq_poly_struct res, fmpq c, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_fmpq_sub(fmpq_poly_struct.getCPtr(res), res, fmpq.getCPtr(c), c, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpq_poly_add(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2) {
    arblibJNI._fmpq_poly_add(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2);
  }

  public static void fmpq_poly_add(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_add(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpq_poly_add_can(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int can) {
    arblibJNI._fmpq_poly_add_can(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, can);
  }

  public static void fmpq_poly_add_can(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2, int can) {
    arblibJNI.fmpq_poly_add_can(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, can);
  }

  public static void _fmpq_poly_add_series(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int n) {
    arblibJNI._fmpq_poly_add_series(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, n);
  }

  public static void fmpq_poly_add_series(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2, int n) {
    arblibJNI.fmpq_poly_add_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpq_poly_add_series_can(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int n, int can) {
    arblibJNI._fmpq_poly_add_series_can(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, n, can);
  }

  public static void fmpq_poly_add_series_can(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2, int n, int can) {
    arblibJNI.fmpq_poly_add_series_can(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, n, can);
  }

  public static void _fmpq_poly_sub(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2) {
    arblibJNI._fmpq_poly_sub(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2);
  }

  public static void fmpq_poly_sub(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_sub(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpq_poly_sub_can(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int can) {
    arblibJNI._fmpq_poly_sub_can(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, can);
  }

  public static void fmpq_poly_sub_can(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2, int can) {
    arblibJNI.fmpq_poly_sub_can(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, can);
  }

  public static void _fmpq_poly_sub_series(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int n) {
    arblibJNI._fmpq_poly_sub_series(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, n);
  }

  public static void fmpq_poly_sub_series(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2, int n) {
    arblibJNI.fmpq_poly_sub_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpq_poly_sub_series_can(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int n, int can) {
    arblibJNI._fmpq_poly_sub_series_can(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, n, can);
  }

  public static void fmpq_poly_sub_series_can(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2, int n, int can) {
    arblibJNI.fmpq_poly_sub_series_can(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, n, can);
  }

  public static void _fmpq_poly_scalar_mul_si(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, int c) {
    arblibJNI._fmpq_poly_scalar_mul_si(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, c);
  }

  public static void _fmpq_poly_scalar_mul_ui(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, long c) {
    arblibJNI._fmpq_poly_scalar_mul_ui(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, c);
  }

  public static void _fmpq_poly_scalar_mul_fmpz(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, SWIGTYPE_p_long c) {
    arblibJNI._fmpq_poly_scalar_mul_fmpz(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpq_poly_scalar_mul_fmpq(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, SWIGTYPE_p_long r, SWIGTYPE_p_long s) {
    arblibJNI._fmpq_poly_scalar_mul_fmpq(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(s));
  }

  public static void fmpq_poly_scalar_mul_si(fmpq_poly_struct rop, fmpq_poly_struct op, int c) {
    arblibJNI.fmpq_poly_scalar_mul_si(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, c);
  }

  public static void fmpq_poly_scalar_mul_ui(fmpq_poly_struct rop, fmpq_poly_struct op, long c) {
    arblibJNI.fmpq_poly_scalar_mul_ui(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, c);
  }

  public static void fmpq_poly_scalar_mul_fmpz(fmpq_poly_struct rop, fmpq_poly_struct op, SWIGTYPE_p_long c) {
    arblibJNI.fmpq_poly_scalar_mul_fmpz(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpq_poly_scalar_mul_fmpq(fmpq_poly_struct rop, fmpq_poly_struct op, fmpq c) {
    arblibJNI.fmpq_poly_scalar_mul_fmpq(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, fmpq.getCPtr(c), c);
  }

  public static void fmpq_poly_scalar_mul_mpz(fmpq_poly_struct rop, fmpq_poly_struct op, __mpz_struct c) {
    arblibJNI.fmpq_poly_scalar_mul_mpz(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, __mpz_struct.getCPtr(c), c);
  }

  public static void fmpq_poly_scalar_mul_mpq(fmpq_poly_struct rop, fmpq_poly_struct op, __mpq_struct c) {
    arblibJNI.fmpq_poly_scalar_mul_mpq(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, __mpq_struct.getCPtr(c), c);
  }

  public static void _fmpq_poly_scalar_div_si(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, int c) {
    arblibJNI._fmpq_poly_scalar_div_si(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, c);
  }

  public static void _fmpq_poly_scalar_div_ui(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, long c) {
    arblibJNI._fmpq_poly_scalar_div_ui(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, c);
  }

  public static void _fmpq_poly_scalar_div_fmpz(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, SWIGTYPE_p_long c) {
    arblibJNI._fmpq_poly_scalar_div_fmpz(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void _fmpq_poly_scalar_div_fmpq(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, SWIGTYPE_p_long r, SWIGTYPE_p_long s) {
    arblibJNI._fmpq_poly_scalar_div_fmpq(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(s));
  }

  public static void fmpq_poly_scalar_div_si(fmpq_poly_struct rop, fmpq_poly_struct op, int c) {
    arblibJNI.fmpq_poly_scalar_div_si(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, c);
  }

  public static void fmpq_poly_scalar_div_ui(fmpq_poly_struct rop, fmpq_poly_struct op, long c) {
    arblibJNI.fmpq_poly_scalar_div_ui(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, c);
  }

  public static void fmpq_poly_scalar_div_fmpz(fmpq_poly_struct rop, fmpq_poly_struct op, SWIGTYPE_p_long c) {
    arblibJNI.fmpq_poly_scalar_div_fmpz(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, SWIGTYPE_p_long.getCPtr(c));
  }

  public static void fmpq_poly_scalar_div_fmpq(fmpq_poly_struct rop, fmpq_poly_struct op, fmpq c) {
    arblibJNI.fmpq_poly_scalar_div_fmpq(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, fmpq.getCPtr(c), c);
  }

  public static void fmpq_poly_scalar_div_mpz(fmpq_poly_struct rop, fmpq_poly_struct op, __mpz_struct c) {
    arblibJNI.fmpq_poly_scalar_div_mpz(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, __mpz_struct.getCPtr(c), c);
  }

  public static void fmpq_poly_scalar_div_mpq(fmpq_poly_struct rop, fmpq_poly_struct op, __mpq_struct c) {
    arblibJNI.fmpq_poly_scalar_div_mpq(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op), op, __mpq_struct.getCPtr(c), c);
  }

  public static void _fmpq_poly_mul(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2) {
    arblibJNI._fmpq_poly_mul(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2);
  }

  public static void fmpq_poly_mul(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_mul(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpq_poly_mullow(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int n) {
    arblibJNI._fmpq_poly_mullow(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, n);
  }

  public static void fmpq_poly_mullow(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2, int n) {
    arblibJNI.fmpq_poly_mullow(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void fmpq_poly_addmul(fmpq_poly_struct rop, fmpq_poly_struct op1, fmpq_poly_struct op2) {
    arblibJNI.fmpq_poly_addmul(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op1), op1, fmpq_poly_struct.getCPtr(op2), op2);
  }

  public static void fmpq_poly_submul(fmpq_poly_struct rop, fmpq_poly_struct op1, fmpq_poly_struct op2) {
    arblibJNI.fmpq_poly_submul(fmpq_poly_struct.getCPtr(rop), rop, fmpq_poly_struct.getCPtr(op1), op1, fmpq_poly_struct.getCPtr(op2), op2);
  }

  public static void _fmpq_poly_pow(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, long e) {
    arblibJNI._fmpq_poly_pow(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, e);
  }

  public static void fmpq_poly_pow(fmpq_poly_struct rpoly, fmpq_poly_struct poly, long e) {
    arblibJNI.fmpq_poly_pow(fmpq_poly_struct.getCPtr(rpoly), rpoly, fmpq_poly_struct.getCPtr(poly), poly, e);
  }

  public static void _fmpq_poly_pow_trunc(SWIGTYPE_p_long res, SWIGTYPE_p_long resden, SWIGTYPE_p_long f, SWIGTYPE_p_long fden, int flen, long exp, int len) {
    arblibJNI._fmpq_poly_pow_trunc(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(resden), SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(fden), flen, exp, len);
  }

  public static void fmpq_poly_pow_trunc(fmpq_poly_struct res, fmpq_poly_struct poly, long exp, int len) {
    arblibJNI.fmpq_poly_pow_trunc(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, exp, len);
  }

  public static void fmpq_poly_shift_left(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_shift_left(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void fmpq_poly_shift_right(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_shift_right(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_divrem(SWIGTYPE_p_long Q, SWIGTYPE_p_long q, SWIGTYPE_p_long R, SWIGTYPE_p_long r, SWIGTYPE_p_long A, SWIGTYPE_p_long a, int lenA, SWIGTYPE_p_long B, SWIGTYPE_p_long b, int lenB, fmpz_preinvn_struct inv) {
    arblibJNI._fmpq_poly_divrem(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(q), SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(a), lenA, SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(b), lenB, fmpz_preinvn_struct.getCPtr(inv), inv);
  }

  public static void fmpq_poly_divrem(fmpq_poly_struct Q, fmpq_poly_struct R, fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_divrem(fmpq_poly_struct.getCPtr(Q), Q, fmpq_poly_struct.getCPtr(R), R, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpq_poly_div(SWIGTYPE_p_long Q, SWIGTYPE_p_long q, SWIGTYPE_p_long A, SWIGTYPE_p_long a, int lenA, SWIGTYPE_p_long B, SWIGTYPE_p_long b, int lenB, fmpz_preinvn_struct inv) {
    arblibJNI._fmpq_poly_div(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(q), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(a), lenA, SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(b), lenB, fmpz_preinvn_struct.getCPtr(inv), inv);
  }

  public static void fmpq_poly_div(fmpq_poly_struct Q, fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_div(fmpq_poly_struct.getCPtr(Q), Q, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpq_poly_rem(SWIGTYPE_p_long R, SWIGTYPE_p_long r, SWIGTYPE_p_long A, SWIGTYPE_p_long a, int lenA, SWIGTYPE_p_long B, SWIGTYPE_p_long b, int lenB, fmpz_preinvn_struct inv) {
    arblibJNI._fmpq_poly_rem(SWIGTYPE_p_long.getCPtr(R), SWIGTYPE_p_long.getCPtr(r), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(a), lenA, SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(b), lenB, fmpz_preinvn_struct.getCPtr(inv), inv);
  }

  public static void fmpq_poly_rem(fmpq_poly_struct R, fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_rem(fmpq_poly_struct.getCPtr(R), R, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static fmpq_poly_struct _fmpq_poly_powers_precompute(SWIGTYPE_p_long B, SWIGTYPE_p_long denB, int len) {
    long cPtr = arblibJNI._fmpq_poly_powers_precompute(SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(denB), len);
    return (cPtr == 0) ? null : new fmpq_poly_struct(cPtr, false);
  }

  public static void fmpq_poly_powers_precompute(fmpq_poly_powers_precomp_struct pinv, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_powers_precompute(fmpq_poly_powers_precomp_struct.getCPtr(pinv), pinv, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpq_poly_powers_clear(fmpq_poly_struct powers, int len) {
    arblibJNI._fmpq_poly_powers_clear(fmpq_poly_struct.getCPtr(powers), powers, len);
  }

  public static void fmpq_poly_powers_clear(fmpq_poly_powers_precomp_struct pinv) {
    arblibJNI.fmpq_poly_powers_clear(fmpq_poly_powers_precomp_struct.getCPtr(pinv), pinv);
  }

  public static void _fmpq_poly_rem_powers_precomp(SWIGTYPE_p_long A, SWIGTYPE_p_long denA, int m, SWIGTYPE_p_long B, SWIGTYPE_p_long denB, int n, fmpq_poly_struct powers) {
    arblibJNI._fmpq_poly_rem_powers_precomp(SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(denA), m, SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(denB), n, fmpq_poly_struct.getCPtr(powers), powers);
  }

  public static void fmpq_poly_rem_powers_precomp(fmpq_poly_struct R, fmpq_poly_struct A, fmpq_poly_struct B, fmpq_poly_powers_precomp_struct B_inv) {
    arblibJNI.fmpq_poly_rem_powers_precomp(fmpq_poly_struct.getCPtr(R), R, fmpq_poly_struct.getCPtr(A), A, fmpq_poly_struct.getCPtr(B), B, fmpq_poly_powers_precomp_struct.getCPtr(B_inv), B_inv);
  }

  public static int _fmpq_poly_divides(SWIGTYPE_p_long qpoly, SWIGTYPE_p_long qden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2) {
    return arblibJNI._fmpq_poly_divides(SWIGTYPE_p_long.getCPtr(qpoly), SWIGTYPE_p_long.getCPtr(qden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2);
  }

  public static int fmpq_poly_divides(fmpq_poly_struct q, fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    return arblibJNI.fmpq_poly_divides(fmpq_poly_struct.getCPtr(q), q, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static int fmpq_poly_remove(fmpq_poly_struct q, fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    return arblibJNI.fmpq_poly_remove(fmpq_poly_struct.getCPtr(q), q, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpq_poly_inv_series_newton(SWIGTYPE_p_long Qinv, SWIGTYPE_p_long Qinvden, SWIGTYPE_p_long Q, SWIGTYPE_p_long Qden, int Qlen, int n) {
    arblibJNI._fmpq_poly_inv_series_newton(SWIGTYPE_p_long.getCPtr(Qinv), SWIGTYPE_p_long.getCPtr(Qinvden), SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(Qden), Qlen, n);
  }

  public static void fmpq_poly_inv_series_newton(fmpq_poly_struct Qinv, fmpq_poly_struct Q, int n) {
    arblibJNI.fmpq_poly_inv_series_newton(fmpq_poly_struct.getCPtr(Qinv), Qinv, fmpq_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _fmpq_poly_inv_series(SWIGTYPE_p_long Qinv, SWIGTYPE_p_long Qinvden, SWIGTYPE_p_long Q, SWIGTYPE_p_long Qden, int Qlen, int n) {
    arblibJNI._fmpq_poly_inv_series(SWIGTYPE_p_long.getCPtr(Qinv), SWIGTYPE_p_long.getCPtr(Qinvden), SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(Qden), Qlen, n);
  }

  public static void fmpq_poly_inv_series(fmpq_poly_struct Qinv, fmpq_poly_struct Q, int n) {
    arblibJNI.fmpq_poly_inv_series(fmpq_poly_struct.getCPtr(Qinv), Qinv, fmpq_poly_struct.getCPtr(Q), Q, n);
  }

  public static void _fmpq_poly_div_series(SWIGTYPE_p_long Q, SWIGTYPE_p_long denQ, SWIGTYPE_p_long A, SWIGTYPE_p_long denA, int lenA, SWIGTYPE_p_long B, SWIGTYPE_p_long denB, int lenB, int n) {
    arblibJNI._fmpq_poly_div_series(SWIGTYPE_p_long.getCPtr(Q), SWIGTYPE_p_long.getCPtr(denQ), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(denA), lenA, SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(denB), lenB, n);
  }

  public static void fmpq_poly_div_series(fmpq_poly_struct Q, fmpq_poly_struct A, fmpq_poly_struct B, int n) {
    arblibJNI.fmpq_poly_div_series(fmpq_poly_struct.getCPtr(Q), Q, fmpq_poly_struct.getCPtr(A), A, fmpq_poly_struct.getCPtr(B), B, n);
  }

  public static void _fmpq_poly_gcd(SWIGTYPE_p_long G, SWIGTYPE_p_long denG, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB) {
    arblibJNI._fmpq_poly_gcd(SWIGTYPE_p_long.getCPtr(G), SWIGTYPE_p_long.getCPtr(denG), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB);
  }

  public static void fmpq_poly_gcd(fmpq_poly_struct G, fmpq_poly_struct A, fmpq_poly_struct B) {
    arblibJNI.fmpq_poly_gcd(fmpq_poly_struct.getCPtr(G), G, fmpq_poly_struct.getCPtr(A), A, fmpq_poly_struct.getCPtr(B), B);
  }

  public static void _fmpq_poly_xgcd(SWIGTYPE_p_long G, SWIGTYPE_p_long denG, SWIGTYPE_p_long S, SWIGTYPE_p_long denS, SWIGTYPE_p_long T, SWIGTYPE_p_long denT, SWIGTYPE_p_long A, SWIGTYPE_p_long denA, int lenA, SWIGTYPE_p_long B, SWIGTYPE_p_long denB, int lenB) {
    arblibJNI._fmpq_poly_xgcd(SWIGTYPE_p_long.getCPtr(G), SWIGTYPE_p_long.getCPtr(denG), SWIGTYPE_p_long.getCPtr(S), SWIGTYPE_p_long.getCPtr(denS), SWIGTYPE_p_long.getCPtr(T), SWIGTYPE_p_long.getCPtr(denT), SWIGTYPE_p_long.getCPtr(A), SWIGTYPE_p_long.getCPtr(denA), lenA, SWIGTYPE_p_long.getCPtr(B), SWIGTYPE_p_long.getCPtr(denB), lenB);
  }

  public static void fmpq_poly_xgcd(fmpq_poly_struct G, fmpq_poly_struct S, fmpq_poly_struct T, fmpq_poly_struct A, fmpq_poly_struct B) {
    arblibJNI.fmpq_poly_xgcd(fmpq_poly_struct.getCPtr(G), G, fmpq_poly_struct.getCPtr(S), S, fmpq_poly_struct.getCPtr(T), T, fmpq_poly_struct.getCPtr(A), A, fmpq_poly_struct.getCPtr(B), B);
  }

  public static void _fmpq_poly_lcm(SWIGTYPE_p_long G, SWIGTYPE_p_long denG, SWIGTYPE_p_long A, int lenA, SWIGTYPE_p_long B, int lenB) {
    arblibJNI._fmpq_poly_lcm(SWIGTYPE_p_long.getCPtr(G), SWIGTYPE_p_long.getCPtr(denG), SWIGTYPE_p_long.getCPtr(A), lenA, SWIGTYPE_p_long.getCPtr(B), lenB);
  }

  public static void fmpq_poly_lcm(fmpq_poly_struct L, fmpq_poly_struct A, fmpq_poly_struct B) {
    arblibJNI.fmpq_poly_lcm(fmpq_poly_struct.getCPtr(L), L, fmpq_poly_struct.getCPtr(A), A, fmpq_poly_struct.getCPtr(B), B);
  }

  public static void _fmpq_poly_resultant(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2) {
    arblibJNI._fmpq_poly_resultant(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2);
  }

  public static void fmpq_poly_resultant(fmpq r, fmpq_poly_struct f, fmpq_poly_struct g) {
    arblibJNI.fmpq_poly_resultant(fmpq.getCPtr(r), r, fmpq_poly_struct.getCPtr(f), f, fmpq_poly_struct.getCPtr(g), g);
  }

  public static void _fmpq_poly_resultant_div(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, SWIGTYPE_p_long divisor, int nbits) {
    arblibJNI._fmpq_poly_resultant_div(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, SWIGTYPE_p_long.getCPtr(divisor), nbits);
  }

  public static void fmpq_poly_resultant_div(fmpq r, fmpq_poly_struct f, fmpq_poly_struct g, SWIGTYPE_p_long divisor, int nbits) {
    arblibJNI.fmpq_poly_resultant_div(fmpq.getCPtr(r), r, fmpq_poly_struct.getCPtr(f), f, fmpq_poly_struct.getCPtr(g), g, SWIGTYPE_p_long.getCPtr(divisor), nbits);
  }

  public static void _fmpq_poly_derivative(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len) {
    arblibJNI._fmpq_poly_derivative(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static void fmpq_poly_derivative(fmpq_poly_struct res, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_derivative(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpq_poly_integral(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len) {
    arblibJNI._fmpq_poly_integral(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static void fmpq_poly_integral(fmpq_poly_struct res, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_integral(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpq_poly_invsqrt_series(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, int n) {
    arblibJNI._fmpq_poly_invsqrt_series(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, n);
  }

  public static void fmpq_poly_invsqrt_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_invsqrt_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_sqrt_series(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, int n) {
    arblibJNI._fmpq_poly_sqrt_series(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, n);
  }

  public static void fmpq_poly_sqrt_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_sqrt_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_power_sums(SWIGTYPE_p_long res, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, int len, int n) {
    arblibJNI._fmpq_poly_power_sums(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), len, n);
  }

  public static void fmpq_poly_power_sums(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_power_sums(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_power_sums_to_poly(SWIGTYPE_p_long res, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len) {
    arblibJNI._fmpq_poly_power_sums_to_poly(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static void fmpq_poly_power_sums_to_fmpz_poly(fmpz_poly_struct res, fmpq_poly_struct Q) {
    arblibJNI.fmpq_poly_power_sums_to_fmpz_poly(fmpz_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(Q), Q);
  }

  public static void fmpq_poly_power_sums_to_poly(fmpq_poly_struct res, fmpq_poly_struct Q) {
    arblibJNI.fmpq_poly_power_sums_to_poly(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(Q), Q);
  }

  public static void _fmpq_poly_log_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long f, SWIGTYPE_p_long fden, int flen, int n) {
    arblibJNI._fmpq_poly_log_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(f), SWIGTYPE_p_long.getCPtr(fden), flen, n);
  }

  public static void fmpq_poly_log_series(fmpq_poly_struct res, fmpq_poly_struct f, int n) {
    arblibJNI.fmpq_poly_log_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(f), f, n);
  }

  public static void _fmpq_poly_exp_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_exp_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_exp_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_exp_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_atan_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_atan_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_atan_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_atan_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_atanh_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_atanh_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_atanh_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_atanh_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_asin_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_asin_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_asin_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_asin_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_asinh_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_asinh_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_asinh_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_asinh_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_tan_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_tan_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_tan_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_tan_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_sin_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_sin_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_sin_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_sin_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_cos_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_cos_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_cos_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_cos_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_sin_cos_series(SWIGTYPE_p_long s, SWIGTYPE_p_long sden, SWIGTYPE_p_long c, SWIGTYPE_p_long cden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_sin_cos_series(SWIGTYPE_p_long.getCPtr(s), SWIGTYPE_p_long.getCPtr(sden), SWIGTYPE_p_long.getCPtr(c), SWIGTYPE_p_long.getCPtr(cden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_sin_cos_series(fmpq_poly_struct res1, fmpq_poly_struct res2, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_sin_cos_series(fmpq_poly_struct.getCPtr(res1), res1, fmpq_poly_struct.getCPtr(res2), res2, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_sinh_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_sinh_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_sinh_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_sinh_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_cosh_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_cosh_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_cosh_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_cosh_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_tanh_series(SWIGTYPE_p_long g, SWIGTYPE_p_long gden, SWIGTYPE_p_long h, SWIGTYPE_p_long hden, int hlen, int n) {
    arblibJNI._fmpq_poly_tanh_series(SWIGTYPE_p_long.getCPtr(g), SWIGTYPE_p_long.getCPtr(gden), SWIGTYPE_p_long.getCPtr(h), SWIGTYPE_p_long.getCPtr(hden), hlen, n);
  }

  public static void fmpq_poly_tanh_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_tanh_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_legendre_p(SWIGTYPE_p_long coeffs, SWIGTYPE_p_long den, long n) {
    arblibJNI._fmpq_poly_legendre_p(SWIGTYPE_p_long.getCPtr(coeffs), SWIGTYPE_p_long.getCPtr(den), n);
  }

  public static void fmpq_poly_legendre_p(fmpq_poly_struct poly, long n) {
    arblibJNI.fmpq_poly_legendre_p(fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_laguerre_l(SWIGTYPE_p_long coeffs, SWIGTYPE_p_long den, long n) {
    arblibJNI._fmpq_poly_laguerre_l(SWIGTYPE_p_long.getCPtr(coeffs), SWIGTYPE_p_long.getCPtr(den), n);
  }

  public static void fmpq_poly_laguerre_l(fmpq_poly_struct poly, long n) {
    arblibJNI.fmpq_poly_laguerre_l(fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_gegenbauer_c(SWIGTYPE_p_long coeffs, SWIGTYPE_p_long den, long n, fmpq a) {
    arblibJNI._fmpq_poly_gegenbauer_c(SWIGTYPE_p_long.getCPtr(coeffs), SWIGTYPE_p_long.getCPtr(den), n, fmpq.getCPtr(a), a);
  }

  public static void fmpq_poly_gegenbauer_c(fmpq_poly_struct poly, long n, fmpq a) {
    arblibJNI.fmpq_poly_gegenbauer_c(fmpq_poly_struct.getCPtr(poly), poly, n, fmpq.getCPtr(a), a);
  }

  public static void _fmpq_poly_evaluate_fmpz(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, SWIGTYPE_p_long a) {
    arblibJNI._fmpq_poly_evaluate_fmpz(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, SWIGTYPE_p_long.getCPtr(a));
  }

  public static void fmpq_poly_evaluate_fmpz(fmpq res, fmpq_poly_struct poly, SWIGTYPE_p_long a) {
    arblibJNI.fmpq_poly_evaluate_fmpz(fmpq.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(a));
  }

  public static void _fmpq_poly_evaluate_fmpq(SWIGTYPE_p_long rnum, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, SWIGTYPE_p_long anum, SWIGTYPE_p_long aden) {
    arblibJNI._fmpq_poly_evaluate_fmpq(SWIGTYPE_p_long.getCPtr(rnum), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, SWIGTYPE_p_long.getCPtr(anum), SWIGTYPE_p_long.getCPtr(aden));
  }

  public static void fmpq_poly_evaluate_fmpq(fmpq res, fmpq_poly_struct poly, fmpq a) {
    arblibJNI.fmpq_poly_evaluate_fmpq(fmpq.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, fmpq.getCPtr(a), a);
  }

  public static void fmpq_poly_evaluate_mpz(__mpq_struct res, fmpq_poly_struct poly, __mpz_struct a) {
    arblibJNI.fmpq_poly_evaluate_mpz(__mpq_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, __mpz_struct.getCPtr(a), a);
  }

  public static void fmpq_poly_evaluate_mpq(__mpq_struct res, fmpq_poly_struct poly, __mpq_struct a) {
    arblibJNI.fmpq_poly_evaluate_mpq(__mpq_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, __mpq_struct.getCPtr(a), a);
  }

  public static void _fmpq_poly_interpolate_fmpz_vec(SWIGTYPE_p_long poly, SWIGTYPE_p_long den, SWIGTYPE_p_long xs, SWIGTYPE_p_long ys, int n) {
    arblibJNI._fmpq_poly_interpolate_fmpz_vec(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(xs), SWIGTYPE_p_long.getCPtr(ys), n);
  }

  public static void fmpq_poly_interpolate_fmpz_vec(fmpq_poly_struct poly, SWIGTYPE_p_long xs, SWIGTYPE_p_long ys, int n) {
    arblibJNI.fmpq_poly_interpolate_fmpz_vec(fmpq_poly_struct.getCPtr(poly), poly, SWIGTYPE_p_long.getCPtr(xs), SWIGTYPE_p_long.getCPtr(ys), n);
  }

  public static void _fmpq_poly_compose(SWIGTYPE_p_long res, SWIGTYPE_p_long den, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2) {
    arblibJNI._fmpq_poly_compose(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2);
  }

  public static void fmpq_poly_compose(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2) {
    arblibJNI.fmpq_poly_compose(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _fmpq_poly_rescale(SWIGTYPE_p_long res, SWIGTYPE_p_long denr, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, SWIGTYPE_p_long xnum, SWIGTYPE_p_long xden) {
    arblibJNI._fmpq_poly_rescale(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(denr), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, SWIGTYPE_p_long.getCPtr(xnum), SWIGTYPE_p_long.getCPtr(xden));
  }

  public static void fmpq_poly_rescale(fmpq_poly_struct res, fmpq_poly_struct poly, fmpq x) {
    arblibJNI.fmpq_poly_rescale(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, fmpq.getCPtr(x), x);
  }

  public static void _fmpq_poly_compose_series_horner(SWIGTYPE_p_long res, SWIGTYPE_p_long den, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int n) {
    arblibJNI._fmpq_poly_compose_series_horner(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, n);
  }

  public static void fmpq_poly_compose_series_horner(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2, int n) {
    arblibJNI.fmpq_poly_compose_series_horner(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpq_poly_compose_series_brent_kung(SWIGTYPE_p_long res, SWIGTYPE_p_long den, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int n) {
    arblibJNI._fmpq_poly_compose_series_brent_kung(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, n);
  }

  public static void fmpq_poly_compose_series_brent_kung(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2, int n) {
    arblibJNI.fmpq_poly_compose_series_brent_kung(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpq_poly_compose_series(SWIGTYPE_p_long res, SWIGTYPE_p_long den, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, SWIGTYPE_p_long poly2, SWIGTYPE_p_long den2, int len2, int n) {
    arblibJNI._fmpq_poly_compose_series(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, SWIGTYPE_p_long.getCPtr(poly2), SWIGTYPE_p_long.getCPtr(den2), len2, n);
  }

  public static void fmpq_poly_compose_series(fmpq_poly_struct res, fmpq_poly_struct poly1, fmpq_poly_struct poly2, int n) {
    arblibJNI.fmpq_poly_compose_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2, n);
  }

  public static void _fmpq_poly_revert_series_lagrange(SWIGTYPE_p_long res, SWIGTYPE_p_long den, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, int n) {
    arblibJNI._fmpq_poly_revert_series_lagrange(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, n);
  }

  public static void fmpq_poly_revert_series_lagrange(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_revert_series_lagrange(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_revert_series_lagrange_fast(SWIGTYPE_p_long res, SWIGTYPE_p_long den, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, int n) {
    arblibJNI._fmpq_poly_revert_series_lagrange_fast(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, n);
  }

  public static void fmpq_poly_revert_series_lagrange_fast(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_revert_series_lagrange_fast(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_revert_series_newton(SWIGTYPE_p_long res, SWIGTYPE_p_long den, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, int n) {
    arblibJNI._fmpq_poly_revert_series_newton(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, n);
  }

  public static void fmpq_poly_revert_series_newton(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_revert_series_newton(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_revert_series(SWIGTYPE_p_long res, SWIGTYPE_p_long den, SWIGTYPE_p_long poly1, SWIGTYPE_p_long den1, int len1, int n) {
    arblibJNI._fmpq_poly_revert_series(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(den), SWIGTYPE_p_long.getCPtr(poly1), SWIGTYPE_p_long.getCPtr(den1), len1, n);
  }

  public static void fmpq_poly_revert_series(fmpq_poly_struct res, fmpq_poly_struct poly, int n) {
    arblibJNI.fmpq_poly_revert_series(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _fmpq_poly_content(fmpq res, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len) {
    arblibJNI._fmpq_poly_content(fmpq.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static void fmpq_poly_content(fmpq res, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_content(fmpq.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpq_poly_primitive_part(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len) {
    arblibJNI._fmpq_poly_primitive_part(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static void fmpq_poly_primitive_part(fmpq_poly_struct res, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_primitive_part(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int _fmpq_poly_is_monic(SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len) {
    return arblibJNI._fmpq_poly_is_monic(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static int fmpq_poly_is_monic(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_is_monic(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void _fmpq_poly_make_monic(SWIGTYPE_p_long rpoly, SWIGTYPE_p_long rden, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len) {
    arblibJNI._fmpq_poly_make_monic(SWIGTYPE_p_long.getCPtr(rpoly), SWIGTYPE_p_long.getCPtr(rden), SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static void fmpq_poly_make_monic(fmpq_poly_struct res, fmpq_poly_struct poly) {
    arblibJNI.fmpq_poly_make_monic(fmpq_poly_struct.getCPtr(res), res, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpq_poly_is_squarefree(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_is_squarefree(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpq_poly_debug(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_debug(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int _fmpq_poly_fprint(_IO_FILE file, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len) {
    return arblibJNI._fmpq_poly_fprint(_IO_FILE.getCPtr(file), file, SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static int fmpq_poly_fprint(_IO_FILE file, fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_fprint(_IO_FILE.getCPtr(file), file, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int _fmpq_poly_fprint_pretty(_IO_FILE file, SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, String x) {
    return arblibJNI._fmpq_poly_fprint_pretty(_IO_FILE.getCPtr(file), file, SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, x);
  }

  public static int fmpq_poly_fprint_pretty(_IO_FILE file, fmpq_poly_struct poly, String var) {
    return arblibJNI.fmpq_poly_fprint_pretty(_IO_FILE.getCPtr(file), file, fmpq_poly_struct.getCPtr(poly), poly, var);
  }

  public static int _fmpq_poly_print(SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len) {
    return arblibJNI._fmpq_poly_print(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len);
  }

  public static int fmpq_poly_print(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_print(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int _fmpq_poly_print_pretty(SWIGTYPE_p_long poly, SWIGTYPE_p_long den, int len, String x) {
    return arblibJNI._fmpq_poly_print_pretty(SWIGTYPE_p_long.getCPtr(poly), SWIGTYPE_p_long.getCPtr(den), len, x);
  }

  public static int fmpq_poly_print_pretty(fmpq_poly_struct poly, String var) {
    return arblibJNI.fmpq_poly_print_pretty(fmpq_poly_struct.getCPtr(poly), poly, var);
  }

  public static int fmpq_poly_fread(_IO_FILE file, fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_fread(_IO_FILE.getCPtr(file), file, fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static int fmpq_poly_read(fmpq_poly_struct poly) {
    return arblibJNI.fmpq_poly_read(fmpq_poly_struct.getCPtr(poly), poly);
  }

  public static void arb_poly_init(arb_poly_struct poly) {
    arblibJNI.arb_poly_init(arb_poly_struct.getCPtr(poly), poly);
  }

  public static void arb_poly_init2(arb_poly_struct poly, int len) {
    arblibJNI.arb_poly_init2(arb_poly_struct.getCPtr(poly), poly, len);
  }

  public static void arb_poly_clear(arb_poly_struct poly) {
    arblibJNI.arb_poly_clear(arb_poly_struct.getCPtr(poly), poly);
  }

  public static void arb_poly_fit_length(arb_poly_struct poly, int len) {
    arblibJNI.arb_poly_fit_length(arb_poly_struct.getCPtr(poly), poly, len);
  }

  public static void _arb_poly_set_length(arb_poly_struct poly, int len) {
    arblibJNI._arb_poly_set_length(arb_poly_struct.getCPtr(poly), poly, len);
  }

  public static void _arb_poly_normalise(arb_poly_struct poly) {
    arblibJNI._arb_poly_normalise(arb_poly_struct.getCPtr(poly), poly);
  }

  public static void arb_poly_swap(arb_poly_struct poly1, arb_poly_struct poly2) {
    arblibJNI.arb_poly_swap(arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2);
  }

  public static void arb_poly_set(arb_poly_struct poly, arb_poly_struct src) {
    arblibJNI.arb_poly_set(arb_poly_struct.getCPtr(poly), poly, arb_poly_struct.getCPtr(src), src);
  }

  public static void arb_poly_set_round(arb_poly_struct poly, arb_poly_struct src, int prec) {
    arblibJNI.arb_poly_set_round(arb_poly_struct.getCPtr(poly), poly, arb_poly_struct.getCPtr(src), src, prec);
  }

  public static void arb_poly_set_trunc(arb_poly_struct res, arb_poly_struct poly, int n) {
    arblibJNI.arb_poly_set_trunc(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, n);
  }

  public static void arb_poly_set_trunc_round(arb_poly_struct res, arb_poly_struct poly, int n, int prec) {
    arblibJNI.arb_poly_set_trunc_round(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, n, prec);
  }

  public static int arb_poly_length(arb_poly_struct poly) {
    return arblibJNI.arb_poly_length(arb_poly_struct.getCPtr(poly), poly);
  }

  public static int arb_poly_degree(arb_poly_struct poly) {
    return arblibJNI.arb_poly_degree(arb_poly_struct.getCPtr(poly), poly);
  }

  public static int arb_poly_valuation(arb_poly_struct poly) {
    return arblibJNI.arb_poly_valuation(arb_poly_struct.getCPtr(poly), poly);
  }

  public static int arb_poly_is_zero(arb_poly_struct z) {
    return arblibJNI.arb_poly_is_zero(arb_poly_struct.getCPtr(z), z);
  }

  public static int arb_poly_is_one(arb_poly_struct z) {
    return arblibJNI.arb_poly_is_one(arb_poly_struct.getCPtr(z), z);
  }

  public static int arb_poly_is_x(arb_poly_struct z) {
    return arblibJNI.arb_poly_is_x(arb_poly_struct.getCPtr(z), z);
  }

  public static void arb_poly_zero(arb_poly_struct poly) {
    arblibJNI.arb_poly_zero(arb_poly_struct.getCPtr(poly), poly);
  }

  public static void arb_poly_one(arb_poly_struct poly) {
    arblibJNI.arb_poly_one(arb_poly_struct.getCPtr(poly), poly);
  }

  public static void arb_poly_set_coeff_si(arb_poly_struct poly, int n, int x) {
    arblibJNI.arb_poly_set_coeff_si(arb_poly_struct.getCPtr(poly), poly, n, x);
  }

  public static void arb_poly_set_coeff_arb(arb_poly_struct poly, int n, arb_struct x) {
    arblibJNI.arb_poly_set_coeff_arb(arb_poly_struct.getCPtr(poly), poly, n, arb_struct.getCPtr(x), x);
  }

  public static void arb_poly_get_coeff_arb(arb_struct x, arb_poly_struct poly, int n) {
    arblibJNI.arb_poly_get_coeff_arb(arb_struct.getCPtr(x), x, arb_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _arb_poly_reverse(arb_struct res, arb_struct poly, int len, int n) {
    arblibJNI._arb_poly_reverse(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly), poly, len, n);
  }

  public static void _arb_poly_shift_right(arb_struct res, arb_struct poly, int len, int n) {
    arblibJNI._arb_poly_shift_right(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly), poly, len, n);
  }

  public static void arb_poly_shift_right(arb_poly_struct res, arb_poly_struct poly, int n) {
    arblibJNI.arb_poly_shift_right(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _arb_poly_shift_left(arb_struct res, arb_struct poly, int len, int n) {
    arblibJNI._arb_poly_shift_left(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly), poly, len, n);
  }

  public static void arb_poly_shift_left(arb_poly_struct res, arb_poly_struct poly, int n) {
    arblibJNI.arb_poly_shift_left(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, n);
  }

  public static void arb_poly_truncate(arb_poly_struct poly, int newlen) {
    arblibJNI.arb_poly_truncate(arb_poly_struct.getCPtr(poly), poly, newlen);
  }

  public static void arb_poly_set_fmpz_poly(arb_poly_struct poly, fmpz_poly_struct src, int prec) {
    arblibJNI.arb_poly_set_fmpz_poly(arb_poly_struct.getCPtr(poly), poly, fmpz_poly_struct.getCPtr(src), src, prec);
  }

  public static void arb_poly_set_fmpq_poly(arb_poly_struct poly, fmpq_poly_struct src, int prec) {
    arblibJNI.arb_poly_set_fmpq_poly(arb_poly_struct.getCPtr(poly), poly, fmpq_poly_struct.getCPtr(src), src, prec);
  }

  public static void arb_poly_set_arb(arb_poly_struct poly, arb_struct c) {
    arblibJNI.arb_poly_set_arb(arb_poly_struct.getCPtr(poly), poly, arb_struct.getCPtr(c), c);
  }

  public static void arb_poly_set_si(arb_poly_struct poly, int c) {
    arblibJNI.arb_poly_set_si(arb_poly_struct.getCPtr(poly), poly, c);
  }

  public static int arb_poly_get_unique_fmpz_poly(fmpz_poly_struct res, arb_poly_struct src) {
    return arblibJNI.arb_poly_get_unique_fmpz_poly(fmpz_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(src), src);
  }

  public static int arb_poly_contains(arb_poly_struct poly1, arb_poly_struct poly2) {
    return arblibJNI.arb_poly_contains(arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2);
  }

  public static int arb_poly_contains_fmpz_poly(arb_poly_struct poly1, fmpz_poly_struct poly2) {
    return arblibJNI.arb_poly_contains_fmpz_poly(arb_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static int arb_poly_contains_fmpq_poly(arb_poly_struct poly1, fmpq_poly_struct poly2) {
    return arblibJNI.arb_poly_contains_fmpq_poly(arb_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static int arb_poly_equal(arb_poly_struct A, arb_poly_struct B) {
    return arblibJNI.arb_poly_equal(arb_poly_struct.getCPtr(A), A, arb_poly_struct.getCPtr(B), B);
  }

  public static int _arb_poly_overlaps(arb_struct poly1, int len1, arb_struct poly2, int len2) {
    return arblibJNI._arb_poly_overlaps(arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2);
  }

  public static int arb_poly_overlaps(arb_poly_struct poly1, arb_poly_struct poly2) {
    return arblibJNI.arb_poly_overlaps(arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2);
  }

  public static void _arb_poly_majorant(arb_struct res, arb_struct vec, int len, int prec) {
    arblibJNI._arb_poly_majorant(arb_struct.getCPtr(res), res, arb_struct.getCPtr(vec), vec, len, prec);
  }

  public static void arb_poly_majorant(arb_poly_struct res, arb_poly_struct poly, int prec) {
    arblibJNI.arb_poly_majorant(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void arb_poly_fprintd(_IO_FILE file, arb_poly_struct poly, int digits) {
    arblibJNI.arb_poly_fprintd(_IO_FILE.getCPtr(file), file, arb_poly_struct.getCPtr(poly), poly, digits);
  }

  public static void arb_poly_printd(arb_poly_struct poly, int digits) {
    arblibJNI.arb_poly_printd(arb_poly_struct.getCPtr(poly), poly, digits);
  }

  public static void arb_poly_randtest(arb_poly_struct poly, flint_rand_s state, int len, int prec, int mag_bits) {
    arblibJNI.arb_poly_randtest(arb_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len, prec, mag_bits);
  }

  public static void _arb_poly_add(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int prec) {
    arblibJNI._arb_poly_add(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void arb_poly_add(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int prec) {
    arblibJNI.arb_poly_add(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void arb_poly_add_si(arb_poly_struct res, arb_poly_struct poly, int c, int prec) {
    arblibJNI.arb_poly_add_si(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, c, prec);
  }

  public static void _arb_poly_sub(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int prec) {
    arblibJNI._arb_poly_sub(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void arb_poly_sub(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int prec) {
    arblibJNI.arb_poly_sub(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void arb_poly_add_series(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int len, int prec) {
    arblibJNI.arb_poly_add_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, len, prec);
  }

  public static void arb_poly_sub_series(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int len, int prec) {
    arblibJNI.arb_poly_sub_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, len, prec);
  }

  public static void arb_poly_neg(arb_poly_struct res, arb_poly_struct poly) {
    arblibJNI.arb_poly_neg(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly);
  }

  public static void arb_poly_scalar_mul_2exp_si(arb_poly_struct res, arb_poly_struct poly, int c) {
    arblibJNI.arb_poly_scalar_mul_2exp_si(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, c);
  }

  public static void arb_poly_scalar_mul(arb_poly_struct res, arb_poly_struct poly, arb_struct c, int prec) {
    arblibJNI.arb_poly_scalar_mul(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, arb_struct.getCPtr(c), c, prec);
  }

  public static void arb_poly_scalar_div(arb_poly_struct res, arb_poly_struct poly, arb_struct c, int prec) {
    arblibJNI.arb_poly_scalar_div(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, arb_struct.getCPtr(c), c, prec);
  }

  public static void _arb_poly_mullow_ztrunc(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int n, int prec) {
    arblibJNI._arb_poly_mullow_ztrunc(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void arb_poly_mullow_ztrunc(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int n, int prec) {
    arblibJNI.arb_poly_mullow_ztrunc(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _arb_poly_mullow_classical(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int n, int prec) {
    arblibJNI._arb_poly_mullow_classical(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void arb_poly_mullow_classical(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int n, int prec) {
    arblibJNI.arb_poly_mullow_classical(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _arb_poly_mullow_block(arb_struct C, arb_struct A, int lenA, arb_struct B, int lenB, int n, int prec) {
    arblibJNI._arb_poly_mullow_block(arb_struct.getCPtr(C), C, arb_struct.getCPtr(A), A, lenA, arb_struct.getCPtr(B), B, lenB, n, prec);
  }

  public static void arb_poly_mullow_block(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int len, int prec) {
    arblibJNI.arb_poly_mullow_block(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, len, prec);
  }

  public static void _arb_poly_mullow(arb_struct C, arb_struct A, int lenA, arb_struct B, int lenB, int n, int prec) {
    arblibJNI._arb_poly_mullow(arb_struct.getCPtr(C), C, arb_struct.getCPtr(A), A, lenA, arb_struct.getCPtr(B), B, lenB, n, prec);
  }

  public static void arb_poly_mullow(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int len, int prec) {
    arblibJNI.arb_poly_mullow(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, len, prec);
  }

  public static void _arb_poly_mul(arb_struct C, arb_struct A, int lenA, arb_struct B, int lenB, int prec) {
    arblibJNI._arb_poly_mul(arb_struct.getCPtr(C), C, arb_struct.getCPtr(A), A, lenA, arb_struct.getCPtr(B), B, lenB, prec);
  }

  public static void arb_poly_mul(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int prec) {
    arblibJNI.arb_poly_mul(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void _arb_poly_mul_monic(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int prec) {
    arblibJNI._arb_poly_mul_monic(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void _arb_poly_inv_series(arb_struct Qinv, arb_struct Q, int Qlen, int len, int prec) {
    arblibJNI._arb_poly_inv_series(arb_struct.getCPtr(Qinv), Qinv, arb_struct.getCPtr(Q), Q, Qlen, len, prec);
  }

  public static void arb_poly_inv_series(arb_poly_struct Qinv, arb_poly_struct Q, int n, int prec) {
    arblibJNI.arb_poly_inv_series(arb_poly_struct.getCPtr(Qinv), Qinv, arb_poly_struct.getCPtr(Q), Q, n, prec);
  }

  public static void _arb_poly_div_series(arb_struct Q, arb_struct A, int Alen, arb_struct B, int Blen, int n, int prec) {
    arblibJNI._arb_poly_div_series(arb_struct.getCPtr(Q), Q, arb_struct.getCPtr(A), A, Alen, arb_struct.getCPtr(B), B, Blen, n, prec);
  }

  public static void arb_poly_div_series(arb_poly_struct Q, arb_poly_struct A, arb_poly_struct B, int n, int prec) {
    arblibJNI.arb_poly_div_series(arb_poly_struct.getCPtr(Q), Q, arb_poly_struct.getCPtr(A), A, arb_poly_struct.getCPtr(B), B, n, prec);
  }

  public static void _arb_poly_div(arb_struct Q, arb_struct A, int lenA, arb_struct B, int lenB, int prec) {
    arblibJNI._arb_poly_div(arb_struct.getCPtr(Q), Q, arb_struct.getCPtr(A), A, lenA, arb_struct.getCPtr(B), B, lenB, prec);
  }

  public static void _arb_poly_divrem(arb_struct Q, arb_struct R, arb_struct A, int lenA, arb_struct B, int lenB, int prec) {
    arblibJNI._arb_poly_divrem(arb_struct.getCPtr(Q), Q, arb_struct.getCPtr(R), R, arb_struct.getCPtr(A), A, lenA, arb_struct.getCPtr(B), B, lenB, prec);
  }

  public static void _arb_poly_rem(arb_struct R, arb_struct A, int lenA, arb_struct B, int lenB, int prec) {
    arblibJNI._arb_poly_rem(arb_struct.getCPtr(R), R, arb_struct.getCPtr(A), A, lenA, arb_struct.getCPtr(B), B, lenB, prec);
  }

  public static int arb_poly_divrem(arb_poly_struct Q, arb_poly_struct R, arb_poly_struct A, arb_poly_struct B, int prec) {
    return arblibJNI.arb_poly_divrem(arb_poly_struct.getCPtr(Q), Q, arb_poly_struct.getCPtr(R), R, arb_poly_struct.getCPtr(A), A, arb_poly_struct.getCPtr(B), B, prec);
  }

  public static void _arb_poly_div_root(arb_struct Q, arb_struct R, arb_struct A, int len, arb_struct c, int prec) {
    arblibJNI._arb_poly_div_root(arb_struct.getCPtr(Q), Q, arb_struct.getCPtr(R), R, arb_struct.getCPtr(A), A, len, arb_struct.getCPtr(c), c, prec);
  }

  public static void _arb_poly_product_roots(arb_struct poly, arb_struct xs, int n, int prec) {
    arblibJNI._arb_poly_product_roots(arb_struct.getCPtr(poly), poly, arb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void arb_poly_product_roots(arb_poly_struct poly, arb_struct xs, int n, int prec) {
    arblibJNI.arb_poly_product_roots(arb_poly_struct.getCPtr(poly), poly, arb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void _arb_poly_product_roots_complex(arb_struct poly, arb_struct r, int rn, acb_struct c, int cn, int prec) {
    arblibJNI._arb_poly_product_roots_complex(arb_struct.getCPtr(poly), poly, arb_struct.getCPtr(r), r, rn, acb_struct.getCPtr(c), c, cn, prec);
  }

  public static void arb_poly_product_roots_complex(arb_poly_struct poly, arb_struct r, int rn, acb_struct c, int cn, int prec) {
    arblibJNI.arb_poly_product_roots_complex(arb_poly_struct.getCPtr(poly), poly, arb_struct.getCPtr(r), r, rn, acb_struct.getCPtr(c), c, cn, prec);
  }

  public static SWIGTYPE_p_p_arb_struct _arb_poly_tree_alloc(int len) {
    long cPtr = arblibJNI._arb_poly_tree_alloc(len);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_arb_struct(cPtr, false);
  }

  public static void _arb_poly_tree_free(SWIGTYPE_p_p_arb_struct tree, int len) {
    arblibJNI._arb_poly_tree_free(SWIGTYPE_p_p_arb_struct.getCPtr(tree), len);
  }

  public static void _arb_poly_tree_build(SWIGTYPE_p_p_arb_struct tree, arb_struct roots, int len, int prec) {
    arblibJNI._arb_poly_tree_build(SWIGTYPE_p_p_arb_struct.getCPtr(tree), arb_struct.getCPtr(roots), roots, len, prec);
  }

  public static void _arb_poly_taylor_shift_horner(arb_struct poly, arb_struct c, int n, int prec) {
    arblibJNI._arb_poly_taylor_shift_horner(arb_struct.getCPtr(poly), poly, arb_struct.getCPtr(c), c, n, prec);
  }

  public static void arb_poly_taylor_shift_horner(arb_poly_struct g, arb_poly_struct f, arb_struct c, int prec) {
    arblibJNI.arb_poly_taylor_shift_horner(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(c), c, prec);
  }

  public static void _arb_poly_taylor_shift_divconquer(arb_struct poly, arb_struct c, int n, int prec) {
    arblibJNI._arb_poly_taylor_shift_divconquer(arb_struct.getCPtr(poly), poly, arb_struct.getCPtr(c), c, n, prec);
  }

  public static void arb_poly_taylor_shift_divconquer(arb_poly_struct g, arb_poly_struct f, arb_struct c, int prec) {
    arblibJNI.arb_poly_taylor_shift_divconquer(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(c), c, prec);
  }

  public static void _arb_poly_taylor_shift_convolution(arb_struct poly, arb_struct c, int n, int prec) {
    arblibJNI._arb_poly_taylor_shift_convolution(arb_struct.getCPtr(poly), poly, arb_struct.getCPtr(c), c, n, prec);
  }

  public static void arb_poly_taylor_shift_convolution(arb_poly_struct g, arb_poly_struct f, arb_struct c, int prec) {
    arblibJNI.arb_poly_taylor_shift_convolution(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(c), c, prec);
  }

  public static void _arb_poly_taylor_shift(arb_struct poly, arb_struct c, int n, int prec) {
    arblibJNI._arb_poly_taylor_shift(arb_struct.getCPtr(poly), poly, arb_struct.getCPtr(c), c, n, prec);
  }

  public static void arb_poly_taylor_shift(arb_poly_struct g, arb_poly_struct f, arb_struct c, int prec) {
    arblibJNI.arb_poly_taylor_shift(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(c), c, prec);
  }

  public static void _arb_poly_compose(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int prec) {
    arblibJNI._arb_poly_compose(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void arb_poly_compose(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int prec) {
    arblibJNI.arb_poly_compose(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void _arb_poly_compose_horner(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int prec) {
    arblibJNI._arb_poly_compose_horner(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void arb_poly_compose_horner(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int prec) {
    arblibJNI.arb_poly_compose_horner(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void _arb_poly_compose_divconquer(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int prec) {
    arblibJNI._arb_poly_compose_divconquer(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void arb_poly_compose_divconquer(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int prec) {
    arblibJNI.arb_poly_compose_divconquer(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void _arb_poly_compose_series_horner(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int n, int prec) {
    arblibJNI._arb_poly_compose_series_horner(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void arb_poly_compose_series_horner(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int n, int prec) {
    arblibJNI.arb_poly_compose_series_horner(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _arb_poly_compose_series(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int n, int prec) {
    arblibJNI._arb_poly_compose_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void arb_poly_compose_series(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int n, int prec) {
    arblibJNI.arb_poly_compose_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _arb_poly_revert_series_lagrange(arb_struct Qinv, arb_struct Q, int Qlen, int n, int prec) {
    arblibJNI._arb_poly_revert_series_lagrange(arb_struct.getCPtr(Qinv), Qinv, arb_struct.getCPtr(Q), Q, Qlen, n, prec);
  }

  public static void arb_poly_revert_series_lagrange(arb_poly_struct Qinv, arb_poly_struct Q, int n, int prec) {
    arblibJNI.arb_poly_revert_series_lagrange(arb_poly_struct.getCPtr(Qinv), Qinv, arb_poly_struct.getCPtr(Q), Q, n, prec);
  }

  public static void _arb_poly_revert_series_newton(arb_struct Qinv, arb_struct Q, int Qlen, int n, int prec) {
    arblibJNI._arb_poly_revert_series_newton(arb_struct.getCPtr(Qinv), Qinv, arb_struct.getCPtr(Q), Q, Qlen, n, prec);
  }

  public static void arb_poly_revert_series_newton(arb_poly_struct Qinv, arb_poly_struct Q, int n, int prec) {
    arblibJNI.arb_poly_revert_series_newton(arb_poly_struct.getCPtr(Qinv), Qinv, arb_poly_struct.getCPtr(Q), Q, n, prec);
  }

  public static void _arb_poly_revert_series_lagrange_fast(arb_struct Qinv, arb_struct Q, int Qlen, int n, int prec) {
    arblibJNI._arb_poly_revert_series_lagrange_fast(arb_struct.getCPtr(Qinv), Qinv, arb_struct.getCPtr(Q), Q, Qlen, n, prec);
  }

  public static void arb_poly_revert_series_lagrange_fast(arb_poly_struct Qinv, arb_poly_struct Q, int n, int prec) {
    arblibJNI.arb_poly_revert_series_lagrange_fast(arb_poly_struct.getCPtr(Qinv), Qinv, arb_poly_struct.getCPtr(Q), Q, n, prec);
  }

  public static void _arb_poly_revert_series(arb_struct Qinv, arb_struct Q, int Qlen, int n, int prec) {
    arblibJNI._arb_poly_revert_series(arb_struct.getCPtr(Qinv), Qinv, arb_struct.getCPtr(Q), Q, Qlen, n, prec);
  }

  public static void arb_poly_revert_series(arb_poly_struct Qinv, arb_poly_struct Q, int n, int prec) {
    arblibJNI.arb_poly_revert_series(arb_poly_struct.getCPtr(Qinv), Qinv, arb_poly_struct.getCPtr(Q), Q, n, prec);
  }

  public static void _arb_poly_evaluate_horner(arb_struct res, arb_struct f, int len, arb_struct a, int prec) {
    arblibJNI._arb_poly_evaluate_horner(arb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, len, arb_struct.getCPtr(a), a, prec);
  }

  public static void arb_poly_evaluate_horner(arb_struct res, arb_poly_struct f, arb_struct a, int prec) {
    arblibJNI.arb_poly_evaluate_horner(arb_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(a), a, prec);
  }

  public static void _arb_poly_evaluate_rectangular(arb_struct y, arb_struct poly, int len, arb_struct x, int prec) {
    arblibJNI._arb_poly_evaluate_rectangular(arb_struct.getCPtr(y), y, arb_struct.getCPtr(poly), poly, len, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate_rectangular(arb_struct res, arb_poly_struct f, arb_struct a, int prec) {
    arblibJNI.arb_poly_evaluate_rectangular(arb_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(a), a, prec);
  }

  public static void _arb_poly_evaluate(arb_struct res, arb_struct f, int len, arb_struct a, int prec) {
    arblibJNI._arb_poly_evaluate(arb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, len, arb_struct.getCPtr(a), a, prec);
  }

  public static void arb_poly_evaluate(arb_struct res, arb_poly_struct f, arb_struct a, int prec) {
    arblibJNI.arb_poly_evaluate(arb_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(a), a, prec);
  }

  public static void _arb_poly_evaluate2_horner(arb_struct y, arb_struct z, arb_struct f, int len, arb_struct x, int prec) {
    arblibJNI._arb_poly_evaluate2_horner(arb_struct.getCPtr(y), y, arb_struct.getCPtr(z), z, arb_struct.getCPtr(f), f, len, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate2_horner(arb_struct y, arb_struct z, arb_poly_struct f, arb_struct x, int prec) {
    arblibJNI.arb_poly_evaluate2_horner(arb_struct.getCPtr(y), y, arb_struct.getCPtr(z), z, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(x), x, prec);
  }

  public static void _arb_poly_evaluate2_rectangular(arb_struct y, arb_struct z, arb_struct f, int len, arb_struct x, int prec) {
    arblibJNI._arb_poly_evaluate2_rectangular(arb_struct.getCPtr(y), y, arb_struct.getCPtr(z), z, arb_struct.getCPtr(f), f, len, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate2_rectangular(arb_struct y, arb_struct z, arb_poly_struct f, arb_struct x, int prec) {
    arblibJNI.arb_poly_evaluate2_rectangular(arb_struct.getCPtr(y), y, arb_struct.getCPtr(z), z, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(x), x, prec);
  }

  public static void _arb_poly_evaluate2(arb_struct y, arb_struct z, arb_struct f, int len, arb_struct x, int prec) {
    arblibJNI._arb_poly_evaluate2(arb_struct.getCPtr(y), y, arb_struct.getCPtr(z), z, arb_struct.getCPtr(f), f, len, arb_struct.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate2(arb_struct y, arb_struct z, arb_poly_struct f, arb_struct x, int prec) {
    arblibJNI.arb_poly_evaluate2(arb_struct.getCPtr(y), y, arb_struct.getCPtr(z), z, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(x), x, prec);
  }

  public static void _arb_poly_evaluate_vec_iter(arb_struct ys, arb_struct poly, int plen, arb_struct xs, int n, int prec) {
    arblibJNI._arb_poly_evaluate_vec_iter(arb_struct.getCPtr(ys), ys, arb_struct.getCPtr(poly), poly, plen, arb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void arb_poly_evaluate_vec_iter(arb_struct ys, arb_poly_struct poly, arb_struct xs, int n, int prec) {
    arblibJNI.arb_poly_evaluate_vec_iter(arb_struct.getCPtr(ys), ys, arb_poly_struct.getCPtr(poly), poly, arb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void _arb_poly_evaluate_vec_fast_precomp(arb_struct vs, arb_struct poly, int plen, SWIGTYPE_p_p_arb_struct tree, int len, int prec) {
    arblibJNI._arb_poly_evaluate_vec_fast_precomp(arb_struct.getCPtr(vs), vs, arb_struct.getCPtr(poly), poly, plen, SWIGTYPE_p_p_arb_struct.getCPtr(tree), len, prec);
  }

  public static void _arb_poly_evaluate_vec_fast(arb_struct ys, arb_struct poly, int plen, arb_struct xs, int n, int prec) {
    arblibJNI._arb_poly_evaluate_vec_fast(arb_struct.getCPtr(ys), ys, arb_struct.getCPtr(poly), poly, plen, arb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void arb_poly_evaluate_vec_fast(arb_struct ys, arb_poly_struct poly, arb_struct xs, int n, int prec) {
    arblibJNI.arb_poly_evaluate_vec_fast(arb_struct.getCPtr(ys), ys, arb_poly_struct.getCPtr(poly), poly, arb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void _arb_poly_interpolate_newton(arb_struct poly, arb_struct xs, arb_struct ys, int n, int prec) {
    arblibJNI._arb_poly_interpolate_newton(arb_struct.getCPtr(poly), poly, arb_struct.getCPtr(xs), xs, arb_struct.getCPtr(ys), ys, n, prec);
  }

  public static void arb_poly_interpolate_newton(arb_poly_struct poly, arb_struct xs, arb_struct ys, int n, int prec) {
    arblibJNI.arb_poly_interpolate_newton(arb_poly_struct.getCPtr(poly), poly, arb_struct.getCPtr(xs), xs, arb_struct.getCPtr(ys), ys, n, prec);
  }

  public static void _arb_poly_interpolate_barycentric(arb_struct poly, arb_struct xs, arb_struct ys, int n, int prec) {
    arblibJNI._arb_poly_interpolate_barycentric(arb_struct.getCPtr(poly), poly, arb_struct.getCPtr(xs), xs, arb_struct.getCPtr(ys), ys, n, prec);
  }

  public static void arb_poly_interpolate_barycentric(arb_poly_struct poly, arb_struct xs, arb_struct ys, int n, int prec) {
    arblibJNI.arb_poly_interpolate_barycentric(arb_poly_struct.getCPtr(poly), poly, arb_struct.getCPtr(xs), xs, arb_struct.getCPtr(ys), ys, n, prec);
  }

  public static void _arb_poly_interpolation_weights(arb_struct w, SWIGTYPE_p_p_arb_struct tree, int len, int prec) {
    arblibJNI._arb_poly_interpolation_weights(arb_struct.getCPtr(w), w, SWIGTYPE_p_p_arb_struct.getCPtr(tree), len, prec);
  }

  public static void _arb_poly_interpolate_fast_precomp(arb_struct poly, arb_struct ys, SWIGTYPE_p_p_arb_struct tree, arb_struct weights, int len, int prec) {
    arblibJNI._arb_poly_interpolate_fast_precomp(arb_struct.getCPtr(poly), poly, arb_struct.getCPtr(ys), ys, SWIGTYPE_p_p_arb_struct.getCPtr(tree), arb_struct.getCPtr(weights), weights, len, prec);
  }

  public static void _arb_poly_interpolate_fast(arb_struct poly, arb_struct xs, arb_struct ys, int len, int prec) {
    arblibJNI._arb_poly_interpolate_fast(arb_struct.getCPtr(poly), poly, arb_struct.getCPtr(xs), xs, arb_struct.getCPtr(ys), ys, len, prec);
  }

  public static void arb_poly_interpolate_fast(arb_poly_struct poly, arb_struct xs, arb_struct ys, int n, int prec) {
    arblibJNI.arb_poly_interpolate_fast(arb_poly_struct.getCPtr(poly), poly, arb_struct.getCPtr(xs), xs, arb_struct.getCPtr(ys), ys, n, prec);
  }

  public static void _arb_poly_derivative(arb_struct res, arb_struct poly, int len, int prec) {
    arblibJNI._arb_poly_derivative(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly), poly, len, prec);
  }

  public static void arb_poly_derivative(arb_poly_struct res, arb_poly_struct poly, int prec) {
    arblibJNI.arb_poly_derivative(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void _arb_poly_integral(arb_struct res, arb_struct poly, int len, int prec) {
    arblibJNI._arb_poly_integral(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly), poly, len, prec);
  }

  public static void arb_poly_integral(arb_poly_struct res, arb_poly_struct poly, int prec) {
    arblibJNI.arb_poly_integral(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void arb_poly_borel_transform(arb_poly_struct res, arb_poly_struct poly, int prec) {
    arblibJNI.arb_poly_borel_transform(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void _arb_poly_borel_transform(arb_struct res, arb_struct poly, int len, int prec) {
    arblibJNI._arb_poly_borel_transform(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly), poly, len, prec);
  }

  public static void arb_poly_inv_borel_transform(arb_poly_struct res, arb_poly_struct poly, int prec) {
    arblibJNI.arb_poly_inv_borel_transform(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void _arb_poly_inv_borel_transform(arb_struct res, arb_struct poly, int len, int prec) {
    arblibJNI._arb_poly_inv_borel_transform(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly), poly, len, prec);
  }

  public static void _arb_poly_binomial_transform_basecase(arb_struct b, arb_struct a, int alen, int len, int prec) {
    arblibJNI._arb_poly_binomial_transform_basecase(arb_struct.getCPtr(b), b, arb_struct.getCPtr(a), a, alen, len, prec);
  }

  public static void arb_poly_binomial_transform_basecase(arb_poly_struct b, arb_poly_struct a, int len, int prec) {
    arblibJNI.arb_poly_binomial_transform_basecase(arb_poly_struct.getCPtr(b), b, arb_poly_struct.getCPtr(a), a, len, prec);
  }

  public static void _arb_poly_binomial_transform_convolution(arb_struct b, arb_struct a, int alen, int len, int prec) {
    arblibJNI._arb_poly_binomial_transform_convolution(arb_struct.getCPtr(b), b, arb_struct.getCPtr(a), a, alen, len, prec);
  }

  public static void arb_poly_binomial_transform_convolution(arb_poly_struct b, arb_poly_struct a, int len, int prec) {
    arblibJNI.arb_poly_binomial_transform_convolution(arb_poly_struct.getCPtr(b), b, arb_poly_struct.getCPtr(a), a, len, prec);
  }

  public static void _arb_poly_binomial_transform(arb_struct b, arb_struct a, int alen, int len, int prec) {
    arblibJNI._arb_poly_binomial_transform(arb_struct.getCPtr(b), b, arb_struct.getCPtr(a), a, alen, len, prec);
  }

  public static void arb_poly_binomial_transform(arb_poly_struct b, arb_poly_struct a, int len, int prec) {
    arblibJNI.arb_poly_binomial_transform(arb_poly_struct.getCPtr(b), b, arb_poly_struct.getCPtr(a), a, len, prec);
  }

  public static void _arb_poly_pow_ui_trunc_binexp(arb_struct res, arb_struct f, int flen, long exp, int len, int prec) {
    arblibJNI._arb_poly_pow_ui_trunc_binexp(arb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, flen, exp, len, prec);
  }

  public static void arb_poly_pow_ui_trunc_binexp(arb_poly_struct res, arb_poly_struct poly, long exp, int len, int prec) {
    arblibJNI.arb_poly_pow_ui_trunc_binexp(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, exp, len, prec);
  }

  public static void _arb_poly_pow_ui(arb_struct res, arb_struct f, int flen, long exp, int prec) {
    arblibJNI._arb_poly_pow_ui(arb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, flen, exp, prec);
  }

  public static void arb_poly_pow_ui(arb_poly_struct res, arb_poly_struct poly, long exp, int prec) {
    arblibJNI.arb_poly_pow_ui(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly), poly, exp, prec);
  }

  public static void _arb_poly_pow_series(arb_struct h, arb_struct f, int flen, arb_struct g, int glen, int len, int prec) {
    arblibJNI._arb_poly_pow_series(arb_struct.getCPtr(h), h, arb_struct.getCPtr(f), f, flen, arb_struct.getCPtr(g), g, glen, len, prec);
  }

  public static void arb_poly_pow_series(arb_poly_struct h, arb_poly_struct f, arb_poly_struct g, int len, int prec) {
    arblibJNI.arb_poly_pow_series(arb_poly_struct.getCPtr(h), h, arb_poly_struct.getCPtr(f), f, arb_poly_struct.getCPtr(g), g, len, prec);
  }

  public static void _arb_poly_pow_arb_series(arb_struct h, arb_struct f, int flen, arb_struct g, int len, int prec) {
    arblibJNI._arb_poly_pow_arb_series(arb_struct.getCPtr(h), h, arb_struct.getCPtr(f), f, flen, arb_struct.getCPtr(g), g, len, prec);
  }

  public static void arb_poly_pow_arb_series(arb_poly_struct h, arb_poly_struct f, arb_struct g, int len, int prec) {
    arblibJNI.arb_poly_pow_arb_series(arb_poly_struct.getCPtr(h), h, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(g), g, len, prec);
  }

  public static void _arb_poly_binomial_pow_arb_series(arb_struct h, arb_struct f, int flen, arb_struct g, int len, int prec) {
    arblibJNI._arb_poly_binomial_pow_arb_series(arb_struct.getCPtr(h), h, arb_struct.getCPtr(f), f, flen, arb_struct.getCPtr(g), g, len, prec);
  }

  public static void _arb_poly_rsqrt_series(arb_struct g, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_rsqrt_series(arb_struct.getCPtr(g), g, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_rsqrt_series(arb_poly_struct g, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_rsqrt_series(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sqrt_series(arb_struct g, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_sqrt_series(arb_struct.getCPtr(g), g, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_sqrt_series(arb_poly_struct g, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sqrt_series(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_log_series(arb_struct res, arb_struct f, int flen, int n, int prec) {
    arblibJNI._arb_poly_log_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, flen, n, prec);
  }

  public static void arb_poly_log_series(arb_poly_struct res, arb_poly_struct f, int n, int prec) {
    arblibJNI.arb_poly_log_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _arb_poly_log1p_series(arb_struct res, arb_struct f, int flen, int n, int prec) {
    arblibJNI._arb_poly_log1p_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, flen, n, prec);
  }

  public static void arb_poly_log1p_series(arb_poly_struct res, arb_poly_struct f, int n, int prec) {
    arblibJNI.arb_poly_log1p_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _arb_poly_atan_series(arb_struct res, arb_struct f, int flen, int n, int prec) {
    arblibJNI._arb_poly_atan_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, flen, n, prec);
  }

  public static void arb_poly_atan_series(arb_poly_struct res, arb_poly_struct f, int n, int prec) {
    arblibJNI.arb_poly_atan_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _arb_poly_asin_series(arb_struct res, arb_struct f, int flen, int n, int prec) {
    arblibJNI._arb_poly_asin_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, flen, n, prec);
  }

  public static void arb_poly_asin_series(arb_poly_struct res, arb_poly_struct f, int n, int prec) {
    arblibJNI.arb_poly_asin_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _arb_poly_acos_series(arb_struct res, arb_struct f, int flen, int n, int prec) {
    arblibJNI._arb_poly_acos_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, flen, n, prec);
  }

  public static void arb_poly_acos_series(arb_poly_struct res, arb_poly_struct f, int n, int prec) {
    arblibJNI.arb_poly_acos_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _arb_poly_exp_series_basecase(arb_struct f, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_exp_series_basecase(arb_struct.getCPtr(f), f, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_exp_series_basecase(arb_poly_struct f, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_exp_series_basecase(arb_poly_struct.getCPtr(f), f, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_exp_series(arb_struct f, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_exp_series(arb_struct.getCPtr(f), f, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_exp_series(arb_poly_struct f, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_exp_series(arb_poly_struct.getCPtr(f), f, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sinh_cosh_series_basecase(arb_struct s, arb_struct c, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_sinh_cosh_series_basecase(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_sinh_cosh_series_basecase(arb_poly_struct s, arb_poly_struct c, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sinh_cosh_series_basecase(arb_poly_struct.getCPtr(s), s, arb_poly_struct.getCPtr(c), c, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sinh_cosh_series_exponential(arb_struct s, arb_struct c, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_sinh_cosh_series_exponential(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_sinh_cosh_series_exponential(arb_poly_struct s, arb_poly_struct c, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sinh_cosh_series_exponential(arb_poly_struct.getCPtr(s), s, arb_poly_struct.getCPtr(c), c, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sinh_cosh_series(arb_struct s, arb_struct c, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_sinh_cosh_series(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_sinh_cosh_series(arb_poly_struct s, arb_poly_struct c, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sinh_cosh_series(arb_poly_struct.getCPtr(s), s, arb_poly_struct.getCPtr(c), c, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sinh_series(arb_struct s, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_sinh_series(arb_struct.getCPtr(s), s, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_sinh_series(arb_poly_struct s, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sinh_series(arb_poly_struct.getCPtr(s), s, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_cosh_series(arb_struct c, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_cosh_series(arb_struct.getCPtr(c), c, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_cosh_series(arb_poly_struct c, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_cosh_series(arb_poly_struct.getCPtr(c), c, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sin_cos_series_basecase(arb_struct s, arb_struct c, arb_struct h, int hlen, int n, int prec, int times_pi) {
    arblibJNI._arb_poly_sin_cos_series_basecase(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(h), h, hlen, n, prec, times_pi);
  }

  public static void arb_poly_sin_cos_series_basecase(arb_poly_struct s, arb_poly_struct c, arb_poly_struct h, int n, int prec, int times_pi) {
    arblibJNI.arb_poly_sin_cos_series_basecase(arb_poly_struct.getCPtr(s), s, arb_poly_struct.getCPtr(c), c, arb_poly_struct.getCPtr(h), h, n, prec, times_pi);
  }

  public static void _arb_poly_sin_cos_series_tangent(arb_struct s, arb_struct c, arb_struct h, int hlen, int len, int prec, int times_pi) {
    arblibJNI._arb_poly_sin_cos_series_tangent(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(h), h, hlen, len, prec, times_pi);
  }

  public static void arb_poly_sin_cos_series_tangent(arb_poly_struct s, arb_poly_struct c, arb_poly_struct h, int n, int prec, int times_pi) {
    arblibJNI.arb_poly_sin_cos_series_tangent(arb_poly_struct.getCPtr(s), s, arb_poly_struct.getCPtr(c), c, arb_poly_struct.getCPtr(h), h, n, prec, times_pi);
  }

  public static void _arb_poly_sin_cos_series(arb_struct s, arb_struct c, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_sin_cos_series(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_sin_cos_series(arb_poly_struct s, arb_poly_struct c, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sin_cos_series(arb_poly_struct.getCPtr(s), s, arb_poly_struct.getCPtr(c), c, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sin_cos_pi_series(arb_struct s, arb_struct c, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_sin_cos_pi_series(arb_struct.getCPtr(s), s, arb_struct.getCPtr(c), c, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_sin_cos_pi_series(arb_poly_struct s, arb_poly_struct c, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sin_cos_pi_series(arb_poly_struct.getCPtr(s), s, arb_poly_struct.getCPtr(c), c, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sin_series(arb_struct g, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_sin_series(arb_struct.getCPtr(g), g, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_sin_series(arb_poly_struct g, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sin_series(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_cos_series(arb_struct g, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_cos_series(arb_struct.getCPtr(g), g, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_cos_series(arb_poly_struct g, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_cos_series(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sin_pi_series(arb_struct g, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_sin_pi_series(arb_struct.getCPtr(g), g, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_sin_pi_series(arb_poly_struct g, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sin_pi_series(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_cos_pi_series(arb_struct g, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_cos_pi_series(arb_struct.getCPtr(g), g, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_cos_pi_series(arb_poly_struct g, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_cos_pi_series(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_cot_pi_series(arb_struct g, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_cot_pi_series(arb_struct.getCPtr(g), g, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_cot_pi_series(arb_poly_struct g, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_cot_pi_series(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_tan_series(arb_struct g, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_tan_series(arb_struct.getCPtr(g), g, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_tan_series(arb_poly_struct g, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_tan_series(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sinc_series(arb_struct g, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_sinc_series(arb_struct.getCPtr(g), g, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_sinc_series(arb_poly_struct g, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sinc_series(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_sinc_pi_series(arb_struct g, arb_struct h, int hlen, int n, int prec) {
    arblibJNI._arb_poly_sinc_pi_series(arb_struct.getCPtr(g), g, arb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void arb_poly_sinc_pi_series(arb_poly_struct g, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_sinc_pi_series(arb_poly_struct.getCPtr(g), g, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_compose_series_brent_kung(arb_struct res, arb_struct poly1, int len1, arb_struct poly2, int len2, int n, int prec) {
    arblibJNI._arb_poly_compose_series_brent_kung(arb_struct.getCPtr(res), res, arb_struct.getCPtr(poly1), poly1, len1, arb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void arb_poly_compose_series_brent_kung(arb_poly_struct res, arb_poly_struct poly1, arb_poly_struct poly2, int n, int prec) {
    arblibJNI.arb_poly_compose_series_brent_kung(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(poly1), poly1, arb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _arb_poly_evaluate_acb_horner(acb_struct res, arb_struct f, int len, acb_struct x, int prec) {
    arblibJNI._arb_poly_evaluate_acb_horner(acb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, len, acb_struct.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate_acb_horner(acb_struct res, arb_poly_struct f, acb_struct a, int prec) {
    arblibJNI.arb_poly_evaluate_acb_horner(acb_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(a), a, prec);
  }

  public static void _arb_poly_evaluate_acb_rectangular(acb_struct y, arb_struct poly, int len, acb_struct x, int prec) {
    arblibJNI._arb_poly_evaluate_acb_rectangular(acb_struct.getCPtr(y), y, arb_struct.getCPtr(poly), poly, len, acb_struct.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate_acb_rectangular(acb_struct res, arb_poly_struct f, acb_struct a, int prec) {
    arblibJNI.arb_poly_evaluate_acb_rectangular(acb_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(a), a, prec);
  }

  public static void _arb_poly_evaluate_acb(acb_struct res, arb_struct f, int len, acb_struct x, int prec) {
    arblibJNI._arb_poly_evaluate_acb(acb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, len, acb_struct.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate_acb(acb_struct res, arb_poly_struct f, acb_struct a, int prec) {
    arblibJNI.arb_poly_evaluate_acb(acb_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(a), a, prec);
  }

  public static void _arb_poly_evaluate2_acb_horner(acb_struct y, acb_struct z, arb_struct f, int len, acb_struct x, int prec) {
    arblibJNI._arb_poly_evaluate2_acb_horner(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, arb_struct.getCPtr(f), f, len, acb_struct.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate2_acb_horner(acb_struct y, acb_struct z, arb_poly_struct f, acb_struct x, int prec) {
    arblibJNI.arb_poly_evaluate2_acb_horner(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, arb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(x), x, prec);
  }

  public static void _arb_poly_evaluate2_acb_rectangular(acb_struct y, acb_struct z, arb_struct f, int len, acb_struct x, int prec) {
    arblibJNI._arb_poly_evaluate2_acb_rectangular(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, arb_struct.getCPtr(f), f, len, acb_struct.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate2_acb_rectangular(acb_struct y, acb_struct z, arb_poly_struct f, acb_struct x, int prec) {
    arblibJNI.arb_poly_evaluate2_acb_rectangular(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, arb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(x), x, prec);
  }

  public static void _arb_poly_evaluate2_acb(acb_struct y, acb_struct z, arb_struct f, int len, acb_struct x, int prec) {
    arblibJNI._arb_poly_evaluate2_acb(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, arb_struct.getCPtr(f), f, len, acb_struct.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate2_acb(acb_struct y, acb_struct z, arb_poly_struct f, acb_struct x, int prec) {
    arblibJNI.arb_poly_evaluate2_acb(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, arb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(x), x, prec);
  }

  public static void _arb_poly_lambertw_series(arb_struct res, arb_struct z, int zlen, int flags, int len, int prec) {
    arblibJNI._arb_poly_lambertw_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(z), z, zlen, flags, len, prec);
  }

  public static void arb_poly_lambertw_series(arb_poly_struct res, arb_poly_struct z, int flags, int len, int prec) {
    arblibJNI.arb_poly_lambertw_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(z), z, flags, len, prec);
  }

  public static void _arb_poly_gamma_series(arb_struct res, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_gamma_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_gamma_series(arb_poly_struct res, arb_poly_struct f, int n, int prec) {
    arblibJNI.arb_poly_gamma_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _arb_poly_rgamma_series(arb_struct res, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_rgamma_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_rgamma_series(arb_poly_struct res, arb_poly_struct f, int n, int prec) {
    arblibJNI.arb_poly_rgamma_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _arb_poly_lgamma_series(arb_struct res, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_lgamma_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_lgamma_series(arb_poly_struct res, arb_poly_struct f, int n, int prec) {
    arblibJNI.arb_poly_lgamma_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _arb_poly_digamma_series(arb_struct res, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_digamma_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_digamma_series(arb_poly_struct res, arb_poly_struct f, int n, int prec) {
    arblibJNI.arb_poly_digamma_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _arb_poly_rising_ui_series(arb_struct res, arb_struct f, int flen, long r, int trunc, int prec) {
    arblibJNI._arb_poly_rising_ui_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(f), f, flen, r, trunc, prec);
  }

  public static void arb_poly_rising_ui_series(arb_poly_struct res, arb_poly_struct f, long r, int trunc, int prec) {
    arblibJNI.arb_poly_rising_ui_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, r, trunc, prec);
  }

  public static void _arb_poly_zeta_series(arb_struct res, arb_struct h, int hlen, arb_struct a, int deflate, int len, int prec) {
    arblibJNI._arb_poly_zeta_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(h), h, hlen, arb_struct.getCPtr(a), a, deflate, len, prec);
  }

  public static void arb_poly_zeta_series(arb_poly_struct res, arb_poly_struct f, arb_struct a, int deflate, int n, int prec) {
    arblibJNI.arb_poly_zeta_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(f), f, arb_struct.getCPtr(a), a, deflate, n, prec);
  }

  public static void _arb_poly_riemann_siegel_theta_series(arb_struct res, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_riemann_siegel_theta_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_riemann_siegel_theta_series(arb_poly_struct res, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_riemann_siegel_theta_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _arb_poly_riemann_siegel_z_series(arb_struct res, arb_struct h, int hlen, int len, int prec) {
    arblibJNI._arb_poly_riemann_siegel_z_series(arb_struct.getCPtr(res), res, arb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void arb_poly_riemann_siegel_z_series(arb_poly_struct res, arb_poly_struct h, int n, int prec) {
    arblibJNI.arb_poly_riemann_siegel_z_series(arb_poly_struct.getCPtr(res), res, arb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static int _arb_poly_swinnerton_dyer_ui_prec(long n) {
    return arblibJNI._arb_poly_swinnerton_dyer_ui_prec(n);
  }

  public static void _arb_poly_swinnerton_dyer_ui(arb_struct T, long n, int trunc, int prec) {
    arblibJNI._arb_poly_swinnerton_dyer_ui(arb_struct.getCPtr(T), T, n, trunc, prec);
  }

  public static void arb_poly_swinnerton_dyer_ui(arb_poly_struct poly, long n, int prec) {
    arblibJNI.arb_poly_swinnerton_dyer_ui(arb_poly_struct.getCPtr(poly), poly, n, prec);
  }

  public static void _arb_poly_newton_convergence_factor(arf_struct convergence_factor, arb_struct poly, int len, arb_struct convergence_interval, int prec) {
    arblibJNI._arb_poly_newton_convergence_factor(arf_struct.getCPtr(convergence_factor), convergence_factor, arb_struct.getCPtr(poly), poly, len, arb_struct.getCPtr(convergence_interval), convergence_interval, prec);
  }

  public static int _arb_poly_newton_step(arb_struct xnew, arb_struct poly, int len, arb_struct x, arb_struct convergence_interval, arf_struct convergence_factor, int prec) {
    return arblibJNI._arb_poly_newton_step(arb_struct.getCPtr(xnew), xnew, arb_struct.getCPtr(poly), poly, len, arb_struct.getCPtr(x), x, arb_struct.getCPtr(convergence_interval), convergence_interval, arf_struct.getCPtr(convergence_factor), convergence_factor, prec);
  }

  public static void _arb_poly_newton_refine_root(arb_struct r, arb_struct poly, int len, arb_struct start, arb_struct convergence_interval, arf_struct convergence_factor, int eval_extra_prec, int prec) {
    arblibJNI._arb_poly_newton_refine_root(arb_struct.getCPtr(r), r, arb_struct.getCPtr(poly), poly, len, arb_struct.getCPtr(start), start, arb_struct.getCPtr(convergence_interval), convergence_interval, arf_struct.getCPtr(convergence_factor), convergence_factor, eval_extra_prec, prec);
  }

  public static void _arb_poly_root_bound_fujiwara(mag_struct bound, arb_struct poly, int len) {
    arblibJNI._arb_poly_root_bound_fujiwara(mag_struct.getCPtr(bound), bound, arb_struct.getCPtr(poly), poly, len);
  }

  public static void arb_poly_root_bound_fujiwara(mag_struct bound, arb_poly_struct poly) {
    arblibJNI.arb_poly_root_bound_fujiwara(mag_struct.getCPtr(bound), bound, arb_poly_struct.getCPtr(poly), poly);
  }

  public static int arb_poly_allocated_bytes(arb_poly_struct x) {
    return arblibJNI.arb_poly_allocated_bytes(arb_poly_struct.getCPtr(x), x);
  }

  public static int n_zerobits(long e) {
    return arblibJNI.n_zerobits(e);
  }

  public static int poly_pow_length(int poly_len, long exp, int trunc) {
    return arblibJNI.poly_pow_length(poly_len, exp, trunc);
  }

  public static void acb_poly_init(acb_poly_struct poly) {
    arblibJNI.acb_poly_init(acb_poly_struct.getCPtr(poly), poly);
  }

  public static void acb_poly_init2(acb_poly_struct poly, int len) {
    arblibJNI.acb_poly_init2(acb_poly_struct.getCPtr(poly), poly, len);
  }

  public static void acb_poly_clear(acb_poly_struct poly) {
    arblibJNI.acb_poly_clear(acb_poly_struct.getCPtr(poly), poly);
  }

  public static void acb_poly_fit_length(acb_poly_struct poly, int len) {
    arblibJNI.acb_poly_fit_length(acb_poly_struct.getCPtr(poly), poly, len);
  }

  public static void _acb_poly_set_length(acb_poly_struct poly, int len) {
    arblibJNI._acb_poly_set_length(acb_poly_struct.getCPtr(poly), poly, len);
  }

  public static void _acb_poly_normalise(acb_poly_struct poly) {
    arblibJNI._acb_poly_normalise(acb_poly_struct.getCPtr(poly), poly);
  }

  public static void acb_poly_swap(acb_poly_struct poly1, acb_poly_struct poly2) {
    arblibJNI.acb_poly_swap(acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2);
  }

  public static int acb_poly_length(acb_poly_struct poly) {
    return arblibJNI.acb_poly_length(acb_poly_struct.getCPtr(poly), poly);
  }

  public static int acb_poly_degree(acb_poly_struct poly) {
    return arblibJNI.acb_poly_degree(acb_poly_struct.getCPtr(poly), poly);
  }

  public static int acb_poly_valuation(acb_poly_struct poly) {
    return arblibJNI.acb_poly_valuation(acb_poly_struct.getCPtr(poly), poly);
  }

  public static int acb_poly_is_zero(acb_poly_struct z) {
    return arblibJNI.acb_poly_is_zero(acb_poly_struct.getCPtr(z), z);
  }

  public static int acb_poly_is_one(acb_poly_struct z) {
    return arblibJNI.acb_poly_is_one(acb_poly_struct.getCPtr(z), z);
  }

  public static int acb_poly_is_x(acb_poly_struct z) {
    return arblibJNI.acb_poly_is_x(acb_poly_struct.getCPtr(z), z);
  }

  public static void acb_poly_zero(acb_poly_struct poly) {
    arblibJNI.acb_poly_zero(acb_poly_struct.getCPtr(poly), poly);
  }

  public static void acb_poly_one(acb_poly_struct poly) {
    arblibJNI.acb_poly_one(acb_poly_struct.getCPtr(poly), poly);
  }

  public static void acb_poly_set_coeff_si(acb_poly_struct poly, int n, int x) {
    arblibJNI.acb_poly_set_coeff_si(acb_poly_struct.getCPtr(poly), poly, n, x);
  }

  public static void acb_poly_set_coeff_acb(acb_poly_struct poly, int n, acb_struct x) {
    arblibJNI.acb_poly_set_coeff_acb(acb_poly_struct.getCPtr(poly), poly, n, acb_struct.getCPtr(x), x);
  }

  public static void acb_poly_get_coeff_acb(acb_struct x, acb_poly_struct poly, int n) {
    arblibJNI.acb_poly_get_coeff_acb(acb_struct.getCPtr(x), x, acb_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _acb_poly_shift_right(acb_struct res, acb_struct poly, int len, int n) {
    arblibJNI._acb_poly_shift_right(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly), poly, len, n);
  }

  public static void acb_poly_shift_right(acb_poly_struct res, acb_poly_struct poly, int n) {
    arblibJNI.acb_poly_shift_right(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, n);
  }

  public static void _acb_poly_shift_left(acb_struct res, acb_struct poly, int len, int n) {
    arblibJNI._acb_poly_shift_left(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly), poly, len, n);
  }

  public static void acb_poly_shift_left(acb_poly_struct res, acb_poly_struct poly, int n) {
    arblibJNI.acb_poly_shift_left(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, n);
  }

  public static void acb_poly_truncate(acb_poly_struct poly, int newlen) {
    arblibJNI.acb_poly_truncate(acb_poly_struct.getCPtr(poly), poly, newlen);
  }

  public static void _acb_poly_majorant(arb_struct res, acb_struct vec, int len, int prec) {
    arblibJNI._acb_poly_majorant(arb_struct.getCPtr(res), res, acb_struct.getCPtr(vec), vec, len, prec);
  }

  public static void acb_poly_majorant(arb_poly_struct res, acb_poly_struct poly, int prec) {
    arblibJNI.acb_poly_majorant(arb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void acb_poly_fprintd(_IO_FILE file, acb_poly_struct poly, int digits) {
    arblibJNI.acb_poly_fprintd(_IO_FILE.getCPtr(file), file, acb_poly_struct.getCPtr(poly), poly, digits);
  }

  public static void acb_poly_printd(acb_poly_struct poly, int digits) {
    arblibJNI.acb_poly_printd(acb_poly_struct.getCPtr(poly), poly, digits);
  }

  public static void _acb_poly_evaluate_horner(acb_struct res, acb_struct f, int len, acb_struct a, int prec) {
    arblibJNI._acb_poly_evaluate_horner(acb_struct.getCPtr(res), res, acb_struct.getCPtr(f), f, len, acb_struct.getCPtr(a), a, prec);
  }

  public static void acb_poly_evaluate_horner(acb_struct res, acb_poly_struct f, acb_struct a, int prec) {
    arblibJNI.acb_poly_evaluate_horner(acb_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(a), a, prec);
  }

  public static void _acb_poly_evaluate_rectangular(acb_struct y, acb_struct poly, int len, acb_struct x, int prec) {
    arblibJNI._acb_poly_evaluate_rectangular(acb_struct.getCPtr(y), y, acb_struct.getCPtr(poly), poly, len, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_poly_evaluate_rectangular(acb_struct res, acb_poly_struct f, acb_struct a, int prec) {
    arblibJNI.acb_poly_evaluate_rectangular(acb_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(a), a, prec);
  }

  public static void _acb_poly_evaluate(acb_struct res, acb_struct f, int len, acb_struct a, int prec) {
    arblibJNI._acb_poly_evaluate(acb_struct.getCPtr(res), res, acb_struct.getCPtr(f), f, len, acb_struct.getCPtr(a), a, prec);
  }

  public static void acb_poly_evaluate(acb_struct res, acb_poly_struct f, acb_struct a, int prec) {
    arblibJNI.acb_poly_evaluate(acb_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(a), a, prec);
  }

  public static void _acb_poly_evaluate2_horner(acb_struct y, acb_struct z, acb_struct f, int len, acb_struct x, int prec) {
    arblibJNI._acb_poly_evaluate2_horner(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, acb_struct.getCPtr(f), f, len, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_poly_evaluate2_horner(acb_struct y, acb_struct z, acb_poly_struct f, acb_struct x, int prec) {
    arblibJNI.acb_poly_evaluate2_horner(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(x), x, prec);
  }

  public static void _acb_poly_evaluate2_rectangular(acb_struct y, acb_struct z, acb_struct f, int len, acb_struct x, int prec) {
    arblibJNI._acb_poly_evaluate2_rectangular(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, acb_struct.getCPtr(f), f, len, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_poly_evaluate2_rectangular(acb_struct y, acb_struct z, acb_poly_struct f, acb_struct x, int prec) {
    arblibJNI.acb_poly_evaluate2_rectangular(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(x), x, prec);
  }

  public static void _acb_poly_evaluate2(acb_struct y, acb_struct z, acb_struct f, int len, acb_struct x, int prec) {
    arblibJNI._acb_poly_evaluate2(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, acb_struct.getCPtr(f), f, len, acb_struct.getCPtr(x), x, prec);
  }

  public static void acb_poly_evaluate2(acb_struct y, acb_struct z, acb_poly_struct f, acb_struct x, int prec) {
    arblibJNI.acb_poly_evaluate2(acb_struct.getCPtr(y), y, acb_struct.getCPtr(z), z, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(x), x, prec);
  }

  public static void _acb_poly_derivative(acb_struct res, acb_struct poly, int len, int prec) {
    arblibJNI._acb_poly_derivative(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly), poly, len, prec);
  }

  public static void acb_poly_derivative(acb_poly_struct res, acb_poly_struct poly, int prec) {
    arblibJNI.acb_poly_derivative(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void _acb_poly_integral(acb_struct res, acb_struct poly, int len, int prec) {
    arblibJNI._acb_poly_integral(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly), poly, len, prec);
  }

  public static void acb_poly_integral(acb_poly_struct res, acb_poly_struct poly, int prec) {
    arblibJNI.acb_poly_integral(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void acb_poly_borel_transform(acb_poly_struct res, acb_poly_struct poly, int prec) {
    arblibJNI.acb_poly_borel_transform(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void _acb_poly_borel_transform(acb_struct res, acb_struct poly, int len, int prec) {
    arblibJNI._acb_poly_borel_transform(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly), poly, len, prec);
  }

  public static void acb_poly_inv_borel_transform(acb_poly_struct res, acb_poly_struct poly, int prec) {
    arblibJNI.acb_poly_inv_borel_transform(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void _acb_poly_inv_borel_transform(acb_struct res, acb_struct poly, int len, int prec) {
    arblibJNI._acb_poly_inv_borel_transform(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly), poly, len, prec);
  }

  public static void _acb_poly_binomial_transform_basecase(acb_struct b, acb_struct a, int alen, int len, int prec) {
    arblibJNI._acb_poly_binomial_transform_basecase(acb_struct.getCPtr(b), b, acb_struct.getCPtr(a), a, alen, len, prec);
  }

  public static void acb_poly_binomial_transform_basecase(acb_poly_struct b, acb_poly_struct a, int len, int prec) {
    arblibJNI.acb_poly_binomial_transform_basecase(acb_poly_struct.getCPtr(b), b, acb_poly_struct.getCPtr(a), a, len, prec);
  }

  public static void _acb_poly_binomial_transform_convolution(acb_struct b, acb_struct a, int alen, int len, int prec) {
    arblibJNI._acb_poly_binomial_transform_convolution(acb_struct.getCPtr(b), b, acb_struct.getCPtr(a), a, alen, len, prec);
  }

  public static void acb_poly_binomial_transform_convolution(acb_poly_struct b, acb_poly_struct a, int len, int prec) {
    arblibJNI.acb_poly_binomial_transform_convolution(acb_poly_struct.getCPtr(b), b, acb_poly_struct.getCPtr(a), a, len, prec);
  }

  public static void _acb_poly_binomial_transform(acb_struct b, acb_struct a, int alen, int len, int prec) {
    arblibJNI._acb_poly_binomial_transform(acb_struct.getCPtr(b), b, acb_struct.getCPtr(a), a, alen, len, prec);
  }

  public static void acb_poly_binomial_transform(acb_poly_struct b, acb_poly_struct a, int len, int prec) {
    arblibJNI.acb_poly_binomial_transform(acb_poly_struct.getCPtr(b), b, acb_poly_struct.getCPtr(a), a, len, prec);
  }

  public static void acb_poly_set(acb_poly_struct dest, acb_poly_struct src) {
    arblibJNI.acb_poly_set(acb_poly_struct.getCPtr(dest), dest, acb_poly_struct.getCPtr(src), src);
  }

  public static void acb_poly_set_round(acb_poly_struct dest, acb_poly_struct src, int prec) {
    arblibJNI.acb_poly_set_round(acb_poly_struct.getCPtr(dest), dest, acb_poly_struct.getCPtr(src), src, prec);
  }

  public static void acb_poly_set_trunc(acb_poly_struct res, acb_poly_struct poly, int n) {
    arblibJNI.acb_poly_set_trunc(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, n);
  }

  public static void acb_poly_set_trunc_round(acb_poly_struct res, acb_poly_struct poly, int n, int prec) {
    arblibJNI.acb_poly_set_trunc_round(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, n, prec);
  }

  public static void acb_poly_set_arb_poly(acb_poly_struct poly, arb_poly_struct re) {
    arblibJNI.acb_poly_set_arb_poly(acb_poly_struct.getCPtr(poly), poly, arb_poly_struct.getCPtr(re), re);
  }

  public static void acb_poly_set2_arb_poly(acb_poly_struct poly, arb_poly_struct re, arb_poly_struct im) {
    arblibJNI.acb_poly_set2_arb_poly(acb_poly_struct.getCPtr(poly), poly, arb_poly_struct.getCPtr(re), re, arb_poly_struct.getCPtr(im), im);
  }

  public static void acb_poly_set_fmpq_poly(acb_poly_struct poly, fmpq_poly_struct re, int prec) {
    arblibJNI.acb_poly_set_fmpq_poly(acb_poly_struct.getCPtr(poly), poly, fmpq_poly_struct.getCPtr(re), re, prec);
  }

  public static void acb_poly_set2_fmpq_poly(acb_poly_struct poly, fmpq_poly_struct re, fmpq_poly_struct im, int prec) {
    arblibJNI.acb_poly_set2_fmpq_poly(acb_poly_struct.getCPtr(poly), poly, fmpq_poly_struct.getCPtr(re), re, fmpq_poly_struct.getCPtr(im), im, prec);
  }

  public static void acb_poly_set_fmpz_poly(acb_poly_struct poly, fmpz_poly_struct src, int prec) {
    arblibJNI.acb_poly_set_fmpz_poly(acb_poly_struct.getCPtr(poly), poly, fmpz_poly_struct.getCPtr(src), src, prec);
  }

  public static void acb_poly_set2_fmpz_poly(acb_poly_struct poly, fmpz_poly_struct re, fmpz_poly_struct im, int prec) {
    arblibJNI.acb_poly_set2_fmpz_poly(acb_poly_struct.getCPtr(poly), poly, fmpz_poly_struct.getCPtr(re), re, fmpz_poly_struct.getCPtr(im), im, prec);
  }

  public static int acb_poly_get_unique_fmpz_poly(fmpz_poly_struct res, acb_poly_struct src) {
    return arblibJNI.acb_poly_get_unique_fmpz_poly(fmpz_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(src), src);
  }

  public static void acb_poly_set_acb(acb_poly_struct poly, acb_struct c) {
    arblibJNI.acb_poly_set_acb(acb_poly_struct.getCPtr(poly), poly, acb_struct.getCPtr(c), c);
  }

  public static void acb_poly_set_si(acb_poly_struct poly, int c) {
    arblibJNI.acb_poly_set_si(acb_poly_struct.getCPtr(poly), poly, c);
  }

  public static void acb_poly_randtest(acb_poly_struct poly, flint_rand_s state, int len, int prec, int mag_bits) {
    arblibJNI.acb_poly_randtest(acb_poly_struct.getCPtr(poly), poly, flint_rand_s.getCPtr(state), state, len, prec, mag_bits);
  }

  public static int acb_poly_equal(acb_poly_struct A, acb_poly_struct B) {
    return arblibJNI.acb_poly_equal(acb_poly_struct.getCPtr(A), A, acb_poly_struct.getCPtr(B), B);
  }

  public static int acb_poly_contains_fmpz_poly(acb_poly_struct poly1, fmpz_poly_struct poly2) {
    return arblibJNI.acb_poly_contains_fmpz_poly(acb_poly_struct.getCPtr(poly1), poly1, fmpz_poly_struct.getCPtr(poly2), poly2);
  }

  public static int acb_poly_contains_fmpq_poly(acb_poly_struct poly1, fmpq_poly_struct poly2) {
    return arblibJNI.acb_poly_contains_fmpq_poly(acb_poly_struct.getCPtr(poly1), poly1, fmpq_poly_struct.getCPtr(poly2), poly2);
  }

  public static int _acb_poly_overlaps(acb_struct poly1, int len1, acb_struct poly2, int len2) {
    return arblibJNI._acb_poly_overlaps(acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2);
  }

  public static int acb_poly_overlaps(acb_poly_struct poly1, acb_poly_struct poly2) {
    return arblibJNI.acb_poly_overlaps(acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2);
  }

  public static int acb_poly_contains(acb_poly_struct poly1, acb_poly_struct poly2) {
    return arblibJNI.acb_poly_contains(acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2);
  }

  public static int acb_poly_is_real(acb_poly_struct poly) {
    return arblibJNI.acb_poly_is_real(acb_poly_struct.getCPtr(poly), poly);
  }

  public static void _acb_poly_add(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int prec) {
    arblibJNI._acb_poly_add(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void acb_poly_add(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int prec) {
    arblibJNI.acb_poly_add(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void acb_poly_add_si(acb_poly_struct res, acb_poly_struct poly, int c, int prec) {
    arblibJNI.acb_poly_add_si(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, c, prec);
  }

  public static void _acb_poly_sub(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int prec) {
    arblibJNI._acb_poly_sub(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void acb_poly_sub(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int prec) {
    arblibJNI.acb_poly_sub(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void acb_poly_add_series(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int len, int prec) {
    arblibJNI.acb_poly_add_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, len, prec);
  }

  public static void acb_poly_sub_series(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int len, int prec) {
    arblibJNI.acb_poly_sub_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, len, prec);
  }

  public static void acb_poly_neg(acb_poly_struct res, acb_poly_struct poly) {
    arblibJNI.acb_poly_neg(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly);
  }

  public static void acb_poly_scalar_mul_2exp_si(acb_poly_struct res, acb_poly_struct poly, int c) {
    arblibJNI.acb_poly_scalar_mul_2exp_si(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, c);
  }

  public static void acb_poly_scalar_mul(acb_poly_struct res, acb_poly_struct poly, acb_struct c, int prec) {
    arblibJNI.acb_poly_scalar_mul(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, acb_struct.getCPtr(c), c, prec);
  }

  public static void acb_poly_scalar_div(acb_poly_struct res, acb_poly_struct poly, acb_struct c, int prec) {
    arblibJNI.acb_poly_scalar_div(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, acb_struct.getCPtr(c), c, prec);
  }

  public static void acb_poly_mullow_classical(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int n, int prec) {
    arblibJNI.acb_poly_mullow_classical(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _acb_poly_mullow_classical(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int n, int prec) {
    arblibJNI._acb_poly_mullow_classical(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void _acb_poly_mullow_transpose(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int n, int prec) {
    arblibJNI._acb_poly_mullow_transpose(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void acb_poly_mullow_transpose(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int n, int prec) {
    arblibJNI.acb_poly_mullow_transpose(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _acb_poly_mullow_transpose_gauss(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int n, int prec) {
    arblibJNI._acb_poly_mullow_transpose_gauss(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void acb_poly_mullow_transpose_gauss(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int n, int prec) {
    arblibJNI.acb_poly_mullow_transpose_gauss(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _acb_poly_mullow(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int n, int prec) {
    arblibJNI._acb_poly_mullow(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void acb_poly_mullow(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int n, int prec) {
    arblibJNI.acb_poly_mullow(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _acb_poly_mul(acb_struct C, acb_struct A, int lenA, acb_struct B, int lenB, int prec) {
    arblibJNI._acb_poly_mul(acb_struct.getCPtr(C), C, acb_struct.getCPtr(A), A, lenA, acb_struct.getCPtr(B), B, lenB, prec);
  }

  public static void acb_poly_mul(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int prec) {
    arblibJNI.acb_poly_mul(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void _acb_poly_mul_monic(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int prec) {
    arblibJNI._acb_poly_mul_monic(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void _acb_poly_inv_series(acb_struct Qinv, acb_struct Q, int Qlen, int len, int prec) {
    arblibJNI._acb_poly_inv_series(acb_struct.getCPtr(Qinv), Qinv, acb_struct.getCPtr(Q), Q, Qlen, len, prec);
  }

  public static void acb_poly_inv_series(acb_poly_struct Qinv, acb_poly_struct Q, int n, int prec) {
    arblibJNI.acb_poly_inv_series(acb_poly_struct.getCPtr(Qinv), Qinv, acb_poly_struct.getCPtr(Q), Q, n, prec);
  }

  public static void _acb_poly_div_series(acb_struct Q, acb_struct A, int Alen, acb_struct B, int Blen, int n, int prec) {
    arblibJNI._acb_poly_div_series(acb_struct.getCPtr(Q), Q, acb_struct.getCPtr(A), A, Alen, acb_struct.getCPtr(B), B, Blen, n, prec);
  }

  public static void acb_poly_div_series(acb_poly_struct Q, acb_poly_struct A, acb_poly_struct B, int n, int prec) {
    arblibJNI.acb_poly_div_series(acb_poly_struct.getCPtr(Q), Q, acb_poly_struct.getCPtr(A), A, acb_poly_struct.getCPtr(B), B, n, prec);
  }

  public static void _acb_poly_reverse(acb_struct res, acb_struct poly, int len, int n) {
    arblibJNI._acb_poly_reverse(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly), poly, len, n);
  }

  public static void _acb_poly_div(acb_struct Q, acb_struct A, int lenA, acb_struct B, int lenB, int prec) {
    arblibJNI._acb_poly_div(acb_struct.getCPtr(Q), Q, acb_struct.getCPtr(A), A, lenA, acb_struct.getCPtr(B), B, lenB, prec);
  }

  public static void _acb_poly_divrem(acb_struct Q, acb_struct R, acb_struct A, int lenA, acb_struct B, int lenB, int prec) {
    arblibJNI._acb_poly_divrem(acb_struct.getCPtr(Q), Q, acb_struct.getCPtr(R), R, acb_struct.getCPtr(A), A, lenA, acb_struct.getCPtr(B), B, lenB, prec);
  }

  public static void _acb_poly_rem(acb_struct R, acb_struct A, int lenA, acb_struct B, int lenB, int prec) {
    arblibJNI._acb_poly_rem(acb_struct.getCPtr(R), R, acb_struct.getCPtr(A), A, lenA, acb_struct.getCPtr(B), B, lenB, prec);
  }

  public static int acb_poly_divrem(acb_poly_struct Q, acb_poly_struct R, acb_poly_struct A, acb_poly_struct B, int prec) {
    return arblibJNI.acb_poly_divrem(acb_poly_struct.getCPtr(Q), Q, acb_poly_struct.getCPtr(R), R, acb_poly_struct.getCPtr(A), A, acb_poly_struct.getCPtr(B), B, prec);
  }

  public static void _acb_poly_div_root(acb_struct Q, acb_struct R, acb_struct A, int len, acb_struct c, int prec) {
    arblibJNI._acb_poly_div_root(acb_struct.getCPtr(Q), Q, acb_struct.getCPtr(R), R, acb_struct.getCPtr(A), A, len, acb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_poly_taylor_shift_horner(acb_struct poly, acb_struct c, int n, int prec) {
    arblibJNI._acb_poly_taylor_shift_horner(acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(c), c, n, prec);
  }

  public static void acb_poly_taylor_shift_horner(acb_poly_struct g, acb_poly_struct f, acb_struct c, int prec) {
    arblibJNI.acb_poly_taylor_shift_horner(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_poly_taylor_shift_divconquer(acb_struct poly, acb_struct c, int n, int prec) {
    arblibJNI._acb_poly_taylor_shift_divconquer(acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(c), c, n, prec);
  }

  public static void acb_poly_taylor_shift_divconquer(acb_poly_struct g, acb_poly_struct f, acb_struct c, int prec) {
    arblibJNI.acb_poly_taylor_shift_divconquer(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_poly_taylor_shift_convolution(acb_struct poly, acb_struct c, int n, int prec) {
    arblibJNI._acb_poly_taylor_shift_convolution(acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(c), c, n, prec);
  }

  public static void acb_poly_taylor_shift_convolution(acb_poly_struct g, acb_poly_struct f, acb_struct c, int prec) {
    arblibJNI.acb_poly_taylor_shift_convolution(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_poly_taylor_shift(acb_struct poly, acb_struct c, int n, int prec) {
    arblibJNI._acb_poly_taylor_shift(acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(c), c, n, prec);
  }

  public static void acb_poly_taylor_shift(acb_poly_struct g, acb_poly_struct f, acb_struct c, int prec) {
    arblibJNI.acb_poly_taylor_shift(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(c), c, prec);
  }

  public static void _acb_poly_compose(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int prec) {
    arblibJNI._acb_poly_compose(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void acb_poly_compose(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int prec) {
    arblibJNI.acb_poly_compose(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void _acb_poly_compose_horner(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int prec) {
    arblibJNI._acb_poly_compose_horner(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void acb_poly_compose_horner(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int prec) {
    arblibJNI.acb_poly_compose_horner(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void _acb_poly_compose_divconquer(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int prec) {
    arblibJNI._acb_poly_compose_divconquer(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, prec);
  }

  public static void acb_poly_compose_divconquer(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int prec) {
    arblibJNI.acb_poly_compose_divconquer(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, prec);
  }

  public static void _acb_poly_compose_series_horner(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int n, int prec) {
    arblibJNI._acb_poly_compose_series_horner(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void acb_poly_compose_series_horner(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int n, int prec) {
    arblibJNI.acb_poly_compose_series_horner(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _acb_poly_compose_series_brent_kung(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int n, int prec) {
    arblibJNI._acb_poly_compose_series_brent_kung(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void acb_poly_compose_series_brent_kung(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int n, int prec) {
    arblibJNI.acb_poly_compose_series_brent_kung(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _acb_poly_compose_series(acb_struct res, acb_struct poly1, int len1, acb_struct poly2, int len2, int n, int prec) {
    arblibJNI._acb_poly_compose_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(poly1), poly1, len1, acb_struct.getCPtr(poly2), poly2, len2, n, prec);
  }

  public static void acb_poly_compose_series(acb_poly_struct res, acb_poly_struct poly1, acb_poly_struct poly2, int n, int prec) {
    arblibJNI.acb_poly_compose_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly1), poly1, acb_poly_struct.getCPtr(poly2), poly2, n, prec);
  }

  public static void _acb_poly_revert_series_lagrange(acb_struct Qinv, acb_struct Q, int Qlen, int n, int prec) {
    arblibJNI._acb_poly_revert_series_lagrange(acb_struct.getCPtr(Qinv), Qinv, acb_struct.getCPtr(Q), Q, Qlen, n, prec);
  }

  public static void acb_poly_revert_series_lagrange(acb_poly_struct Qinv, acb_poly_struct Q, int n, int prec) {
    arblibJNI.acb_poly_revert_series_lagrange(acb_poly_struct.getCPtr(Qinv), Qinv, acb_poly_struct.getCPtr(Q), Q, n, prec);
  }

  public static void _acb_poly_revert_series_newton(acb_struct Qinv, acb_struct Q, int Qlen, int n, int prec) {
    arblibJNI._acb_poly_revert_series_newton(acb_struct.getCPtr(Qinv), Qinv, acb_struct.getCPtr(Q), Q, Qlen, n, prec);
  }

  public static void acb_poly_revert_series_newton(acb_poly_struct Qinv, acb_poly_struct Q, int n, int prec) {
    arblibJNI.acb_poly_revert_series_newton(acb_poly_struct.getCPtr(Qinv), Qinv, acb_poly_struct.getCPtr(Q), Q, n, prec);
  }

  public static void _acb_poly_revert_series_lagrange_fast(acb_struct Qinv, acb_struct Q, int Qlen, int n, int prec) {
    arblibJNI._acb_poly_revert_series_lagrange_fast(acb_struct.getCPtr(Qinv), Qinv, acb_struct.getCPtr(Q), Q, Qlen, n, prec);
  }

  public static void acb_poly_revert_series_lagrange_fast(acb_poly_struct Qinv, acb_poly_struct Q, int n, int prec) {
    arblibJNI.acb_poly_revert_series_lagrange_fast(acb_poly_struct.getCPtr(Qinv), Qinv, acb_poly_struct.getCPtr(Q), Q, n, prec);
  }

  public static void _acb_poly_revert_series(acb_struct Qinv, acb_struct Q, int Qlen, int n, int prec) {
    arblibJNI._acb_poly_revert_series(acb_struct.getCPtr(Qinv), Qinv, acb_struct.getCPtr(Q), Q, Qlen, n, prec);
  }

  public static void acb_poly_revert_series(acb_poly_struct Qinv, acb_poly_struct Q, int n, int prec) {
    arblibJNI.acb_poly_revert_series(acb_poly_struct.getCPtr(Qinv), Qinv, acb_poly_struct.getCPtr(Q), Q, n, prec);
  }

  public static void _acb_poly_evaluate_vec_fast_precomp(acb_struct vs, acb_struct poly, int plen, SWIGTYPE_p_p_acb_struct tree, int len, int prec) {
    arblibJNI._acb_poly_evaluate_vec_fast_precomp(acb_struct.getCPtr(vs), vs, acb_struct.getCPtr(poly), poly, plen, SWIGTYPE_p_p_acb_struct.getCPtr(tree), len, prec);
  }

  public static void _acb_poly_evaluate_vec_fast(acb_struct ys, acb_struct poly, int plen, acb_struct xs, int n, int prec) {
    arblibJNI._acb_poly_evaluate_vec_fast(acb_struct.getCPtr(ys), ys, acb_struct.getCPtr(poly), poly, plen, acb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void acb_poly_evaluate_vec_fast(acb_struct ys, acb_poly_struct poly, acb_struct xs, int n, int prec) {
    arblibJNI.acb_poly_evaluate_vec_fast(acb_struct.getCPtr(ys), ys, acb_poly_struct.getCPtr(poly), poly, acb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void _acb_poly_evaluate_vec_iter(acb_struct ys, acb_struct poly, int plen, acb_struct xs, int n, int prec) {
    arblibJNI._acb_poly_evaluate_vec_iter(acb_struct.getCPtr(ys), ys, acb_struct.getCPtr(poly), poly, plen, acb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void acb_poly_evaluate_vec_iter(acb_struct ys, acb_poly_struct poly, acb_struct xs, int n, int prec) {
    arblibJNI.acb_poly_evaluate_vec_iter(acb_struct.getCPtr(ys), ys, acb_poly_struct.getCPtr(poly), poly, acb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void _acb_poly_interpolate_barycentric(acb_struct poly, acb_struct xs, acb_struct ys, int n, int prec) {
    arblibJNI._acb_poly_interpolate_barycentric(acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(xs), xs, acb_struct.getCPtr(ys), ys, n, prec);
  }

  public static void acb_poly_interpolate_barycentric(acb_poly_struct poly, acb_struct xs, acb_struct ys, int n, int prec) {
    arblibJNI.acb_poly_interpolate_barycentric(acb_poly_struct.getCPtr(poly), poly, acb_struct.getCPtr(xs), xs, acb_struct.getCPtr(ys), ys, n, prec);
  }

  public static void _acb_poly_interpolation_weights(acb_struct w, SWIGTYPE_p_p_acb_struct tree, int len, int prec) {
    arblibJNI._acb_poly_interpolation_weights(acb_struct.getCPtr(w), w, SWIGTYPE_p_p_acb_struct.getCPtr(tree), len, prec);
  }

  public static void _acb_poly_interpolate_fast_precomp(acb_struct poly, acb_struct ys, SWIGTYPE_p_p_acb_struct tree, acb_struct weights, int len, int prec) {
    arblibJNI._acb_poly_interpolate_fast_precomp(acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(ys), ys, SWIGTYPE_p_p_acb_struct.getCPtr(tree), acb_struct.getCPtr(weights), weights, len, prec);
  }

  public static void _acb_poly_interpolate_fast(acb_struct poly, acb_struct xs, acb_struct ys, int len, int prec) {
    arblibJNI._acb_poly_interpolate_fast(acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(xs), xs, acb_struct.getCPtr(ys), ys, len, prec);
  }

  public static void acb_poly_interpolate_fast(acb_poly_struct poly, acb_struct xs, acb_struct ys, int n, int prec) {
    arblibJNI.acb_poly_interpolate_fast(acb_poly_struct.getCPtr(poly), poly, acb_struct.getCPtr(xs), xs, acb_struct.getCPtr(ys), ys, n, prec);
  }

  public static void _acb_poly_interpolate_newton(acb_struct poly, acb_struct xs, acb_struct ys, int n, int prec) {
    arblibJNI._acb_poly_interpolate_newton(acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(xs), xs, acb_struct.getCPtr(ys), ys, n, prec);
  }

  public static void acb_poly_interpolate_newton(acb_poly_struct poly, acb_struct xs, acb_struct ys, int n, int prec) {
    arblibJNI.acb_poly_interpolate_newton(acb_poly_struct.getCPtr(poly), poly, acb_struct.getCPtr(xs), xs, acb_struct.getCPtr(ys), ys, n, prec);
  }

  public static void _acb_poly_product_roots(acb_struct poly, acb_struct xs, int n, int prec) {
    arblibJNI._acb_poly_product_roots(acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(xs), xs, n, prec);
  }

  public static void acb_poly_product_roots(acb_poly_struct poly, acb_struct xs, int n, int prec) {
    arblibJNI.acb_poly_product_roots(acb_poly_struct.getCPtr(poly), poly, acb_struct.getCPtr(xs), xs, n, prec);
  }

  public static SWIGTYPE_p_p_acb_struct _acb_poly_tree_alloc(int len) {
    long cPtr = arblibJNI._acb_poly_tree_alloc(len);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_acb_struct(cPtr, false);
  }

  public static void _acb_poly_tree_free(SWIGTYPE_p_p_acb_struct tree, int len) {
    arblibJNI._acb_poly_tree_free(SWIGTYPE_p_p_acb_struct.getCPtr(tree), len);
  }

  public static void _acb_poly_tree_build(SWIGTYPE_p_p_acb_struct tree, acb_struct roots, int len, int prec) {
    arblibJNI._acb_poly_tree_build(SWIGTYPE_p_p_acb_struct.getCPtr(tree), acb_struct.getCPtr(roots), roots, len, prec);
  }

  public static void _acb_poly_root_inclusion(acb_struct r, acb_struct m, acb_struct poly, acb_struct polyder, int len, int prec) {
    arblibJNI._acb_poly_root_inclusion(acb_struct.getCPtr(r), r, acb_struct.getCPtr(m), m, acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(polyder), polyder, len, prec);
  }

  public static int _acb_poly_validate_roots(acb_struct roots, acb_struct poly, int len, int prec) {
    return arblibJNI._acb_poly_validate_roots(acb_struct.getCPtr(roots), roots, acb_struct.getCPtr(poly), poly, len, prec);
  }

  public static void _acb_poly_refine_roots_durand_kerner(acb_struct roots, acb_struct poly, int len, int prec) {
    arblibJNI._acb_poly_refine_roots_durand_kerner(acb_struct.getCPtr(roots), roots, acb_struct.getCPtr(poly), poly, len, prec);
  }

  public static int _acb_poly_find_roots(acb_struct roots, acb_struct poly, acb_struct initial, int len, int maxiter, int prec) {
    return arblibJNI._acb_poly_find_roots(acb_struct.getCPtr(roots), roots, acb_struct.getCPtr(poly), poly, acb_struct.getCPtr(initial), initial, len, maxiter, prec);
  }

  public static int acb_poly_find_roots(acb_struct roots, acb_poly_struct poly, acb_struct initial, int maxiter, int prec) {
    return arblibJNI.acb_poly_find_roots(acb_struct.getCPtr(roots), roots, acb_poly_struct.getCPtr(poly), poly, acb_struct.getCPtr(initial), initial, maxiter, prec);
  }

  public static void _acb_poly_root_bound_fujiwara(mag_struct bound, acb_struct poly, int len) {
    arblibJNI._acb_poly_root_bound_fujiwara(mag_struct.getCPtr(bound), bound, acb_struct.getCPtr(poly), poly, len);
  }

  public static void acb_poly_root_bound_fujiwara(mag_struct bound, acb_poly_struct poly) {
    arblibJNI.acb_poly_root_bound_fujiwara(mag_struct.getCPtr(bound), bound, acb_poly_struct.getCPtr(poly), poly);
  }

  public static int _acb_poly_validate_real_roots(acb_struct roots, acb_struct poly, int len, int prec) {
    return arblibJNI._acb_poly_validate_real_roots(acb_struct.getCPtr(roots), roots, acb_struct.getCPtr(poly), poly, len, prec);
  }

  public static int acb_poly_validate_real_roots(acb_struct roots, acb_poly_struct poly, int prec) {
    return arblibJNI.acb_poly_validate_real_roots(acb_struct.getCPtr(roots), roots, acb_poly_struct.getCPtr(poly), poly, prec);
  }

  public static void _acb_poly_pow_ui_trunc_binexp(acb_struct res, acb_struct f, int flen, long exp, int len, int prec) {
    arblibJNI._acb_poly_pow_ui_trunc_binexp(acb_struct.getCPtr(res), res, acb_struct.getCPtr(f), f, flen, exp, len, prec);
  }

  public static void acb_poly_pow_ui_trunc_binexp(acb_poly_struct res, acb_poly_struct poly, long exp, int len, int prec) {
    arblibJNI.acb_poly_pow_ui_trunc_binexp(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, exp, len, prec);
  }

  public static void _acb_poly_pow_ui(acb_struct res, acb_struct f, int flen, long exp, int prec) {
    arblibJNI._acb_poly_pow_ui(acb_struct.getCPtr(res), res, acb_struct.getCPtr(f), f, flen, exp, prec);
  }

  public static void acb_poly_pow_ui(acb_poly_struct res, acb_poly_struct poly, long exp, int prec) {
    arblibJNI.acb_poly_pow_ui(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(poly), poly, exp, prec);
  }

  public static void _acb_poly_rsqrt_series(acb_struct g, acb_struct h, int hlen, int len, int prec) {
    arblibJNI._acb_poly_rsqrt_series(acb_struct.getCPtr(g), g, acb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void acb_poly_rsqrt_series(acb_poly_struct g, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_rsqrt_series(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_sqrt_series(acb_struct g, acb_struct h, int hlen, int len, int prec) {
    arblibJNI._acb_poly_sqrt_series(acb_struct.getCPtr(g), g, acb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void acb_poly_sqrt_series(acb_poly_struct g, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_sqrt_series(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_log_series(acb_struct res, acb_struct f, int flen, int n, int prec) {
    arblibJNI._acb_poly_log_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(f), f, flen, n, prec);
  }

  public static void acb_poly_log_series(acb_poly_struct res, acb_poly_struct f, int n, int prec) {
    arblibJNI.acb_poly_log_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _acb_poly_log1p_series(acb_struct res, acb_struct f, int flen, int n, int prec) {
    arblibJNI._acb_poly_log1p_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(f), f, flen, n, prec);
  }

  public static void acb_poly_log1p_series(acb_poly_struct res, acb_poly_struct f, int n, int prec) {
    arblibJNI.acb_poly_log1p_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _acb_poly_atan_series(acb_struct res, acb_struct f, int flen, int n, int prec) {
    arblibJNI._acb_poly_atan_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(f), f, flen, n, prec);
  }

  public static void acb_poly_atan_series(acb_poly_struct res, acb_poly_struct f, int n, int prec) {
    arblibJNI.acb_poly_atan_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _acb_poly_exp_series_basecase(acb_struct f, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_exp_series_basecase(acb_struct.getCPtr(f), f, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_exp_series_basecase(acb_poly_struct f, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_exp_series_basecase(acb_poly_struct.getCPtr(f), f, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_exp_series(acb_struct f, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_exp_series(acb_struct.getCPtr(f), f, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_exp_series(acb_poly_struct f, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_exp_series(acb_poly_struct.getCPtr(f), f, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_exp_pi_i_series(acb_struct f, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_exp_pi_i_series(acb_struct.getCPtr(f), f, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_exp_pi_i_series(acb_poly_struct f, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_exp_pi_i_series(acb_poly_struct.getCPtr(f), f, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_sinh_cosh_series_basecase(acb_struct s, acb_struct c, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_sinh_cosh_series_basecase(acb_struct.getCPtr(s), s, acb_struct.getCPtr(c), c, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_sinh_cosh_series_basecase(acb_poly_struct s, acb_poly_struct c, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_sinh_cosh_series_basecase(acb_poly_struct.getCPtr(s), s, acb_poly_struct.getCPtr(c), c, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_sinh_cosh_series_exponential(acb_struct s, acb_struct c, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_sinh_cosh_series_exponential(acb_struct.getCPtr(s), s, acb_struct.getCPtr(c), c, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_sinh_cosh_series_exponential(acb_poly_struct s, acb_poly_struct c, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_sinh_cosh_series_exponential(acb_poly_struct.getCPtr(s), s, acb_poly_struct.getCPtr(c), c, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_sinh_cosh_series(acb_struct s, acb_struct c, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_sinh_cosh_series(acb_struct.getCPtr(s), s, acb_struct.getCPtr(c), c, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_sinh_cosh_series(acb_poly_struct s, acb_poly_struct c, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_sinh_cosh_series(acb_poly_struct.getCPtr(s), s, acb_poly_struct.getCPtr(c), c, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_sinh_series(acb_struct s, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_sinh_series(acb_struct.getCPtr(s), s, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_sinh_series(acb_poly_struct s, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_sinh_series(acb_poly_struct.getCPtr(s), s, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_cosh_series(acb_struct c, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_cosh_series(acb_struct.getCPtr(c), c, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_cosh_series(acb_poly_struct c, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_cosh_series(acb_poly_struct.getCPtr(c), c, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_sin_cos_series_basecase(acb_struct s, acb_struct c, acb_struct h, int hlen, int n, int prec, int times_pi) {
    arblibJNI._acb_poly_sin_cos_series_basecase(acb_struct.getCPtr(s), s, acb_struct.getCPtr(c), c, acb_struct.getCPtr(h), h, hlen, n, prec, times_pi);
  }

  public static void acb_poly_sin_cos_series_basecase(acb_poly_struct s, acb_poly_struct c, acb_poly_struct h, int n, int prec, int times_pi) {
    arblibJNI.acb_poly_sin_cos_series_basecase(acb_poly_struct.getCPtr(s), s, acb_poly_struct.getCPtr(c), c, acb_poly_struct.getCPtr(h), h, n, prec, times_pi);
  }

  public static void _acb_poly_sin_cos_series_tangent(acb_struct s, acb_struct c, acb_struct h, int hlen, int len, int prec, int times_pi) {
    arblibJNI._acb_poly_sin_cos_series_tangent(acb_struct.getCPtr(s), s, acb_struct.getCPtr(c), c, acb_struct.getCPtr(h), h, hlen, len, prec, times_pi);
  }

  public static void acb_poly_sin_cos_series_tangent(acb_poly_struct s, acb_poly_struct c, acb_poly_struct h, int n, int prec, int times_pi) {
    arblibJNI.acb_poly_sin_cos_series_tangent(acb_poly_struct.getCPtr(s), s, acb_poly_struct.getCPtr(c), c, acb_poly_struct.getCPtr(h), h, n, prec, times_pi);
  }

  public static void _acb_poly_sin_cos_series(acb_struct s, acb_struct c, acb_struct h, int hlen, int len, int prec) {
    arblibJNI._acb_poly_sin_cos_series(acb_struct.getCPtr(s), s, acb_struct.getCPtr(c), c, acb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void acb_poly_sin_cos_series(acb_poly_struct s, acb_poly_struct c, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_sin_cos_series(acb_poly_struct.getCPtr(s), s, acb_poly_struct.getCPtr(c), c, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_sin_series(acb_struct g, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_sin_series(acb_struct.getCPtr(g), g, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_sin_series(acb_poly_struct g, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_sin_series(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_cos_series(acb_struct g, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_cos_series(acb_struct.getCPtr(g), g, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_cos_series(acb_poly_struct g, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_cos_series(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_sin_cos_pi_series(acb_struct s, acb_struct c, acb_struct h, int hlen, int len, int prec) {
    arblibJNI._acb_poly_sin_cos_pi_series(acb_struct.getCPtr(s), s, acb_struct.getCPtr(c), c, acb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void acb_poly_sin_cos_pi_series(acb_poly_struct s, acb_poly_struct c, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_sin_cos_pi_series(acb_poly_struct.getCPtr(s), s, acb_poly_struct.getCPtr(c), c, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_sin_pi_series(acb_struct g, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_sin_pi_series(acb_struct.getCPtr(g), g, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_sin_pi_series(acb_poly_struct g, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_sin_pi_series(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_cos_pi_series(acb_struct g, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_cos_pi_series(acb_struct.getCPtr(g), g, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_cos_pi_series(acb_poly_struct g, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_cos_pi_series(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_cot_pi_series(acb_struct g, acb_struct h, int hlen, int len, int prec) {
    arblibJNI._acb_poly_cot_pi_series(acb_struct.getCPtr(g), g, acb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void acb_poly_cot_pi_series(acb_poly_struct res, acb_poly_struct f, int len, int prec) {
    arblibJNI.acb_poly_cot_pi_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, len, prec);
  }

  public static void _acb_poly_tan_series(acb_struct g, acb_struct h, int hlen, int len, int prec) {
    arblibJNI._acb_poly_tan_series(acb_struct.getCPtr(g), g, acb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void acb_poly_tan_series(acb_poly_struct g, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_tan_series(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_sinc_series(acb_struct g, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_sinc_series(acb_struct.getCPtr(g), g, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_sinc_series(acb_poly_struct g, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_sinc_series(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static void _acb_poly_lambertw_series(acb_struct res, acb_struct z, int zlen, SWIGTYPE_p_long k, int flags, int len, int prec) {
    arblibJNI._acb_poly_lambertw_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, zlen, SWIGTYPE_p_long.getCPtr(k), flags, len, prec);
  }

  public static void acb_poly_lambertw_series(acb_poly_struct res, acb_poly_struct z, SWIGTYPE_p_long k, int flags, int len, int prec) {
    arblibJNI.acb_poly_lambertw_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(z), z, SWIGTYPE_p_long.getCPtr(k), flags, len, prec);
  }

  public static void _acb_poly_gamma_series(acb_struct res, acb_struct h, int hlen, int len, int prec) {
    arblibJNI._acb_poly_gamma_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void acb_poly_gamma_series(acb_poly_struct res, acb_poly_struct f, int n, int prec) {
    arblibJNI.acb_poly_gamma_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _acb_poly_rgamma_series(acb_struct res, acb_struct h, int hlen, int len, int prec) {
    arblibJNI._acb_poly_rgamma_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void acb_poly_rgamma_series(acb_poly_struct res, acb_poly_struct f, int n, int prec) {
    arblibJNI.acb_poly_rgamma_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _acb_poly_lgamma_series(acb_struct res, acb_struct h, int hlen, int len, int prec) {
    arblibJNI._acb_poly_lgamma_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void acb_poly_lgamma_series(acb_poly_struct res, acb_poly_struct f, int n, int prec) {
    arblibJNI.acb_poly_lgamma_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _acb_poly_digamma_series(acb_struct res, acb_struct h, int hlen, int len, int prec) {
    arblibJNI._acb_poly_digamma_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(h), h, hlen, len, prec);
  }

  public static void acb_poly_digamma_series(acb_poly_struct res, acb_poly_struct f, int n, int prec) {
    arblibJNI.acb_poly_digamma_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, n, prec);
  }

  public static void _acb_poly_rising_ui_series(acb_struct res, acb_struct f, int flen, long r, int trunc, int prec) {
    arblibJNI._acb_poly_rising_ui_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(f), f, flen, r, trunc, prec);
  }

  public static void acb_poly_rising_ui_series(acb_poly_struct res, acb_poly_struct f, long r, int trunc, int prec) {
    arblibJNI.acb_poly_rising_ui_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, r, trunc, prec);
  }

  public static void _acb_poly_pow_acb_series(acb_struct h, acb_struct f, int flen, acb_struct g, int len, int prec) {
    arblibJNI._acb_poly_pow_acb_series(acb_struct.getCPtr(h), h, acb_struct.getCPtr(f), f, flen, acb_struct.getCPtr(g), g, len, prec);
  }

  public static void acb_poly_pow_acb_series(acb_poly_struct h, acb_poly_struct f, acb_struct g, int len, int prec) {
    arblibJNI.acb_poly_pow_acb_series(acb_poly_struct.getCPtr(h), h, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(g), g, len, prec);
  }

  public static void _acb_poly_pow_series(acb_struct h, acb_struct f, int flen, acb_struct g, int glen, int len, int prec) {
    arblibJNI._acb_poly_pow_series(acb_struct.getCPtr(h), h, acb_struct.getCPtr(f), f, flen, acb_struct.getCPtr(g), g, glen, len, prec);
  }

  public static void acb_poly_pow_series(acb_poly_struct h, acb_poly_struct f, acb_poly_struct g, int len, int prec) {
    arblibJNI.acb_poly_pow_series(acb_poly_struct.getCPtr(h), h, acb_poly_struct.getCPtr(f), f, acb_poly_struct.getCPtr(g), g, len, prec);
  }

  public static void _acb_poly_binomial_pow_acb_series(acb_struct h, acb_struct f, int flen, acb_struct g, int len, int prec) {
    arblibJNI._acb_poly_binomial_pow_acb_series(acb_struct.getCPtr(h), h, acb_struct.getCPtr(f), f, flen, acb_struct.getCPtr(g), g, len, prec);
  }

  public static void _acb_poly_acb_pow_cpx(acb_struct w, acb_struct a, acb_struct b, int len, int prec) {
    arblibJNI._acb_poly_acb_pow_cpx(acb_struct.getCPtr(w), w, acb_struct.getCPtr(a), a, acb_struct.getCPtr(b), b, len, prec);
  }

  public static void _acb_poly_acb_invpow_cpx(acb_struct res, acb_struct N, acb_struct c, int trunc, int prec) {
    arblibJNI._acb_poly_acb_invpow_cpx(acb_struct.getCPtr(res), res, acb_struct.getCPtr(N), N, acb_struct.getCPtr(c), c, trunc, prec);
  }

  public static void _acb_poly_mullow_cpx(acb_struct res, acb_struct src, int len, acb_struct c, int trunc, int prec) {
    arblibJNI._acb_poly_mullow_cpx(acb_struct.getCPtr(res), res, acb_struct.getCPtr(src), src, len, acb_struct.getCPtr(c), c, trunc, prec);
  }

  public static void _acb_poly_powsum_series_naive(acb_struct z, acb_struct s, acb_struct a, acb_struct q, int n, int len, int prec) {
    arblibJNI._acb_poly_powsum_series_naive(acb_struct.getCPtr(z), z, acb_struct.getCPtr(s), s, acb_struct.getCPtr(a), a, acb_struct.getCPtr(q), q, n, len, prec);
  }

  public static void _acb_poly_powsum_series_naive_threaded(acb_struct z, acb_struct s, acb_struct a, acb_struct q, int n, int len, int prec) {
    arblibJNI._acb_poly_powsum_series_naive_threaded(acb_struct.getCPtr(z), z, acb_struct.getCPtr(s), s, acb_struct.getCPtr(a), a, acb_struct.getCPtr(q), q, n, len, prec);
  }

  public static void _acb_poly_powsum_one_series_sieved(acb_struct z, acb_struct s, int n, int len, int prec) {
    arblibJNI._acb_poly_powsum_one_series_sieved(acb_struct.getCPtr(z), z, acb_struct.getCPtr(s), s, n, len, prec);
  }

  public static void _acb_poly_zeta_em_sum(acb_struct z, acb_struct s, acb_struct a, int deflate, long N, long M, int d, int prec) {
    arblibJNI._acb_poly_zeta_em_sum(acb_struct.getCPtr(z), z, acb_struct.getCPtr(s), s, acb_struct.getCPtr(a), a, deflate, N, M, d, prec);
  }

  public static void _acb_poly_zeta_em_choose_param(mag_struct bound, SWIGTYPE_p_unsigned_long N, SWIGTYPE_p_unsigned_long M, acb_struct s, acb_struct a, int d, int target, int prec) {
    arblibJNI._acb_poly_zeta_em_choose_param(mag_struct.getCPtr(bound), bound, SWIGTYPE_p_unsigned_long.getCPtr(N), SWIGTYPE_p_unsigned_long.getCPtr(M), acb_struct.getCPtr(s), s, acb_struct.getCPtr(a), a, d, target, prec);
  }

  public static void _acb_poly_zeta_em_bound1(mag_struct bound, acb_struct s, acb_struct a, int N, int M, int d, int wp) {
    arblibJNI._acb_poly_zeta_em_bound1(mag_struct.getCPtr(bound), bound, acb_struct.getCPtr(s), s, acb_struct.getCPtr(a), a, N, M, d, wp);
  }

  public static void _acb_poly_zeta_em_bound(arb_struct vec, acb_struct s, acb_struct a, long N, long M, int d, int wp) {
    arblibJNI._acb_poly_zeta_em_bound(arb_struct.getCPtr(vec), vec, acb_struct.getCPtr(s), s, acb_struct.getCPtr(a), a, N, M, d, wp);
  }

  public static void _acb_poly_zeta_em_tail_naive(acb_struct sum, acb_struct s, acb_struct Na, acb_struct Nasx, int M, int len, int prec) {
    arblibJNI._acb_poly_zeta_em_tail_naive(acb_struct.getCPtr(sum), sum, acb_struct.getCPtr(s), s, acb_struct.getCPtr(Na), Na, acb_struct.getCPtr(Nasx), Nasx, M, len, prec);
  }

  public static void _acb_poly_zeta_em_tail_bsplit(acb_struct z, acb_struct s, acb_struct Na, acb_struct Nasx, int M, int len, int prec) {
    arblibJNI._acb_poly_zeta_em_tail_bsplit(acb_struct.getCPtr(z), z, acb_struct.getCPtr(s), s, acb_struct.getCPtr(Na), Na, acb_struct.getCPtr(Nasx), Nasx, M, len, prec);
  }

  public static void _acb_poly_zeta_cpx_series(acb_struct z, acb_struct s, acb_struct a, int deflate, int d, int prec) {
    arblibJNI._acb_poly_zeta_cpx_series(acb_struct.getCPtr(z), z, acb_struct.getCPtr(s), s, acb_struct.getCPtr(a), a, deflate, d, prec);
  }

  public static void _acb_poly_zeta_series(acb_struct res, acb_struct h, int hlen, acb_struct a, int deflate, int len, int prec) {
    arblibJNI._acb_poly_zeta_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(h), h, hlen, acb_struct.getCPtr(a), a, deflate, len, prec);
  }

  public static void acb_poly_zeta_series(acb_poly_struct res, acb_poly_struct f, acb_struct a, int deflate, int n, int prec) {
    arblibJNI.acb_poly_zeta_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(f), f, acb_struct.getCPtr(a), a, deflate, n, prec);
  }

  public static void _acb_poly_polylog_cpx_zeta(acb_struct w, acb_struct s, acb_struct z, int len, int prec) {
    arblibJNI._acb_poly_polylog_cpx_zeta(acb_struct.getCPtr(w), w, acb_struct.getCPtr(s), s, acb_struct.getCPtr(z), z, len, prec);
  }

  public static void _acb_poly_polylog_cpx_small(acb_struct w, acb_struct s, acb_struct z, int len, int prec) {
    arblibJNI._acb_poly_polylog_cpx_small(acb_struct.getCPtr(w), w, acb_struct.getCPtr(s), s, acb_struct.getCPtr(z), z, len, prec);
  }

  public static void _acb_poly_polylog_cpx(acb_struct w, acb_struct s, acb_struct z, int len, int prec) {
    arblibJNI._acb_poly_polylog_cpx(acb_struct.getCPtr(w), w, acb_struct.getCPtr(s), s, acb_struct.getCPtr(z), z, len, prec);
  }

  public static void _acb_poly_polylog_series(acb_struct res, acb_struct s, int slen, acb_struct z, int len, int prec) {
    arblibJNI._acb_poly_polylog_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, slen, acb_struct.getCPtr(z), z, len, prec);
  }

  public static void acb_poly_polylog_series(acb_poly_struct res, acb_poly_struct s, acb_struct z, int n, int prec) {
    arblibJNI.acb_poly_polylog_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(s), s, acb_struct.getCPtr(z), z, n, prec);
  }

  public static void _acb_poly_agm1_series(acb_struct res, acb_struct z, int zlen, int len, int prec) {
    arblibJNI._acb_poly_agm1_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, zlen, len, prec);
  }

  public static void acb_poly_agm1_series(acb_poly_struct res, acb_poly_struct z, int n, int prec) {
    arblibJNI.acb_poly_agm1_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(z), z, n, prec);
  }

  public static void _acb_poly_elliptic_k_series(acb_struct res, acb_struct z, int zlen, int len, int prec) {
    arblibJNI._acb_poly_elliptic_k_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, zlen, len, prec);
  }

  public static void acb_poly_elliptic_k_series(acb_poly_struct res, acb_poly_struct z, int n, int prec) {
    arblibJNI.acb_poly_elliptic_k_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(z), z, n, prec);
  }

  public static void _acb_poly_elliptic_p_series(acb_struct res, acb_struct z, int zlen, acb_struct tau, int len, int prec) {
    arblibJNI._acb_poly_elliptic_p_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(z), z, zlen, acb_struct.getCPtr(tau), tau, len, prec);
  }

  public static void acb_poly_elliptic_p_series(acb_poly_struct res, acb_poly_struct z, acb_struct tau, int n, int prec) {
    arblibJNI.acb_poly_elliptic_p_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(z), z, acb_struct.getCPtr(tau), tau, n, prec);
  }

  public static void _acb_poly_erf_series(acb_struct g, acb_struct h, int hlen, int n, int prec) {
    arblibJNI._acb_poly_erf_series(acb_struct.getCPtr(g), g, acb_struct.getCPtr(h), h, hlen, n, prec);
  }

  public static void acb_poly_erf_series(acb_poly_struct g, acb_poly_struct h, int n, int prec) {
    arblibJNI.acb_poly_erf_series(acb_poly_struct.getCPtr(g), g, acb_poly_struct.getCPtr(h), h, n, prec);
  }

  public static int acb_poly_allocated_bytes(acb_poly_struct x) {
    return arblibJNI.acb_poly_allocated_bytes(acb_poly_struct.getCPtr(x), x);
  }

  public static int apow_cmp(apow_t x, apow_t y) {
    return arblibJNI.apow_cmp(apow_t.getCPtr(x), x, apow_t.getCPtr(y), y);
  }

  public static void dlog_precomp_modpe_init(dlog_precomp_struct pre, long a, long p, long e, long pe, long num) {
    arblibJNI.dlog_precomp_modpe_init(dlog_precomp_struct.getCPtr(pre), pre, a, p, e, pe, num);
  }

  public static void dlog_precomp_small_init(dlog_precomp_struct pre, long a, long mod, long n, long num) {
    arblibJNI.dlog_precomp_small_init(dlog_precomp_struct.getCPtr(pre), pre, a, mod, n, num);
  }

  public static void dlog_precomp_n_init(dlog_precomp_struct pre, long a, long mod, long n, long num) {
    arblibJNI.dlog_precomp_n_init(dlog_precomp_struct.getCPtr(pre), pre, a, mod, n, num);
  }

  public static void dlog_precomp_p_init(dlog_precomp_struct pre, long a, long mod, long p, long num) {
    arblibJNI.dlog_precomp_p_init(dlog_precomp_struct.getCPtr(pre), pre, a, mod, p, num);
  }

  public static void dlog_precomp_pe_init(dlog_precomp_struct pre, long a, long mod, long p, long e, long pe, long num) {
    arblibJNI.dlog_precomp_pe_init(dlog_precomp_struct.getCPtr(pre), pre, a, mod, p, e, pe, num);
  }

  public static void dlog_precomp_clear(dlog_precomp_struct pre) {
    arblibJNI.dlog_precomp_clear(dlog_precomp_struct.getCPtr(pre), pre);
  }

  public static long dlog_precomp(dlog_precomp_struct pre, long b) {
    return arblibJNI.dlog_precomp(dlog_precomp_struct.getCPtr(pre), pre, b);
  }

  public static long dlog_order23_init(SWIGTYPE_p_unsigned_long t, long a) {
    return arblibJNI.dlog_order23_init(SWIGTYPE_p_unsigned_long.getCPtr(t), a);
  }

  public static long dlog_table_init(dlog_table_struct t, long a, long mod) {
    return arblibJNI.dlog_table_init(dlog_table_struct.getCPtr(t), t, a, mod);
  }

  public static long dlog_crt_init(dlog_crt_struct t, long a, long mod, long n, long num) {
    return arblibJNI.dlog_crt_init(dlog_crt_struct.getCPtr(t), t, a, mod, n, num);
  }

  public static long dlog_power_init(dlog_power_struct t, long a, long mod, long p, long e, long num) {
    return arblibJNI.dlog_power_init(dlog_power_struct.getCPtr(t), t, a, mod, p, e, num);
  }

  public static long dlog_modpe_init(dlog_modpe_struct t, long a, long p, long e, long pe, long num) {
    return arblibJNI.dlog_modpe_init(dlog_modpe_struct.getCPtr(t), t, a, p, e, pe, num);
  }

  public static long dlog_bsgs_init(dlog_bsgs_struct t, long a, long mod, long n, long m) {
    return arblibJNI.dlog_bsgs_init(dlog_bsgs_struct.getCPtr(t), t, a, mod, n, m);
  }

  public static void dlog_1modpe_init(dlog_1modpe_struct t, long a1, long p, long e, nmod_t pe) {
    arblibJNI.dlog_1modpe_init(dlog_1modpe_struct.getCPtr(t), t, a1, p, e, nmod_t.getCPtr(pe), pe);
  }

  public static void dlog_rho_init(dlog_rho_struct t, long a, long mod, long n) {
    arblibJNI.dlog_rho_init(dlog_rho_struct.getCPtr(t), t, a, mod, n);
  }

  public static long dlog_once(long b, long a, nmod_t mod, long n) {
    return arblibJNI.dlog_once(b, a, nmod_t.getCPtr(mod), mod, n);
  }

  public static void dlog_order23_clear(SWIGTYPE_p_unsigned_long t) {
    arblibJNI.dlog_order23_clear(SWIGTYPE_p_unsigned_long.getCPtr(t));
  }

  public static void dlog_table_clear(dlog_table_struct t) {
    arblibJNI.dlog_table_clear(dlog_table_struct.getCPtr(t), t);
  }

  public static void dlog_crt_clear(dlog_crt_struct t) {
    arblibJNI.dlog_crt_clear(dlog_crt_struct.getCPtr(t), t);
  }

  public static void dlog_power_clear(dlog_power_struct t) {
    arblibJNI.dlog_power_clear(dlog_power_struct.getCPtr(t), t);
  }

  public static void dlog_modpe_clear(dlog_modpe_struct t) {
    arblibJNI.dlog_modpe_clear(dlog_modpe_struct.getCPtr(t), t);
  }

  public static void dlog_bsgs_clear(dlog_bsgs_struct t) {
    arblibJNI.dlog_bsgs_clear(dlog_bsgs_struct.getCPtr(t), t);
  }

  public static void dlog_rho_clear(dlog_rho_struct t) {
    arblibJNI.dlog_rho_clear(dlog_rho_struct.getCPtr(t), t);
  }

  public static long dlog_bsgs_size(long n, long num) {
    return arblibJNI.dlog_bsgs_size(n, num);
  }

  public static long dlog_order23(SWIGTYPE_p_unsigned_long t, long b) {
    return arblibJNI.dlog_order23(SWIGTYPE_p_unsigned_long.getCPtr(t), b);
  }

  public static long dlog_table(dlog_table_struct t, long b) {
    return arblibJNI.dlog_table(dlog_table_struct.getCPtr(t), t, b);
  }

  public static long dlog_crt(dlog_crt_struct t, long b) {
    return arblibJNI.dlog_crt(dlog_crt_struct.getCPtr(t), t, b);
  }

  public static long dlog_power(dlog_power_struct t, long b) {
    return arblibJNI.dlog_power(dlog_power_struct.getCPtr(t), t, b);
  }

  public static long dlog_modpe(dlog_modpe_struct t, long b) {
    return arblibJNI.dlog_modpe(dlog_modpe_struct.getCPtr(t), t, b);
  }

  public static long dlog_bsgs(dlog_bsgs_struct t, long b) {
    return arblibJNI.dlog_bsgs(dlog_bsgs_struct.getCPtr(t), t, b);
  }

  public static long dlog_rho(dlog_rho_struct t, long b) {
    return arblibJNI.dlog_rho(dlog_rho_struct.getCPtr(t), t, b);
  }

  public static long dlog_1modpe_1modp(long b1, long p, long e, long inv1p, nmod_t pe) {
    return arblibJNI.dlog_1modpe_1modp(b1, p, e, inv1p, nmod_t.getCPtr(pe), pe);
  }

  public static long dlog_1modpe(dlog_1modpe_struct t, long b1, long p, long e, nmod_t pe) {
    return arblibJNI.dlog_1modpe(dlog_1modpe_struct.getCPtr(t), t, b1, p, e, nmod_t.getCPtr(pe), pe);
  }

  public static long dlog_mod2e_1mod4(long b1, long e, long inva, nmod_t pe) {
    return arblibJNI.dlog_mod2e_1mod4(b1, e, inva, nmod_t.getCPtr(pe), pe);
  }

  public static long dlog_mod2e(dlog_modpe_struct t, long b) {
    return arblibJNI.dlog_mod2e(dlog_modpe_struct.getCPtr(t), t, b);
  }

  public static void dlog_n_factor_group(n_factor_t fac, long bound) {
    arblibJNI.dlog_n_factor_group(n_factor_t.getCPtr(fac), fac, bound);
  }

  public static long dlog_vec_pindex_factorgcd(SWIGTYPE_p_unsigned_long v, long nv, long p, nmod_t mod, long a, long na, long loga, long logm1, nmod_t order, int maxtry) {
    return arblibJNI.dlog_vec_pindex_factorgcd(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, p, nmod_t.getCPtr(mod), mod, a, na, loga, logm1, nmod_t.getCPtr(order), order, maxtry);
  }

  public static void dlog_vec_fill(SWIGTYPE_p_unsigned_long v, long nv, long x) {
    arblibJNI.dlog_vec_fill(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, x);
  }

  public static void dlog_vec_set_not_found(SWIGTYPE_p_unsigned_long v, long nv, nmod_t mod) {
    arblibJNI.dlog_vec_set_not_found(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, nmod_t.getCPtr(mod), mod);
  }

  public static void dlog_vec_loop(SWIGTYPE_p_unsigned_long v, long nv, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec_loop(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static void dlog_vec_loop_add(SWIGTYPE_p_unsigned_long v, long nv, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec_loop_add(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static void dlog_vec_eratos_add(SWIGTYPE_p_unsigned_long v, long nv, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec_eratos_add(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static void dlog_vec_eratos(SWIGTYPE_p_unsigned_long v, long nv, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec_eratos(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static void dlog_vec_sieve_add(SWIGTYPE_p_unsigned_long v, long nv, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec_sieve_add(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static void dlog_vec_sieve(SWIGTYPE_p_unsigned_long v, long nv, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec_sieve(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static void dlog_vec_add(SWIGTYPE_p_unsigned_long v, long nv, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec_add(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static void dlog_vec(SWIGTYPE_p_unsigned_long v, long nv, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static void dlog_vec_sieve_precomp(SWIGTYPE_p_unsigned_long v, long nv, dlog_precomp_struct pre, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec_sieve_precomp(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, dlog_precomp_struct.getCPtr(pre), pre, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static void dlog_vec_sieve_add_precomp(SWIGTYPE_p_unsigned_long v, long nv, dlog_precomp_struct pre, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec_sieve_add_precomp(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, dlog_precomp_struct.getCPtr(pre), pre, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static void dlog_vec_add_precomp(SWIGTYPE_p_unsigned_long v, long nv, dlog_precomp_struct pre, long a, long va, nmod_t mod, long na, nmod_t order) {
    arblibJNI.dlog_vec_add_precomp(SWIGTYPE_p_unsigned_long.getCPtr(v), nv, dlog_precomp_struct.getCPtr(pre), pre, a, va, nmod_t.getCPtr(mod), mod, na, nmod_t.getCPtr(order), order);
  }

  public static long dirichlet_group_size(dirichlet_group_struct G) {
    return arblibJNI.dirichlet_group_size(dirichlet_group_struct.getCPtr(G), G);
  }

  public static long dirichlet_group_num_primitive(dirichlet_group_struct G) {
    return arblibJNI.dirichlet_group_num_primitive(dirichlet_group_struct.getCPtr(G), G);
  }

  public static void dirichlet_group_init(dirichlet_group_struct G, long q) {
    arblibJNI.dirichlet_group_init(dirichlet_group_struct.getCPtr(G), G, q);
  }

  public static void dirichlet_subgroup_init(dirichlet_group_struct H, dirichlet_group_struct G, long h) {
    arblibJNI.dirichlet_subgroup_init(dirichlet_group_struct.getCPtr(H), H, dirichlet_group_struct.getCPtr(G), G, h);
  }

  public static void dirichlet_group_clear(dirichlet_group_struct G) {
    arblibJNI.dirichlet_group_clear(dirichlet_group_struct.getCPtr(G), G);
  }

  public static void dirichlet_group_dlog_precompute(dirichlet_group_struct G, long num) {
    arblibJNI.dirichlet_group_dlog_precompute(dirichlet_group_struct.getCPtr(G), G, num);
  }

  public static void dirichlet_group_dlog_clear(dirichlet_group_struct G) {
    arblibJNI.dirichlet_group_dlog_clear(dirichlet_group_struct.getCPtr(G), G);
  }

  public static long dirichlet_conductor_ui(dirichlet_group_struct G, long a) {
    return arblibJNI.dirichlet_conductor_ui(dirichlet_group_struct.getCPtr(G), G, a);
  }

  public static int dirichlet_parity_ui(dirichlet_group_struct G, long a) {
    return arblibJNI.dirichlet_parity_ui(dirichlet_group_struct.getCPtr(G), G, a);
  }

  public static long dirichlet_order_ui(dirichlet_group_struct G, long a) {
    return arblibJNI.dirichlet_order_ui(dirichlet_group_struct.getCPtr(G), G, a);
  }

  public static void dirichlet_char_init(dirichlet_char_struct x, dirichlet_group_struct G) {
    arblibJNI.dirichlet_char_init(dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(G), G);
  }

  public static void dirichlet_char_clear(dirichlet_char_struct x) {
    arblibJNI.dirichlet_char_clear(dirichlet_char_struct.getCPtr(x), x);
  }

  public static void dirichlet_char_print(dirichlet_group_struct G, dirichlet_char_struct x) {
    arblibJNI.dirichlet_char_print(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(x), x);
  }

  public static void dirichlet_char_set(dirichlet_char_struct x, dirichlet_group_struct G, dirichlet_char_struct y) {
    arblibJNI.dirichlet_char_set(dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(y), y);
  }

  public static int dirichlet_char_eq(dirichlet_char_struct x, dirichlet_char_struct y) {
    return arblibJNI.dirichlet_char_eq(dirichlet_char_struct.getCPtr(x), x, dirichlet_char_struct.getCPtr(y), y);
  }

  public static int dirichlet_char_eq_deep(dirichlet_group_struct G, dirichlet_char_struct x, dirichlet_char_struct y) {
    return arblibJNI.dirichlet_char_eq_deep(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(x), x, dirichlet_char_struct.getCPtr(y), y);
  }

  public static int dirichlet_parity_char(dirichlet_group_struct G, dirichlet_char_struct x) {
    return arblibJNI.dirichlet_parity_char(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(x), x);
  }

  public static long dirichlet_conductor_char(dirichlet_group_struct G, dirichlet_char_struct x) {
    return arblibJNI.dirichlet_conductor_char(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(x), x);
  }

  public static long dirichlet_order_char(dirichlet_group_struct G, dirichlet_char_struct x) {
    return arblibJNI.dirichlet_order_char(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(x), x);
  }

  public static void dirichlet_char_log(dirichlet_char_struct x, dirichlet_group_struct G, long m) {
    arblibJNI.dirichlet_char_log(dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(G), G, m);
  }

  public static long dirichlet_char_exp(dirichlet_group_struct G, dirichlet_char_struct x) {
    return arblibJNI.dirichlet_char_exp(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(x), x);
  }

  public static long _dirichlet_char_exp(dirichlet_char_struct x, dirichlet_group_struct G) {
    return arblibJNI._dirichlet_char_exp(dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(G), G);
  }

  public static void dirichlet_char_index(dirichlet_char_struct x, dirichlet_group_struct G, long j) {
    arblibJNI.dirichlet_char_index(dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(G), G, j);
  }

  public static long dirichlet_index_char(dirichlet_group_struct G, dirichlet_char_struct x) {
    return arblibJNI.dirichlet_index_char(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(x), x);
  }

  public static void dirichlet_char_one(dirichlet_char_struct x, dirichlet_group_struct G) {
    arblibJNI.dirichlet_char_one(dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(G), G);
  }

  public static void dirichlet_char_first_primitive(dirichlet_char_struct x, dirichlet_group_struct G) {
    arblibJNI.dirichlet_char_first_primitive(dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(G), G);
  }

  public static int dirichlet_char_next(dirichlet_char_struct x, dirichlet_group_struct G) {
    return arblibJNI.dirichlet_char_next(dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(G), G);
  }

  public static int dirichlet_char_next_primitive(dirichlet_char_struct x, dirichlet_group_struct G) {
    return arblibJNI.dirichlet_char_next_primitive(dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(G), G);
  }

  public static void dirichlet_char_mul(dirichlet_char_struct c, dirichlet_group_struct G, dirichlet_char_struct a, dirichlet_char_struct b) {
    arblibJNI.dirichlet_char_mul(dirichlet_char_struct.getCPtr(c), c, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(a), a, dirichlet_char_struct.getCPtr(b), b);
  }

  public static void dirichlet_char_pow(dirichlet_char_struct c, dirichlet_group_struct G, dirichlet_char_struct a, long n) {
    arblibJNI.dirichlet_char_pow(dirichlet_char_struct.getCPtr(c), c, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(a), a, n);
  }

  public static void dirichlet_char_lower(dirichlet_char_struct y, dirichlet_group_struct H, dirichlet_char_struct x, dirichlet_group_struct G) {
    arblibJNI.dirichlet_char_lower(dirichlet_char_struct.getCPtr(y), y, dirichlet_group_struct.getCPtr(H), H, dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(G), G);
  }

  public static void dirichlet_char_lift(dirichlet_char_struct y, dirichlet_group_struct G, dirichlet_char_struct x, dirichlet_group_struct H) {
    arblibJNI.dirichlet_char_lift(dirichlet_char_struct.getCPtr(y), y, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(x), x, dirichlet_group_struct.getCPtr(H), H);
  }

  public static long dirichlet_pairing(dirichlet_group_struct G, long m, long n) {
    return arblibJNI.dirichlet_pairing(dirichlet_group_struct.getCPtr(G), G, m, n);
  }

  public static long dirichlet_pairing_char(dirichlet_group_struct G, dirichlet_char_struct a, dirichlet_char_struct b) {
    return arblibJNI.dirichlet_pairing_char(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(a), a, dirichlet_char_struct.getCPtr(b), b);
  }

  public static int dirichlet_char_is_principal(dirichlet_group_struct G, dirichlet_char_struct chi) {
    return arblibJNI.dirichlet_char_is_principal(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi);
  }

  public static int dirichlet_char_is_real(dirichlet_group_struct G, dirichlet_char_struct chi) {
    return arblibJNI.dirichlet_char_is_real(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi);
  }

  public static int dirichlet_char_is_primitive(dirichlet_group_struct G, dirichlet_char_struct chi) {
    return arblibJNI.dirichlet_char_is_primitive(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi);
  }

  public static long dirichlet_chi(dirichlet_group_struct G, dirichlet_char_struct chi, long n) {
    return arblibJNI.dirichlet_chi(dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, n);
  }

  public static void dirichlet_vec_set_null(SWIGTYPE_p_unsigned_long v, dirichlet_group_struct G, int nv) {
    arblibJNI.dirichlet_vec_set_null(SWIGTYPE_p_unsigned_long.getCPtr(v), dirichlet_group_struct.getCPtr(G), G, nv);
  }

  public static void dirichlet_chi_vec_loop(SWIGTYPE_p_unsigned_long v, dirichlet_group_struct G, dirichlet_char_struct chi, int nv) {
    arblibJNI.dirichlet_chi_vec_loop(SWIGTYPE_p_unsigned_long.getCPtr(v), dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, nv);
  }

  public static void dirichlet_chi_vec_primeloop(SWIGTYPE_p_unsigned_long v, dirichlet_group_struct G, dirichlet_char_struct chi, int nv) {
    arblibJNI.dirichlet_chi_vec_primeloop(SWIGTYPE_p_unsigned_long.getCPtr(v), dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, nv);
  }

  public static void dirichlet_chi_vec(SWIGTYPE_p_unsigned_long v, dirichlet_group_struct G, dirichlet_char_struct chi, int nv) {
    arblibJNI.dirichlet_chi_vec(SWIGTYPE_p_unsigned_long.getCPtr(v), dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, nv);
  }

  public static void dirichlet_chi_vec_loop_order(SWIGTYPE_p_unsigned_long v, dirichlet_group_struct G, dirichlet_char_struct chi, long order, int nv) {
    arblibJNI.dirichlet_chi_vec_loop_order(SWIGTYPE_p_unsigned_long.getCPtr(v), dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, order, nv);
  }

  public static void dirichlet_chi_vec_primeloop_order(SWIGTYPE_p_unsigned_long v, dirichlet_group_struct G, dirichlet_char_struct chi, long order, int nv) {
    arblibJNI.dirichlet_chi_vec_primeloop_order(SWIGTYPE_p_unsigned_long.getCPtr(v), dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, order, nv);
  }

  public static void dirichlet_chi_vec_order(SWIGTYPE_p_unsigned_long v, dirichlet_group_struct G, dirichlet_char_struct chi, long order, int nv) {
    arblibJNI.dirichlet_chi_vec_order(SWIGTYPE_p_unsigned_long.getCPtr(v), dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, order, nv);
  }

  public static void acb_dirichlet_powsum_term(acb_struct res, arb_struct log_prev, SWIGTYPE_p_unsigned_long prev, acb_struct s, long k, int integer, int critical_line, int len, int prec) {
    arblibJNI.acb_dirichlet_powsum_term(acb_struct.getCPtr(res), res, arb_struct.getCPtr(log_prev), log_prev, SWIGTYPE_p_unsigned_long.getCPtr(prev), acb_struct.getCPtr(s), s, k, integer, critical_line, len, prec);
  }

  public static void acb_dirichlet_powsum_sieved(acb_struct z, acb_struct s, long n, int len, int prec) {
    arblibJNI.acb_dirichlet_powsum_sieved(acb_struct.getCPtr(z), z, acb_struct.getCPtr(s), s, n, len, prec);
  }

  public static void acb_dirichlet_powsum_smooth(acb_struct z, acb_struct s, long n, int len, int prec) {
    arblibJNI.acb_dirichlet_powsum_smooth(acb_struct.getCPtr(z), z, acb_struct.getCPtr(s), s, n, len, prec);
  }

  public static void acb_dirichlet_zeta_bound(mag_struct res, acb_struct s) {
    arblibJNI.acb_dirichlet_zeta_bound(mag_struct.getCPtr(res), res, acb_struct.getCPtr(s), s);
  }

  public static void acb_dirichlet_zeta_deriv_bound(mag_struct der1, mag_struct der2, acb_struct s) {
    arblibJNI.acb_dirichlet_zeta_deriv_bound(mag_struct.getCPtr(der1), der1, mag_struct.getCPtr(der2), der2, acb_struct.getCPtr(s), s);
  }

  public static void acb_dirichlet_zeta_rs_f_coeffs(acb_struct c, arb_struct p, int N, int prec) {
    arblibJNI.acb_dirichlet_zeta_rs_f_coeffs(acb_struct.getCPtr(c), c, arb_struct.getCPtr(p), p, N, prec);
  }

  public static void acb_dirichlet_zeta_rs_d_coeffs(arb_struct d, arb_struct sigma, int k, int prec) {
    arblibJNI.acb_dirichlet_zeta_rs_d_coeffs(arb_struct.getCPtr(d), d, arb_struct.getCPtr(sigma), sigma, k, prec);
  }

  public static void acb_dirichlet_zeta_rs_bound(mag_struct err, acb_struct s, int K) {
    arblibJNI.acb_dirichlet_zeta_rs_bound(mag_struct.getCPtr(err), err, acb_struct.getCPtr(s), s, K);
  }

  public static void acb_dirichlet_zeta_rs_r(acb_struct res, acb_struct s, int K, int prec) {
    arblibJNI.acb_dirichlet_zeta_rs_r(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, K, prec);
  }

  public static void acb_dirichlet_zeta_rs(acb_struct res, acb_struct s, int K, int prec) {
    arblibJNI.acb_dirichlet_zeta_rs(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, K, prec);
  }

  public static void acb_dirichlet_zeta(acb_struct res, acb_struct s, int prec) {
    arblibJNI.acb_dirichlet_zeta(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, prec);
  }

  public static void acb_dirichlet_zeta_jet_rs(acb_struct res, acb_struct s, int len, int prec) {
    arblibJNI.acb_dirichlet_zeta_jet_rs(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, len, prec);
  }

  public static void acb_dirichlet_zeta_jet(acb_struct res, acb_struct s, int deflate, int len, int prec) {
    arblibJNI.acb_dirichlet_zeta_jet(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, deflate, len, prec);
  }

  public static void acb_dirichlet_hurwitz(acb_struct res, acb_struct s, acb_struct a, int prec) {
    arblibJNI.acb_dirichlet_hurwitz(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, acb_struct.getCPtr(a), a, prec);
  }

  public static void acb_dirichlet_stieltjes(acb_struct res, SWIGTYPE_p_long n, acb_struct a, int prec) {
    arblibJNI.acb_dirichlet_stieltjes(acb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), acb_struct.getCPtr(a), a, prec);
  }

  public static void acb_dirichlet_hurwitz_precomp_init(acb_dirichlet_hurwitz_precomp_struct pre, acb_struct s, int deflate, int A, int K, int N, int prec) {
    arblibJNI.acb_dirichlet_hurwitz_precomp_init(acb_dirichlet_hurwitz_precomp_struct.getCPtr(pre), pre, acb_struct.getCPtr(s), s, deflate, A, K, N, prec);
  }

  public static void acb_dirichlet_hurwitz_precomp_init_num(acb_dirichlet_hurwitz_precomp_struct pre, acb_struct s, int deflate, double num_eval, int prec) {
    arblibJNI.acb_dirichlet_hurwitz_precomp_init_num(acb_dirichlet_hurwitz_precomp_struct.getCPtr(pre), pre, acb_struct.getCPtr(s), s, deflate, num_eval, prec);
  }

  public static void acb_dirichlet_hurwitz_precomp_clear(acb_dirichlet_hurwitz_precomp_struct pre) {
    arblibJNI.acb_dirichlet_hurwitz_precomp_clear(acb_dirichlet_hurwitz_precomp_struct.getCPtr(pre), pre);
  }

  public static void acb_dirichlet_hurwitz_precomp_bound(mag_struct res, acb_struct s, int A, int K, int N) {
    arblibJNI.acb_dirichlet_hurwitz_precomp_bound(mag_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, A, K, N);
  }

  public static void acb_dirichlet_hurwitz_precomp_eval(acb_struct res, acb_dirichlet_hurwitz_precomp_struct pre, long p, long q, int prec) {
    arblibJNI.acb_dirichlet_hurwitz_precomp_eval(acb_struct.getCPtr(res), res, acb_dirichlet_hurwitz_precomp_struct.getCPtr(pre), pre, p, q, prec);
  }

  public static void acb_dirichlet_hurwitz_precomp_choose_param(SWIGTYPE_p_unsigned_long A, SWIGTYPE_p_unsigned_long K, SWIGTYPE_p_unsigned_long N, acb_struct s, double num_eval, int prec) {
    arblibJNI.acb_dirichlet_hurwitz_precomp_choose_param(SWIGTYPE_p_unsigned_long.getCPtr(A), SWIGTYPE_p_unsigned_long.getCPtr(K), SWIGTYPE_p_unsigned_long.getCPtr(N), acb_struct.getCPtr(s), s, num_eval, prec);
  }

  public static void _acb_dirichlet_euler_product_real_ui(arb_struct res, long s, SWIGTYPE_p_signed_char chi, int mod, int reciprocal, int prec) {
    arblibJNI._acb_dirichlet_euler_product_real_ui(arb_struct.getCPtr(res), res, s, SWIGTYPE_p_signed_char.getCPtr(chi), mod, reciprocal, prec);
  }

  public static void acb_dirichlet_eta(acb_struct res, acb_struct s, int prec) {
    arblibJNI.acb_dirichlet_eta(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, prec);
  }

  public static void acb_dirichlet_xi(acb_struct res, acb_struct s, int prec) {
    arblibJNI.acb_dirichlet_xi(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, prec);
  }

  public static void acb_dirichlet_pairing(acb_struct res, dirichlet_group_struct G, long m, long n, int prec) {
    arblibJNI.acb_dirichlet_pairing(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, m, n, prec);
  }

  public static void acb_dirichlet_pairing_char(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct a, dirichlet_char_struct b, int prec) {
    arblibJNI.acb_dirichlet_pairing_char(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(a), a, dirichlet_char_struct.getCPtr(b), b, prec);
  }

  public static void acb_dirichlet_roots_init(acb_dirichlet_roots_struct t, long order, int num, int prec) {
    arblibJNI.acb_dirichlet_roots_init(acb_dirichlet_roots_struct.getCPtr(t), t, order, num, prec);
  }

  public static void acb_dirichlet_roots_clear(acb_dirichlet_roots_struct t) {
    arblibJNI.acb_dirichlet_roots_clear(acb_dirichlet_roots_struct.getCPtr(t), t);
  }

  public static void acb_dirichlet_root(acb_struct z, acb_dirichlet_roots_struct t, long n, int prec) {
    arblibJNI.acb_dirichlet_root(acb_struct.getCPtr(z), z, acb_dirichlet_roots_struct.getCPtr(t), t, n, prec);
  }

  public static void acb_dirichlet_chi(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi, long n, int prec) {
    arblibJNI.acb_dirichlet_chi(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, n, prec);
  }

  public static void acb_dirichlet_chi_vec(acb_struct v, dirichlet_group_struct G, dirichlet_char_struct chi, int nv, int prec) {
    arblibJNI.acb_dirichlet_chi_vec(acb_struct.getCPtr(v), v, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, nv, prec);
  }

  public static void acb_dirichlet_arb_quadratic_powers(arb_struct v, int nv, arb_struct x, int prec) {
    arblibJNI.acb_dirichlet_arb_quadratic_powers(arb_struct.getCPtr(v), v, nv, arb_struct.getCPtr(x), x, prec);
  }

  public static void acb_dirichlet_qseries_arb(acb_struct res, acb_struct a, arb_struct x, int len, int prec) {
    arblibJNI.acb_dirichlet_qseries_arb(acb_struct.getCPtr(res), res, acb_struct.getCPtr(a), a, arb_struct.getCPtr(x), x, len, prec);
  }

  public static void acb_dirichlet_qseries_arb_powers_naive(acb_struct res, arb_struct x, int parity, SWIGTYPE_p_unsigned_long a, acb_dirichlet_roots_struct z, int len, int prec) {
    arblibJNI.acb_dirichlet_qseries_arb_powers_naive(acb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x, parity, SWIGTYPE_p_unsigned_long.getCPtr(a), acb_dirichlet_roots_struct.getCPtr(z), z, len, prec);
  }

  public static void acb_dirichlet_qseries_arb_powers_smallorder(acb_struct res, arb_struct x, int parity, SWIGTYPE_p_unsigned_long a, acb_dirichlet_roots_struct z, int len, int prec) {
    arblibJNI.acb_dirichlet_qseries_arb_powers_smallorder(acb_struct.getCPtr(res), res, arb_struct.getCPtr(x), x, parity, SWIGTYPE_p_unsigned_long.getCPtr(a), acb_dirichlet_roots_struct.getCPtr(z), z, len, prec);
  }

  public static long acb_dirichlet_theta_length_d(long q, double x, int prec) {
    return arblibJNI.acb_dirichlet_theta_length_d(q, x, prec);
  }

  public static long acb_dirichlet_theta_length(long q, arb_struct x, int prec) {
    return arblibJNI.acb_dirichlet_theta_length(q, arb_struct.getCPtr(x), x, prec);
  }

  public static void mag_tail_kexpk2_arb(mag_struct res, arb_struct a, long n) {
    arblibJNI.mag_tail_kexpk2_arb(mag_struct.getCPtr(res), res, arb_struct.getCPtr(a), a, n);
  }

  public static void _acb_dirichlet_theta_argument_at_arb(arb_struct xt, long q, arb_struct t, int prec) {
    arblibJNI._acb_dirichlet_theta_argument_at_arb(arb_struct.getCPtr(xt), xt, q, arb_struct.getCPtr(t), t, prec);
  }

  public static void acb_dirichlet_theta_arb(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi, arb_struct t, int prec) {
    arblibJNI.acb_dirichlet_theta_arb(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, arb_struct.getCPtr(t), t, prec);
  }

  public static void acb_dirichlet_ui_theta_arb(acb_struct res, dirichlet_group_struct G, long a, arb_struct t, int prec) {
    arblibJNI.acb_dirichlet_ui_theta_arb(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, a, arb_struct.getCPtr(t), t, prec);
  }

  public static void acb_dirichlet_gauss_sum_naive(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_gauss_sum_naive(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static void acb_dirichlet_gauss_sum_factor(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_gauss_sum_factor(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static void acb_dirichlet_gauss_sum_order2(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_gauss_sum_order2(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static void acb_dirichlet_gauss_sum_theta(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_gauss_sum_theta(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static void acb_dirichlet_gauss_sum(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_gauss_sum(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static void acb_dirichlet_root_number_theta(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_root_number_theta(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static void acb_dirichlet_root_number(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_root_number(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static void acb_dirichlet_si_poly_evaluate(acb_struct res, SWIGTYPE_p_long v, int len, acb_struct z, int prec) {
    arblibJNI.acb_dirichlet_si_poly_evaluate(acb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(v), len, acb_struct.getCPtr(z), z, prec);
  }

  public static void acb_dirichlet_jacobi_sum_naive(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi1, dirichlet_char_struct chi2, int prec) {
    arblibJNI.acb_dirichlet_jacobi_sum_naive(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi1), chi1, dirichlet_char_struct.getCPtr(chi2), chi2, prec);
  }

  public static long jacobi_one_prime(long p, long e, long pe, long cond) {
    return arblibJNI.jacobi_one_prime(p, e, pe, cond);
  }

  public static void acb_dirichlet_jacobi_sum_factor(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi1, dirichlet_char_struct chi2, int prec) {
    arblibJNI.acb_dirichlet_jacobi_sum_factor(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi1), chi1, dirichlet_char_struct.getCPtr(chi2), chi2, prec);
  }

  public static void acb_dirichlet_jacobi_sum_gauss(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi1, dirichlet_char_struct chi2, int prec) {
    arblibJNI.acb_dirichlet_jacobi_sum_gauss(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi1), chi1, dirichlet_char_struct.getCPtr(chi2), chi2, prec);
  }

  public static void acb_dirichlet_jacobi_sum(acb_struct res, dirichlet_group_struct G, dirichlet_char_struct chi1, dirichlet_char_struct chi2, int prec) {
    arblibJNI.acb_dirichlet_jacobi_sum(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi1), chi1, dirichlet_char_struct.getCPtr(chi2), chi2, prec);
  }

  public static void acb_dirichlet_jacobi_sum_ui(acb_struct res, dirichlet_group_struct G, long a, long b, int prec) {
    arblibJNI.acb_dirichlet_jacobi_sum_ui(acb_struct.getCPtr(res), res, dirichlet_group_struct.getCPtr(G), G, a, b, prec);
  }

  public static void acb_dirichlet_l_euler_product(acb_struct res, acb_struct s, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_l_euler_product(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static void acb_dirichlet_l_hurwitz(acb_struct res, acb_struct s, acb_dirichlet_hurwitz_precomp_struct precomp, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_l_hurwitz(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, acb_dirichlet_hurwitz_precomp_struct.getCPtr(precomp), precomp, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static void acb_dirichlet_l(acb_struct res, acb_struct s, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_l(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static void acb_dirichlet_l_vec_hurwitz(acb_struct res, acb_struct s, acb_dirichlet_hurwitz_precomp_struct precomp, dirichlet_group_struct G, int prec) {
    arblibJNI.acb_dirichlet_l_vec_hurwitz(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, acb_dirichlet_hurwitz_precomp_struct.getCPtr(precomp), precomp, dirichlet_group_struct.getCPtr(G), G, prec);
  }

  public static void acb_dirichlet_l_jet(acb_struct res, acb_struct s, dirichlet_group_struct G, dirichlet_char_struct chi, int deflate, int len, int prec) {
    arblibJNI.acb_dirichlet_l_jet(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, deflate, len, prec);
  }

  public static void _acb_dirichlet_l_series(acb_struct res, acb_struct s, int slen, dirichlet_group_struct G, dirichlet_char_struct chi, int deflate, int len, int prec) {
    arblibJNI._acb_dirichlet_l_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, slen, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, deflate, len, prec);
  }

  public static void acb_dirichlet_l_series(acb_poly_struct res, acb_poly_struct s, dirichlet_group_struct G, dirichlet_char_struct chi, int deflate, int len, int prec) {
    arblibJNI.acb_dirichlet_l_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(s), s, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, deflate, len, prec);
  }

  public static void acb_dirichlet_hardy_theta(acb_struct res, acb_struct t, dirichlet_group_struct G, dirichlet_char_struct chi, int len, int prec) {
    arblibJNI.acb_dirichlet_hardy_theta(acb_struct.getCPtr(res), res, acb_struct.getCPtr(t), t, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, len, prec);
  }

  public static void acb_dirichlet_hardy_z(acb_struct res, acb_struct t, dirichlet_group_struct G, dirichlet_char_struct chi, int len, int prec) {
    arblibJNI.acb_dirichlet_hardy_z(acb_struct.getCPtr(res), res, acb_struct.getCPtr(t), t, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, len, prec);
  }

  public static void _acb_dirichlet_hardy_theta_series(acb_struct res, acb_struct s, int slen, dirichlet_group_struct G, dirichlet_char_struct chi, int len, int prec) {
    arblibJNI._acb_dirichlet_hardy_theta_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, slen, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, len, prec);
  }

  public static void acb_dirichlet_hardy_theta_series(acb_poly_struct res, acb_poly_struct s, dirichlet_group_struct G, dirichlet_char_struct chi, int len, int prec) {
    arblibJNI.acb_dirichlet_hardy_theta_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(s), s, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, len, prec);
  }

  public static void _acb_dirichlet_hardy_z_series(acb_struct res, acb_struct s, int slen, dirichlet_group_struct G, dirichlet_char_struct chi, int len, int prec) {
    arblibJNI._acb_dirichlet_hardy_z_series(acb_struct.getCPtr(res), res, acb_struct.getCPtr(s), s, slen, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, len, prec);
  }

  public static void acb_dirichlet_hardy_z_series(acb_poly_struct res, acb_poly_struct s, dirichlet_group_struct G, dirichlet_char_struct chi, int len, int prec) {
    arblibJNI.acb_dirichlet_hardy_z_series(acb_poly_struct.getCPtr(res), res, acb_poly_struct.getCPtr(s), s, dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, len, prec);
  }

  public static void acb_dirichlet_gram_point(arb_struct res, SWIGTYPE_p_long n, dirichlet_group_struct G, dirichlet_char_struct chi, int prec) {
    arblibJNI.acb_dirichlet_gram_point(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), dirichlet_group_struct.getCPtr(G), G, dirichlet_char_struct.getCPtr(chi), chi, prec);
  }

  public static long acb_dirichlet_turing_method_bound(SWIGTYPE_p_long p) {
    return arblibJNI.acb_dirichlet_turing_method_bound(SWIGTYPE_p_long.getCPtr(p));
  }

  public static int _acb_dirichlet_definite_hardy_z(arb_struct res, arf_struct t, SWIGTYPE_p_long pprec) {
    return arblibJNI._acb_dirichlet_definite_hardy_z(arb_struct.getCPtr(res), res, arf_struct.getCPtr(t), t, SWIGTYPE_p_long.getCPtr(pprec));
  }

  public static void _acb_dirichlet_isolate_gram_hardy_z_zero(arf_struct a, arf_struct b, SWIGTYPE_p_long n) {
    arblibJNI._acb_dirichlet_isolate_gram_hardy_z_zero(arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(n));
  }

  public static void _acb_dirichlet_isolate_rosser_hardy_z_zero(arf_struct a, arf_struct b, SWIGTYPE_p_long n) {
    arblibJNI._acb_dirichlet_isolate_rosser_hardy_z_zero(arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(n));
  }

  public static void _acb_dirichlet_isolate_turing_hardy_z_zero(arf_struct a, arf_struct b, SWIGTYPE_p_long n) {
    arblibJNI._acb_dirichlet_isolate_turing_hardy_z_zero(arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(n));
  }

  public static void acb_dirichlet_isolate_hardy_z_zero(arf_struct a, arf_struct b, SWIGTYPE_p_long n) {
    arblibJNI.acb_dirichlet_isolate_hardy_z_zero(arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b, SWIGTYPE_p_long.getCPtr(n));
  }

  public static void _acb_dirichlet_refine_hardy_z_zero(arb_struct res, arf_struct a, arf_struct b, int prec) {
    arblibJNI._acb_dirichlet_refine_hardy_z_zero(arb_struct.getCPtr(res), res, arf_struct.getCPtr(a), a, arf_struct.getCPtr(b), b, prec);
  }

  public static void acb_dirichlet_hardy_z_zeros(arb_struct res, SWIGTYPE_p_long n, int len, int prec) {
    arblibJNI.acb_dirichlet_hardy_z_zeros(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), len, prec);
  }

  public static void acb_dirichlet_zeta_zeros(acb_struct res, SWIGTYPE_p_long n, int len, int prec) {
    arblibJNI.acb_dirichlet_zeta_zeros(acb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), len, prec);
  }

  public static void _acb_dirichlet_exact_zeta_nzeros(SWIGTYPE_p_long res, arf_struct t) {
    arblibJNI._acb_dirichlet_exact_zeta_nzeros(SWIGTYPE_p_long.getCPtr(res), arf_struct.getCPtr(t), t);
  }

  public static void acb_dirichlet_zeta_nzeros(arb_struct res, arb_struct t, int prec) {
    arblibJNI.acb_dirichlet_zeta_nzeros(arb_struct.getCPtr(res), res, arb_struct.getCPtr(t), t, prec);
  }

  public static void acb_dirichlet_backlund_s(arb_struct res, arb_struct t, int prec) {
    arblibJNI.acb_dirichlet_backlund_s(arb_struct.getCPtr(res), res, arb_struct.getCPtr(t), t, prec);
  }

  public static void acb_dirichlet_backlund_s_bound(mag_struct res, arb_struct t) {
    arblibJNI.acb_dirichlet_backlund_s_bound(mag_struct.getCPtr(res), res, arb_struct.getCPtr(t), t);
  }

  public static void acb_dirichlet_zeta_nzeros_gram(SWIGTYPE_p_long res, SWIGTYPE_p_long n) {
    arblibJNI.acb_dirichlet_zeta_nzeros_gram(SWIGTYPE_p_long.getCPtr(res), SWIGTYPE_p_long.getCPtr(n));
  }

  public static int acb_dirichlet_backlund_s_gram(SWIGTYPE_p_long n) {
    return arblibJNI.acb_dirichlet_backlund_s_gram(SWIGTYPE_p_long.getCPtr(n));
  }

  public static void acb_dirichlet_hardy_z_zero(arb_struct res, SWIGTYPE_p_long n, int prec) {
    arblibJNI.acb_dirichlet_hardy_z_zero(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), prec);
  }

  public static void acb_dirichlet_zeta_zero(acb_struct res, SWIGTYPE_p_long n, int prec) {
    arblibJNI.acb_dirichlet_zeta_zero(acb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), prec);
  }

  public static void acb_dirichlet_platt_c_precomp_init(acb_dirichlet_platt_c_precomp_struct pre, int sigma, arb_struct h, long k, int prec) {
    arblibJNI.acb_dirichlet_platt_c_precomp_init(acb_dirichlet_platt_c_precomp_struct.getCPtr(pre), pre, sigma, arb_struct.getCPtr(h), h, k, prec);
  }

  public static void acb_dirichlet_platt_c_precomp_clear(acb_dirichlet_platt_c_precomp_struct pre) {
    arblibJNI.acb_dirichlet_platt_c_precomp_clear(acb_dirichlet_platt_c_precomp_struct.getCPtr(pre), pre);
  }

  public static void acb_dirichlet_platt_c_bound_precomp(arb_struct res, acb_dirichlet_platt_c_precomp_struct pre, int sigma, arb_struct t0, arb_struct h, int k, int prec) {
    arblibJNI.acb_dirichlet_platt_c_bound_precomp(arb_struct.getCPtr(res), res, acb_dirichlet_platt_c_precomp_struct.getCPtr(pre), pre, sigma, arb_struct.getCPtr(t0), t0, arb_struct.getCPtr(h), h, k, prec);
  }

  public static void acb_dirichlet_platt_c_bound(arb_struct res, int sigma, arb_struct t0, arb_struct h, int k, int prec) {
    arblibJNI.acb_dirichlet_platt_c_bound(arb_struct.getCPtr(res), res, sigma, arb_struct.getCPtr(t0), t0, arb_struct.getCPtr(h), h, k, prec);
  }

  public static void acb_dirichlet_platt_i_precomp_init(acb_dirichlet_platt_i_precomp_struct pre, int A, arb_struct H, int sigma, int prec) {
    arblibJNI.acb_dirichlet_platt_i_precomp_init(acb_dirichlet_platt_i_precomp_struct.getCPtr(pre), pre, A, arb_struct.getCPtr(H), H, sigma, prec);
  }

  public static void acb_dirichlet_platt_i_precomp_clear(acb_dirichlet_platt_i_precomp_struct pre) {
    arblibJNI.acb_dirichlet_platt_i_precomp_clear(acb_dirichlet_platt_i_precomp_struct.getCPtr(pre), pre);
  }

  public static void acb_dirichlet_platt_i_bound_precomp(arb_struct res, acb_dirichlet_platt_i_precomp_struct pre_i, acb_dirichlet_platt_c_precomp_struct pre_c, arb_struct t0, int A, arb_struct H, int sigma, int prec) {
    arblibJNI.acb_dirichlet_platt_i_bound_precomp(arb_struct.getCPtr(res), res, acb_dirichlet_platt_i_precomp_struct.getCPtr(pre_i), pre_i, acb_dirichlet_platt_c_precomp_struct.getCPtr(pre_c), pre_c, arb_struct.getCPtr(t0), t0, A, arb_struct.getCPtr(H), H, sigma, prec);
  }

  public static void acb_dirichlet_platt_i_bound(arb_struct res, arb_struct t0, int A, arb_struct H, int sigma, int prec) {
    arblibJNI.acb_dirichlet_platt_i_bound(arb_struct.getCPtr(res), res, arb_struct.getCPtr(t0), t0, A, arb_struct.getCPtr(H), H, sigma, prec);
  }

  public static void acb_dirichlet_platt_ws_precomp_init(acb_dirichlet_platt_ws_precomp_struct pre, int A, arb_struct H, int sigma, int prec) {
    arblibJNI.acb_dirichlet_platt_ws_precomp_init(acb_dirichlet_platt_ws_precomp_struct.getCPtr(pre), pre, A, arb_struct.getCPtr(H), H, sigma, prec);
  }

  public static void acb_dirichlet_platt_ws_precomp_clear(acb_dirichlet_platt_ws_precomp_struct pre) {
    arblibJNI.acb_dirichlet_platt_ws_precomp_clear(acb_dirichlet_platt_ws_precomp_struct.getCPtr(pre), pre);
  }

  public static void acb_dirichlet_platt_ws_interpolation_precomp(arb_struct res, arf_struct deriv, acb_dirichlet_platt_ws_precomp_struct pre, arb_struct t0, arb_struct p, SWIGTYPE_p_long T, int A, int B, int Ns_max, arb_struct H, int sigma, int prec) {
    arblibJNI.acb_dirichlet_platt_ws_interpolation_precomp(arb_struct.getCPtr(res), res, arf_struct.getCPtr(deriv), deriv, acb_dirichlet_platt_ws_precomp_struct.getCPtr(pre), pre, arb_struct.getCPtr(t0), t0, arb_struct.getCPtr(p), p, SWIGTYPE_p_long.getCPtr(T), A, B, Ns_max, arb_struct.getCPtr(H), H, sigma, prec);
  }

  public static void acb_dirichlet_platt_ws_interpolation(arb_struct res, arf_struct deriv, arb_struct t0, arb_struct p, SWIGTYPE_p_long T, int A, int B, int Ns_max, arb_struct H, int sigma, int prec) {
    arblibJNI.acb_dirichlet_platt_ws_interpolation(arb_struct.getCPtr(res), res, arf_struct.getCPtr(deriv), deriv, arb_struct.getCPtr(t0), t0, arb_struct.getCPtr(p), p, SWIGTYPE_p_long.getCPtr(T), A, B, Ns_max, arb_struct.getCPtr(H), H, sigma, prec);
  }

  public static void acb_dirichlet_platt_bound_C3(arb_struct res, arb_struct t0, int A, arb_struct H, int Ns, int prec) {
    arblibJNI.acb_dirichlet_platt_bound_C3(arb_struct.getCPtr(res), res, arb_struct.getCPtr(t0), t0, A, arb_struct.getCPtr(H), H, Ns, prec);
  }

  public static void acb_dirichlet_platt_scaled_lambda(arb_struct res, arb_struct t, int prec) {
    arblibJNI.acb_dirichlet_platt_scaled_lambda(arb_struct.getCPtr(res), res, arb_struct.getCPtr(t), t, prec);
  }

  public static void acb_dirichlet_platt_scaled_lambda_vec(arb_struct res, SWIGTYPE_p_long T, int A, int B, int prec) {
    arblibJNI.acb_dirichlet_platt_scaled_lambda_vec(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(T), A, B, prec);
  }

  public static void acb_dirichlet_platt_beta(arb_struct res, arb_struct t, int prec) {
    arblibJNI.acb_dirichlet_platt_beta(arb_struct.getCPtr(res), res, arb_struct.getCPtr(t), t, prec);
  }

  public static void acb_dirichlet_platt_lemma_32(arb_struct out, arb_struct h, arb_struct t0, arb_struct x, int prec) {
    arblibJNI.acb_dirichlet_platt_lemma_32(arb_struct.getCPtr(out), out, arb_struct.getCPtr(h), h, arb_struct.getCPtr(t0), t0, arb_struct.getCPtr(x), x, prec);
  }

  public static void acb_dirichlet_platt_lemma_A5(arb_struct out, int B, arb_struct h, int k, int prec) {
    arblibJNI.acb_dirichlet_platt_lemma_A5(arb_struct.getCPtr(out), out, B, arb_struct.getCPtr(h), h, k, prec);
  }

  public static void acb_dirichlet_platt_lemma_A7(arb_struct out, int sigma, arb_struct t0, arb_struct h, int k, int A, int prec) {
    arblibJNI.acb_dirichlet_platt_lemma_A7(arb_struct.getCPtr(out), out, sigma, arb_struct.getCPtr(t0), t0, arb_struct.getCPtr(h), h, k, A, prec);
  }

  public static void acb_dirichlet_platt_lemma_A9(arb_struct out, int sigma, arb_struct t0, arb_struct h, int A, int prec) {
    arblibJNI.acb_dirichlet_platt_lemma_A9(arb_struct.getCPtr(out), out, sigma, arb_struct.getCPtr(t0), t0, arb_struct.getCPtr(h), h, A, prec);
  }

  public static void acb_dirichlet_platt_lemma_A11(arb_struct out, arb_struct t0, arb_struct h, int B, int prec) {
    arblibJNI.acb_dirichlet_platt_lemma_A11(arb_struct.getCPtr(out), out, arb_struct.getCPtr(t0), t0, arb_struct.getCPtr(h), h, B, prec);
  }

  public static void acb_dirichlet_platt_lemma_B1(arb_struct out, int sigma, arb_struct t0, arb_struct h, int J, int prec) {
    arblibJNI.acb_dirichlet_platt_lemma_B1(arb_struct.getCPtr(out), out, sigma, arb_struct.getCPtr(t0), t0, arb_struct.getCPtr(h), h, J, prec);
  }

  public static void acb_dirichlet_platt_lemma_B2(arb_struct out, int K, arb_struct h, arb_struct xi, int prec) {
    arblibJNI.acb_dirichlet_platt_lemma_B2(arb_struct.getCPtr(out), out, K, arb_struct.getCPtr(h), h, arb_struct.getCPtr(xi), xi, prec);
  }

  public static void acb_dirichlet_platt_multieval(arb_struct out, SWIGTYPE_p_long T, int A, int B, arb_struct h, int J, int K, int sigma, int prec) {
    arblibJNI.acb_dirichlet_platt_multieval(arb_struct.getCPtr(out), out, SWIGTYPE_p_long.getCPtr(T), A, B, arb_struct.getCPtr(h), h, J, K, sigma, prec);
  }

  public static int _acb_dirichlet_platt_local_hardy_z_zeros(arb_struct res, SWIGTYPE_p_long n, int len, SWIGTYPE_p_long T, int A, int B, arb_struct h, int J, int K, int sigma_grid, int Ns_max, arb_struct H, int sigma_interp, int prec) {
    return arblibJNI._acb_dirichlet_platt_local_hardy_z_zeros(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), len, SWIGTYPE_p_long.getCPtr(T), A, B, arb_struct.getCPtr(h), h, J, K, sigma_grid, Ns_max, arb_struct.getCPtr(H), H, sigma_interp, prec);
  }

  public static int acb_dirichlet_platt_local_hardy_z_zeros(arb_struct res, SWIGTYPE_p_long n, int len, int prec) {
    return arblibJNI.acb_dirichlet_platt_local_hardy_z_zeros(arb_struct.getCPtr(res), res, SWIGTYPE_p_long.getCPtr(n), len, prec);
  }

  public static void acb_dirichlet_dft_index(acb_struct w, acb_struct v, dirichlet_group_struct G, int prec) {
    arblibJNI.acb_dirichlet_dft_index(acb_struct.getCPtr(w), w, acb_struct.getCPtr(v), v, dirichlet_group_struct.getCPtr(G), G, prec);
  }

  public static void acb_dirichlet_dft(acb_struct w, acb_struct v, dirichlet_group_struct G, int prec) {
    arblibJNI.acb_dirichlet_dft(acb_struct.getCPtr(w), w, acb_struct.getCPtr(v), v, dirichlet_group_struct.getCPtr(G), G, prec);
  }

  public static void acb_vec_printd(acb_struct vec, int len, int digits) {
    arblibJNI.acb_vec_printd(acb_struct.getCPtr(vec), vec, len, digits);
  }

}
